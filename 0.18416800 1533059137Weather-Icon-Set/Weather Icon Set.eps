%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Weather Icons.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sasa
%%CreationDate: 7/31/2018
%%BoundingBox: 0 0 1200 900
%%HiResBoundingBox: 0 0 1199.9996 900
%%CropBox: 0 0 1199.9996 900
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 26871 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280500060505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528050505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000500050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050506052805060528
%050605280506052805060528050605280506050605060528050605280506
%052805060528050605280506052805060528050605052E7D595300060506
%000605280506052805060528050605280506052805060528050605280506
%050605060528050605280506052805060528050605280506052805060528
%050005000500050005000500050005000500050005000500050005052705
%05000500050005000500050005000500050005000500050005000500052E
%FFFFFFCA7B749E5051000500050005000500050005000500050005000500
%050005000500050005052800050005000500050005000500050005000500
%050005000500050005280528052805280528052805280528052805280528
%0506057B9EFEC6CC9E510506052805280528052805280528052805280528
%05280528050605FFFFFFC9CCC6FECCCDCCC7270605280528052805280528
%05280528052805280528052805052884A8FFFFA852060528052805280528
%052805280528052805280528052805280505050006050500060505000605
%05000605050006050505A4C6FEC6CDCDCDC67B0005000605050006050500
%06050500060505000605050006002EA8FFC8C6C6FEC6CDC9CECCC6270605
%0500060505000605050006050500060505000605052EFD07FF7D05000500
%060505000605050006050500060505000605050006280506052805060528
%05060528050605280506050605A5C6FEC6FEC7CECECDC651000605280506
%05280506052805060528050605280506050628FFCAC6C6FEC6FEC6CDC8CC
%FE9F002805060528050605280506052805060528050605052EFD09FF7D05
%050605280506052805060528050605280506052805060500050005000500
%050005000500050005000500050051C6C6A4FEC6C6A4CCC6FE9E05000500
%05000500050005000500050005000500050005000553C8A4C6C6C6A4FEC6
%C6A4C6C027000500050005000500050005000500050005000500A8FFFFA8
%FD07FF280500050005000500050005000500050005000500050005280528
%0528052805280528052805280528052805289EFEC6FEC6FEC6FEC6FEC6C6
%2D0605280528052805280528052805280528052805280506287DC9CFCDCC
%C6FEFD06C650060528052805280528052805280528052805280053FD0BFF
%A80506052805280528052805280528052805280528052805000605050006
%050500060505000605050006050505FD04C6FEC6C69EC6C0C6C675000500
%0605050006050500060505000605050006050528FD06FFC7C0C6C0C69EC6
%C67B000505050006050500060505000605050006050553FFFFFFA8FFFFFF
%A8FFA8FFA806000500060505000605050006050500060505000605050605
%280506052805060528050605280506052805279EFD07C6C0C6C6C6500605
%0605280506052805060528050605280506050628FD08FFC7C0C7C6C6C0C6
%C859002805060528050605280506052805060528007DFD08FFA8FFFFFF05
%050506052805060528050605280506052805060528050005000500050005
%000500050005000500050005059EC0C6C0C69EC6C0C69EC6C65100050005
%00050005000500050005000500050005007DFFFFA8FFFFFFA8FFA8CAA8C9
%C0C69ECFA80500050005000500050005000500050005000552FFA8FFA8FF
%A8FFA8FFA8FFCF7E2E2E0005000500050005000500050005000500050005
%28052805280528052805280528052805280528050674FD0BC62706052805
%2805280528052805280528052805280528A8FD09FFA8FFA9CEC0C7FFA805
%2805280528052805280528052805280528052EFD0FFF7D00280528052805
%280528052805280528052805050500060505000605050006050500060505
%00060027C0C6C6C69EC6C0C69EC674050006050500060505000605050006
%05050006050500A8FFFFA8FFA8FFA8FFA8CFA8CFA8C7C9FF2E0500060505
%0006050500060505000605050006007DFFFFA8FFA8FFA8FFA8FFA8FFA8FF
%A80600060505000605050006050500060505000628050605280506052805
%06052805060528050605280551FD08C69E28050605280506052805060528
%050605280506052805057DFFFFFFA8FFFFFFA8FFFFFFA8CF7D7D28060506
%05280506052805060528050605280506050605A8FD04FFA8FFFFFFA8FD05
%FF0505052805060528050605280506052805060500050005000500050005
%00050005000500050005000500519EC6C6C6C0C674050005000500050005
%0005000500050005000500050005002ECFFFA8FFA8FFA8FFA8FFA8FFA828
%F80500050005000500050005000500050005000500050005007DA8FFFFFF
%CAFFFFFFCAFFFFFF53050005000500050005000500050005000500052805
%2805280528052805280528052805280528052805280028517B507B270605
%2805280528052805280528052805280528052805280528007EFD0BFF7D05
%28052805280528052805280528052805280528052805280506002E537D59
%7D597D597D597D2E06052805280528052805280528052805280528050006
%050500060505000605050006050500060505000605050006000600060505
%000605050006050500060505000605050006050500060505005384FFA8FF
%A8A8A8FFA859000505050006050500060505000605050006050500060505
%000605050005000500050005000500050006050500060505000605050006
%050500060505060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506000605280528052805280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000628050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506052805000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528050505280528052805280528052805280528052805
%280528050505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060005000605050006050500060505000605050006050500060505
%000605050006050500060505000600050552280500060505000605050006
%050500060505000605050006280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050500280505000605050528050605280506052805
%06052805060528050605280506052805060528050500287DFFCFFFA85900
%280506052805060528050605280506052805060500050005000500050005
%000500050005000500050005000500050000000500050005000500050005
%000500050005000500050005000500050005007DA8FF7D28002805050005
%000500050005000500050005000500050005000500050005000500280528
%7DFFA8FD04FF530005000500050005000500050005000500050005280528
%052805280528052805280528052805280528052800282E7D597D28050528
%052805280528052805280528052805280528052805280528057EFD04FFA8
%FFAEFF845300060528052805280528052805280528052805280528052805
%052EA8AFFD05FFCFFFFFFFA8280528052805280528052805280528052805
%280500060505000605050006050500060505000605050006002E7EFD05FF
%7D050006050500060505000605050006050500060505000605050028A8FF
%FFFFA8FFA8FD04FF7D000500060505000605050006050500060505000605
%05000552FD07FFA8FFA8FFA8FF5205050500060505000605050006050500
%0605050605280506052805060528050605280506052805060059FFFFCAFD
%05FFA80600280506052805060528050605280506052805060528050528FF
%FFFFA8FD08FF590006052805060528050605280506052805060528050528
%FD09FFA8CAA8FFCF7D002805060528050605280506052805060528050005
%0005000500050005000500050005000500050028A8FFA8FFA8FFFFFFA8FF
%5305000500050005000500050005000500050005000500050006A8FFA8FF
%A8FFA8FFA8FFA8FFA8060005000500050005000500050005000500050005
%0084FD04FFA8FFFFFFA8A8A1A8A1FF520500050005000500050005000500
%050005000528052805280528052805280528052805280528050559FFCFFF
%CFFD06FFCF05060528052805280528052805280528052805280528050600
%59CFFFCAFD05FFCFFFA8FF52050528052805280528052805280528052805
%280528A8FD09FFA8A8A7A8A82E0028052805280528052805280528052805
%2805050500060505000605050006050500060505000505A8A8FFA8FFA8FF
%A8CFA8FFA852000605050006050500060505000605050006050500050059
%A8FFFFFFA8FFA8CFA8CFA8CACA5900050006050500060505000605050006
%0505000505FFA8FFFFFFA8FFA8FFA8CFA1A8A1A828050006050500060505
%000605050006050500062805060528050605280506052805060528050600
%28A8FFA8FFFFFFA8FFA8CFA8FF5905052805060528050605280506052805
%06052805060084FD06FFCAFFA8FFA8FFA8FF842E05060528050605280506
%05280506052805060528A8FFA8FFFFFFA8FFFFFFA8FFA8A8A75300060528
%050605280506052805060528050605000500050005000500050005000500
%050005000505A8A8CAA8CAA8A8A8CAA8CAA8590005000500050005000500
%0500050005000500050052FD04FFA8FFFFFFFD05A8CAA8FF7D0500050005
%0005000500050005000500050005007DFFFFA8FFA8FFA8FFA8FFA8FFA8A8
%280500050005000500050005000500050005000528052805280528052805
%2805280528052805280528A8FFA8FFCAFFA8FFA8FFA8FF52050528052805
%2805280528052805280528052805057DFD09FFA7A8A7CFA8FFFFFF050605
%280528052805280528052805280528050605FD0DFF7D2805280528052805
%280528052805280528052805000605050006050500060505000605050006
%05050059CACFA8FFA8FFA8CFA8CFA7280005000605050006050500060505
%00060505000505A8FD04FFA8FFA8FFA8A8A1A8A1CAA8FF7D050505000605
%05000605050006050500060505000528A8FD04FFCAFFFFFFCAFFA8280006
%050500060505000605050006050500060505060528050605280506052805
%06052805060528050505A8FFFFA8FFFFCFA8FFCF53002805060528050605
%28050605280506052805060528A8FD05FFA8FFFFFFA8A8A7A8A8FFA82E00
%28050605280506052805060528050605280506050605597DA87DA87DA87D
%A8592E050605280506052805060528050605280506052805000500050005
%0005000500050005000500050005000505A8FFFFA8FFA8CFA85900050005
%000500050005000500050005000500050005007DFFFFA8FFA8FFA8FFA8FF
%A8CAA1520505000500050005000500050005000500050005000500050006
%363600050005002F2F050005000500050005000500050005000500050005
%00052805280528052805280528052805280528052805280506057DA8FFA8
%CF7D5305060528052805280528052805280528052805280528050628FD0C
%FFA805060528052805280528052805280528052805280528052805272F67
%3D2F0005002E3D672F270528052805280528052805280528052805280528
%050505000605050006050500060505000605050006050500050005052E05
%05000605050006050500060505000605050006050500060505000528A8FD
%04FFCAFD05FF280500060505000605050006050500060505000605050006
%0505002E3635002F2F0506613D2F00060505000605050006050500060505
%000605050006280506052805060528050605280506052805060528050605
%280505000605060528050605280506052805060528050605280506052805
%06050505597DA87DA87DA87E7E2805050605280506052805060528050605
%2805060528050605280506002800283D670605062F050605280506052805
%060528050605280506052805060500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050036360600050005
%000500050005000500050005000500050005000500052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805060528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050506052805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280505050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500060505000605050006050500060505000605050006
%050500060505000605050006050500060505000605050006050500060505
%000605050006050500062805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605280506052805060528050605
%280506052805060528050605280506052805060528050605280506052805
%060528050605280506052805060528050605000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000500050005
%000500050005000500050005000500050005000500050005000528052805
%280528052805280528052805280528052805280528050605280528052805
%280528052805280528052805280528052805280528052805280528052805
%280528052805280528052805280528052805280528052805280528052805
%280506000500060528052805280528052805280528052805280528052805
%280528050006050500060505000605050006050500060505000500050528
%000500060505000605050006050500060505000605050006050500060505
%000605050006050500060005000605050006050500060505000605050006
%05050006050500060005287D597D28050005000605050006050500060505
%000605050006050500060505060528050605280506052805060528050605
%2805050559A8FFA8A9530600280506052805060528050605280506052805
%0605280506052805060528050605280506517B7A57050605060528050605
%280506052805060528050605280506002E84FD05FF842E00060528050605
%280506052805060528050605280506052805000500050005000500050005
%000500050005000505A8FD06FFA828000500050005000500050005000500
%0500050005000500050005000500050000002D9EFEC6CDCCA52606000500
%05000500050005000500050005000500050028A8FFFFFFA8FFFFFFA82E00
%050005000500050005000500050005000500050005000528052805280528
%05280528052805280528052805AFFD08FFA8280506052805280528052805
%280528052805280528052805280528050605595359A4FEC6CCCDCECCC605
%060528052805280528052805280528052805280506A8FD09FFA805000605
%280528052805280528052805280528052805280505050006050500060505
%0006050500060505007DFD0AFF5305000500060505000605050006050500
%060505000605050006000553FD05FFC8C6C6FEC6FEC67500050006050500
%060505000605050006050500052EFFA8FD09FF5352280500050006050500
%060505000605050006050500062805060528050605280506052805060528
%0528A8FD0BFF7DA852060028050605280506052805060528050605280506
%05057DFD07FFCDFEFD04C67A060506052805060528050605280506052805
%06007EFD0CFFCFCF7D280506052805060528050605280506052805060500
%050005000500050005000500050005000528FFA8FFFFFFA8FFA8FFA8FFA8
%CFA8FF7D05000500050005000500050005000500050005000528FFFFFFA8
%FFFFFFAFFFA6C8A6C7C09E00050005000500050005000500050005000500
%057DFFA8FFA8FFA8FFA8FFA8FFA8CFA8CF7D050005000500050005000500
%0500050005000528052805280528052805280528052805280552FD0CFFA8
%CFCAFF520605280528052805280528052805280528050600A8FD0AFFA8FF
%A8CD74060528052805280528052805280528052805280084FD0CFFCACFA8
%FF2806052805280528052805280528052805280500060505000605050006
%050500060505000505FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFCA7D00060505
%000605050006050500060505000600057DFD07FFA8FFA8CAA8CFCA520006
%05050006050500060505000605050006050552FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA82E000500060505000605050006050500060505060528050605
%28050605280506052805060506A8FFA8FFFFFFA8FFFFFFA8FFFFFFAFFF7D
%0505280506052805060528050605280506052805A8FD04FFA8FFFFFFAFFF
%A8CFA8FF5905052805060528050605280506052805060528052EA8FFFFFF
%A8FFFFFFA8FFFFFFAFFFFFFF050605060528050605280506052805060528
%050005000500050005000500050005000500050053FFFFA8FFA8FFA8FFA8
%FFA8FFA8FFFF5900050005000500050005000500050005000500057DFFA8
%FFA8FFA8FFA8FFA8FFA8CFCA7D0005000500050005000500050005000500
%0500050059FFFFA8FFA8FFA8FFA8FFA8FFA8FFA805000500050005000500
%05000500050005000528052805280528052805280528052805280528057E
%FD04FFCFFFFFFFCFFD05FF2E050528052805280528052805280528052805
%28052EFD0EFF52050528052805280528052805280528052805280506007D
%FD06FFCFFFFFFFCFFFFF8400280528052805280528052805280528052805
%05050006050500060505000605050006050500050059A8FFFFFFCFFFFFFF
%CFFFFFFF842800050006050500060505000605050006050500060059FFFF
%CAFFA8FFA8FFA8FFA8FF7D05000500060505000605050006050500060505
%0006002E13597DA8A8FFA8A9A8FFA8A8A884050500060505000605050006
%050500060505000628050605280506052805060528050605280506050606
%2F527D597D537D597D537D59280028050605280506052805060528050605
%28050605280053A8FD07FFCAFFA828002805060528050605280506052805
%0605280506002F3D670D057AFE9E7B7B2D052F2828000605060528050605
%280506052805060528050605000500050005000500050005000500050005
%00050D673605F8050000F8060D2F00050005000500050005000500050005
%00050005000500050005002E355352532E532E5928050005000500050005
%000500050005000500050005000506673D3600FD04C6FE50363D36000500
%050005000500050005000500050005000500052805280528052805280528
%052805280528050606613D6106280506052836673D2F0528052805280528
%05280528052805280528052805280528052E3D67060500050035362F0528
%0528052805280528052805280528052805280528052836610605275151C6
%C6593D673D2E052805280528052805280528052805280528052805000605
%0500060505000605050006050500060005356736060028050505613D670D
%0505050006050500060505000605050006050500060505000506613D2F00
%0500283D6735050505000605050006050500060505000605050006050500
%05002E0D060051C67B063D3D610505000605050006050500060505000605
%05000605050605280506052805060528050605280506052805060C28002F
%3D3605052F67362800280506052805060528050605280506052805060528
%050605282E2F00353C2E003C3D2F00280506052805060528050605280506
%0528050605280506002F3D610651C6C627060C3506280506052805060528
%050605280506052805060528050005000500050005000500050005000500
%050005000500053667360600050005000500050005000500050005000500
%05000500050005000500050005000536670C050006000500050005000500
%05000500050005000500050005000500050D673D2E9ECCC6510005000500
%050005000500050005000500050005000500050005280528052805280528
%0528052805280528052805280528052F3C36052805280528052805280528
%05280528052805280528052805280528052805280528052F352805280528
%052805280528052805280528052805280528052805280528052E352F009F
%FEC627060528052805280528052805280528052805280528052805280505
%050006050500060505000605050006050500060505000600050005050500
%060505000605050006050500060505000605050006050500060505000605
%050005000500060505000605050006050500060505000605050006050500
%060505000500050551050500060505000605050006050500060505000605
%050006050500062805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060006050605280506052805060528
%050605280506052805060528050605000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805280528052805280528052805280528052805280528052805280528
%052805050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505000605050006050500060505000605050006050500
%060505000605050006050500060505000605050006050500060505000605
%050006050500060505000628050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506052805060528050605280506
%052805060528050605280506052805060528050605280506052805060528
%050605280506052805060528050605280506050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005000500
%050005000500050005000500050005000500050005000500050005
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2018-07-31T13:02:59+02:00</xap:CreateDate>
         <xap:ModifyDate>2018-07-31T13:03+02:00</xap:ModifyDate>
         <xap:MetadataDate>2018-07-31T13:03+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4Hm1dU7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FU68oeTvMHm7WY9I0O2+sXbqXckhY441IDSSOdlUVH6hU7ZGUhE&#xA;WWUYmRoM680f842fmToGktqZW01OKMj1YLCSSSZQf2vTkji577USp9sxp63FAcUyIx75bD5t35af&#xA;QX7mF3P5e+eba2W5m0G+WFgW5CB2KgCtXVQSn+yAzEx9vaGcuEZsd/1h9nf8Flo8oFmJ+TH82zju&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV6P+T35bW/mq9nv9VDfoeyIUxqSvrT&#xA;HfhyG4UL9qm+4zjvaz2hloYDHi/vp/7Ed/v7vi7Xs3QjMTKX0j7S+ldH0nSdMhjtrO1itbRf91QI&#xA;qKB8lAzyKWqlmyiWeUp77kkkvQ8IjGoiku8+fl35P81ae0d1bol8RSG/iAE8ZANDy6soJ+ydv150&#xA;WDtn8gYy009r3hZMSPceR8xu4eTTDKKmPj1fIevaLeaJrF3pV4B9YtJCjMOjDqrrXsykEZ7DodZD&#xA;U4Y5YfTIX+z4cnms+GWKZhLmEBmW1OxV2KuxV2KvoP8A5xO1TSbRvMsczouoFLeZFNObQR+pz4f6&#xA;rMtfmM1/aOYYsZyS+mIJLm6KPFLhHMvZbq+nvpzLMTTqkddlHgM8J7V7Uy6vIZzO3QdIj8der1WP&#xA;CMcaCItbi2RCsqVP81AclodXghAxyRs99W15ISJ2LxH8/wDyDpU2nv5n0u3WC+gat+sYp60LGnqM&#xA;o25ox+13Fa1oM7H2O7ekM500ifBl9F/wnu9x7uhquZdb2lorx+IB6o8/N8+56m887FXYq7FXYq9z&#xA;/ID8kbDzNb/4o8yRmXSEkaPT7CpVbh0NGkkIIPpow48R9og12FGxs2Wtg5GHFe5fUemaTpem2yWl&#xA;haQ2lqgokEEaxRgeAVQAMxCbcwCnnX5sfkT5W826Zc3WmWsOmeZEVpbe8gURpM434XCrQNz6c/tL&#xA;13FVNuPMY+5qyYRL3vjK5tp7W4ltriMxXEDtHNEwoyuh4spHiCMznAU8KuxV2KuxV2KuxV2KuxV2&#xA;KuxV9L/km8UH5f6c0YFZWnM1OpYTuAf+BAzxb2xuXaEwegjX+lH6bez7JgDpo/H7yz9tSolI1+Lx&#xA;bOVGHfdzxh33Q7XdywILmh60oP1ZYMcWwY4jo+d/z4jhXzrE0dOb2UTTU/n9SRd/9iFz172HlI6I&#xA;30yGvdUf028n26B44r+aP0vOc7F0rsVdirsVRmj6Ve6vqtnpdinqXl9MlvAh2BeRgoqew33OAmha&#xA;QLNPtb8uvya8m+TbKAw2cV7rKL+/1a4QPKZCpD+ly5ektGI4r26k9c12WXiCj9Pc7DHjENxzZjf6&#xA;PYXER4xrFKBVZFFDX3pSuaDtL2f02qgRwiE+koijfn3/AB+FOZi1U4HnYYPc6drPxF02WtVRh+oH&#xA;fPPZ+zOrxgnguvMEu9x6vByBSe90ZdctZ9Gmdo01GN7WSQAFkWVShYA91BrlHY4kNZiobjJH7Du3&#xA;asA4Zf1T9z5R81eXbvy35j1DQ7tg8+nzNCZAKB1G6OB2DqQ2e8RlYt4CUaNJVkkOxV2KuxV92flO&#xA;trD+W3llLenpHTbZ2p/vx4w0v/JQtmtyfUXZY/pDLmuABtucgzU2mdhTt7Yq+Ovzx8i+YrX8xNbv&#xA;7fSLl9Lu3F3FdwwySQkPGrSsXUEAiTlyrmfhmOEOBmgeI7PLsuaXYq7FXYq7FXYq7FXYq7FXYq9S&#xA;/Jr8wbLRnk0LV5RDY3Enq2ty5okcrABlcnorUG/QHr1zhfa/sCeoAz4Rc4ipDqR3jzH2/B3vY/aE&#xA;cd45monkfN70HjZAysGRhVWBqCD0Izysgg0XqQlGv+Y9H0Cwe+1S4WCFQeC9Xkb+WNerH/M7Zn6D&#xA;s/Nqsgx4o8R+weZPRhqNRDDHimaD5g81eYbnzDr13q1wOBuG/dxVqEjUcUT6FGe39l6COk08cMf4&#xA;eveepeE1WoObIZnqlObBx3Yq7FXYqyz8qNVstJ/MbQL6+IW1ju1WR2+ynqAxhz7KXrleQXEs8ZqQ&#xA;fdSzMB7+Oa52S0u56k4qhJ7VmZnU9d6ZVLHe7MSeS+cPzo8oeS/M19Zz2d3favBGjJHCIlgDyoGo&#xA;8jPzUlSK0jPXNdouwIjVS1XfyH3n4/r72eo7RrGMXd+KfMfmbzBe+YfMF/rd7QXN/M0zqv2Vr9lF&#xA;r2VaKM6mMaFOllKzaWZJDsVdirsVfRn/ADjx+cGlW2mReTtfuFtXhZv0TeSsFjZZG5egzH7LBmPC&#xA;uxG3YVxM+I3YcvBlFUX0KXUU9/DMVymvVX3wWmnCRSaYbRT4h/OEaIPzM18aJw/R/wBYHH0vser6&#xA;a/WONNqevz6ZscV8It12WuI0w3LGt2KuxV2KuxV2KuxV2KuxV2KphY+YvMFhF6Njqd3aRf77gnkj&#xA;X7lYDMPN2fp8pvJjhI+cQfvDdDUZICoykPcShry+vb2Yz3lxJczHrLM7SMf9kxJy/FhhjjwwiIx7&#xA;gKa5zlI3I2VDLWLsVdirsVdirsVeweSP+clfNfl/TYtN1S0TXLWBQkEskhhuFUCiq0oWQMB7rX3z&#xA;HnpweWzfDUEc92Tf9Dbt/wBSsf8AuIf9m2Q/K+bZ+a8kPqH/ADlnqMllNHp/l1LW8dSIbia7M6Ix&#xA;/aMYhi5U/wBYYRpvNB1XcHhOoahe6jfT399M1xeXLmWeZzVmdjUk5kgACg4xJJsofCh2KuxV2Kux&#xA;V2Kpxp/nLzfp0At9P1zULO3UUWG3upokAHgqMBkTAHmGQmRyKJ/5WL+YP/Uz6t/0nXP/ADXg8OPc&#xA;E+JLvKyfz957uIXhn8x6pLDIOMkT3twysD2Kl6HHgj3I45d5SHJsXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FUVpml6jql9FYabay3l7OeMNtAhkkYgVNFWp2AqcBNJAtkfm&#xA;T8p/zE8t6cNS1nQ57awNOVwpjmRK0A9QwtJ6dSafHTfIRyRPIspY5DmGJZYwdirsVdirsVdirsVd&#xA;iraqWIVRUnYAdScVe4eTP+cXda1SyhvfMGpDSfWAcWEcXqzhGGwkZmRY39qN779MWepA5OVHTGrK&#xA;F/Mf/nGfzB5W0qbWdKvl1iwtg8l1D6ZhuIol35BQ0iyBVqWPw/LwlDUAmjsxnpyBYeMZkOO7FXYq&#xA;7FXYq7FXYq7FXYq7FWeflJ+Vl3581iWN5WtNHsQrX90oBc8j8MUddubAHc1C9T2Bpy5eAebdhxcZ&#xA;8n1DoH5M/lnpUCW6aBaXA25TXsa3UhPclpudK+1BmEc0j1czwojkEk/MP/nHDyPrWnyz6FAmi6zS&#xA;tvJBVbZ2A2WSEVUKfFFBHXfobIZ5DnuGueCJ5bPkbU9NvdM1C506+iMF5aSNDcRNQlXQ0IqKg/MZ&#xA;nA2LcIijRQ2FDsVdirsVdir6H/5xHtNMFz5j1CRVOowpbwxsftJBIXZ6ezNGtfkMxdSeTlaYc30T&#xA;JM1xVSaRH9jxB8cwrc3kvay0y7tHtb2GOaCQFJIZVDRspFKFT8JHzwhiXzN/zkJ+TOj6FanzT5Zh&#xA;NvZGXhqNgn91H6hoksQ/YXn8LL03FKDMvBmJNFxM+GhYeC5luK7FXYq7FXYq9z/5x3/JzS/MqS+Z&#xA;/MUP1jTLaX0bGxaoSaVKF3l/mRagBejGtdhQ42fKRsHIwYgdy+prHTtPsrZLW1tore2jAWOGJFSN&#xA;QOgCqAAMxCXNAUtRaG1he4pRF3YDIlI3SU65FeK0FQVcFSjVNQdiN9shbPgfDfm6xttP8161YWop&#xA;a2l/cwQDrSOOZkX8Bm2gbiC6iYqRCU5Ni7FXYq7FXYq7FXYq7FXYq+tv+cdrW1svyysJ0Wj38txN&#xA;cMBuXWd4QT/sIhmt1B9Zdnph6A9SN9EqbfE3h0ym23hUGv5iCAAK+HXBaeEPlH/nJCwt7X8xFmiA&#xA;D31jDcT0FKuHkhqf9jEubDSm4uv1QqbyzMlxnYq7FXYqq2trcXd1Da20bTXNw6xQxIKs7uQqqo7k&#xA;k0wFQ+wfyg/IjTvJiJql/dTXWvzRcLlYpGjtUDirRhF4+qB4vXcAgDMHLl4tujn4sXDv1epy2Uar&#xA;yi2I7V6/flFN9pJLqnKQxrIqMDQpUFq5C2Yik/mzR5fMXlzU9G5L6uoWstvC8teCSOhEbtQE0V6N&#xA;tkoSqQKJxuJD4l1jSb7R9Vu9Kv4/SvbKV4J06gOhoaHuPA5tgbFuoIo0g8KHYq7FXYq+xf8AnG3U&#xA;bWf8qdOggIMtlNcw3SjqJGneYV/55yrmBnHqc/AfS9SadyKDbKW5D3MZngkhZj+8Rkr1pyFMVDEb&#xA;7Rr2xQTOVZAftoTse1agZWRTcJW+LNdjWPXNRjWQyqlzMqyseRYCQjkT3r1zbx5B00+ZQOSYuxV2&#xA;KuxV2KuxV2KuxV2KvoL/AJxs8+6eLdvJ2pTCGb1mm0xnIUSCSheEH+YN8Q8anwzC1OPfiDm6bLtw&#xA;voqS3t/TIKhQB9odRmI5IJSS/v7LT7Oa9vp0trSBS808hCoqjuScAF8mwkDcvjb8y/OH+LfOF7q6&#xA;AraEiGyRuogiFFqOxbdiPE5tcUOGNOpyz4pWxfLGt2KuxV2Ksx/J6Wyi/M/y295QQ/XEALUp6jAi&#xA;Lr/xYVyvL9JbMX1B9zrPQdN81zsVrTSGu9AewxViusaNem6nuYkDxN8fwnceO2QIbIyDH7z81vIv&#xA;lsvDrupiLULdOf1NI5JJWDfYpxUrU+7fPLMeKUtw15csY7F8n+ePMp8z+bdU14xeit/O0kcRpVYw&#xA;AsYan7QRRX3zZQjQp1k5WbSPJMXYq7FXYqzX8rvzO1/yNrDSafF9ds70ql3pjEgSkGiFGAYrIK0B&#xA;ofcHK54uPZnDLwb9H0hf/n15a0mC1bXrDUNKnuU5rA8ccoqKVAeN26VHUA+2U5NFkhzbMHaOLLfC&#xA;eSFg/wCckvy8uJkggN/LNIeMcSWpZmJ7AA1OVjTTLfLVQAssV/Nf/nIaBdLuNB0GzuoNUmAWe7u4&#xA;1iEKGjVjTkzM/uaAe+WDSkH1NX5yMhcN/N83ZlOM7FXYq7FXYq7FXYq7FXYq7FW1ZlYMpKspqCNi&#xA;CMVZ1pn54/mhp9qtrHrbzwoAEF0kc7Cn+XIrOfpOUnBA9G6OeY6pJ5m8/eb/ADPQa3qct1Ep5Jbj&#xA;jHCD4+nGFSvvSuShjjHkGE8kpcyx/LGDsVdirsVdiq5HeN1kjYo6EMrKaEEbggjFX0V5H/5yltY9&#xA;Pis/N1nM93EoT9JWgVhIAKcpYmZOLeJWtfAZiT0/c5cNT3ss/wChmvy0/wB+3n/SP/zdlf5ebZ+Y&#xA;gg9V/wCco/IlvYyvp0F5fXvE+hA0QiQv25uzHivyU/LCNPLqg6iPR8xa7rd/rer3Oq37B7q6fm9N&#xA;lAAAVVHgqgAZmRiIig4c5GRsoDJMXYq7FXYq7FVexu5bK9t7yGnq20iTR8txyjYMK/SMMZUbYziJ&#xA;Ag9WbzeZJPzC8w6PpWpCHS7MMQzQndmK1NDIaAtxooPj3zI8TxCAdg62OnGkxylG5FQ+saV5G/MR&#xA;nt639jafCwRx6q80+IBx8PNT/TGxjntyZcMtTp9/TIpX59802/mXXjqFvbtbwrGsSByC7BWZub02&#xA;qeXjlebJxm2/RaY4cfCTZY5lTluxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV6R+Xn5DedfOlqmoxiPT&#xA;NHkP7u9uuVZR0JhiUFnA8TxXwOUzzCLbDCZM51T/AJxC1+KyMml+YLa8uxv6E8D2yHxpIrz7+FV+&#xA;7KxqR1DYdMeheH+YPLuteXtVm0rWrR7K/gNJIZKdD0ZWFVZT2ZSQcyIyBFhx5RINFLskh2KuxV2K&#xA;uxV2KuxVdFFLNKkUSNJLIwSONAWZmY0AAG5JORlIRBJNAJAJNB6Ro/8Azj9+YGpWyTMLSxeQVW3u&#xA;pXEtO1REkoHyJr45yWb220UcnBATyH+jEV9pj+p2MeyspFmo+9jXnP8ALvzV5PuFj1m14wynjBeR&#xA;HnBIaVoGoCD7MAc3XZ3bGDV2IEiY5xltIfrHmCQ4ufSzxc+Xf0Y1m1cd2KuxV2KuxVmX5bflZ5k8&#xA;+6i8Gmhbewtyv13UZq+nEG6KAN3cgbKPpIG+V5Mgi2Y8Zk95sP8AnEbyULZFvtY1Ka6A+OWEwQxk&#xA;+IjaKYj/AIM5jHUnucgaYd7zP81f+cdde8m2cus6XcHV9Ci+KduHC5t1qd5EFVdFFKutPdQN8ux5&#xA;xLY82rJgMdxyeQZe0OxV2KuxV2KuxV2KuxV2KuxVlv5U+VLfzV5+0nRrr/eOWRpbsVpWKBDKy/7P&#xA;hx28cryS4Y2zxx4pAPu22ihhjSGFFjijUJFGgCqqqKBVA2AAzXOyVvVCihIHzxV5l+dn5WW3n7TL&#xA;Q28sdpq1g9Yrx1JBhf7cTcdyK0YeB+ZyyGbgasmLjfNXn/8AJjzV5NtRqFw0V9pdQr3dty/dsxoo&#xA;kRgCtT0IqPfMnFqYz26uLkwShv0YDmQ0uxV2KuxV2Kvf/wAkP+cftN17SYfMvmxXksrqp0/TEZog&#xA;8Y29WV0KvRj9lVI23rQ0zFy5qNBycOGxZe9WP5W/l3ZyQzWfl+xtri3NYbiKFUlU0Ir6g+LofHNf&#xA;q8MdRjOPJZhLmLI+5zMfokJR5hR1Owk02dTBzkRt4yo5N7g02zyvtX2dz6TODpxKcTyNWR3g07rB&#xA;qI5R6qDCvzHgTXPKupafexMvK3d0LjiVeMF42A9mUZToNRqdPrseTJYmCBRFbHYt+XSwnikLBFfa&#xA;+Qc90eJdirsVdirsVfdH5PeX7PQfy60O0tlUPNbR3ly4H25rlBK7E9TTlxHsBmuyyuRdjijUQzfm&#xA;FHImmVtiHvDb3VtLbzIJYZkaOWNxVWRhRgwPUEHFXztr/wDzi3pBiuDo2rzw3fJmhjuVV4aVqqEo&#xA;FZfDlv8ALLBrSDRDQdIK2L581fSb/SNTudM1CIwXtpIYp4jQ0ZfcbEHqCOuZ8ZAiw4UokGihMkh2&#xA;KuxV2KuxV2KuxV2Ks7/I/wAw22hfmbo91duI7Wd3tJnJoB9YQxoSfASFSa5VmjcS2YZVIPtoSOOh&#xA;zXuxWkkmp3OKrXUMpU9DgItWK/mNZWY8h+YDdUa2Gn3JkDjbaJiCKdwaU98jDHUhXes5ek33PhjN&#xA;w6p2KuxV2KuxV+gHk2W3HlTRTb0+r/UbYwFPs8PRXjT2pmslzLs48gnDXDfsig98iyQ12ryp4sDU&#xA;ZCYsJiWG/mNayt5I10qfSuItPuZIZDQcWWFjse3TMHNoceaUBkF8MgR8D+nq2jNKEZcJ5gviLOmd&#xA;I7FXYq7FXYq+2PyT83WfmP8AL3S3ikBvNOhjsb6IbMkkChFYjwkRQw7b+2a7LGpOwwyuLOySeprl&#xA;ba7FVKS3ickkbnuMiYApBfG3/OQMsD/mrq6RDeFbeKVx+06wJU/QCF+jM/TRqAdfqDcy86zIaXYq&#xA;7FXYq7FXYq7FXYq7FX0j5K/Nvzz5W8o29x5x0ttQ0qJUW3u43C3yxfZUyRsOEgGwqWVvGuQy6CVc&#xA;Q2Y4e1cZn4fMpv8A9DVeQP8Alg1f/kTbf9lGYn5aXk7D8zHzR+l/85F+WtVEjafomt3KxCsjpBbc&#xA;V9ixuKV9snDRZJcmrJ2hih9RpgP5pf8AORek+YvKlzoGg2F1E1+BHd3N6I0KRBgxWNY3lqWpSpIo&#xA;PwOPAQbK5c4IoPBsynGdirsVdirsVe7/AJJfn1b6JYQeV/MqSyWUR4abfQo0rxqST6UiLV2UfslQ&#xA;SOlKdMbLgMjY5uRjziIqXJ7fJ+av5fRuUm16zt5B9qG4k9GVaio5RycHXbxGY8sMwaIciGeEhYIp&#xA;pfzX/LpiAvmPTiT0AuEr+vB4cu5l4kO95L+eP566Fe6JN5b8rzi9kvVMeoagoYRxxH7UUZYDmzjY&#xA;kbAeJ6XYsBsE9GnLnFUHzpmY4bsVdirsVdir278sPL+peXtA/wASaTqM0OrXcHNYqf6IUoWVZYz/&#xA;AHlO/h+zQ75ljSQlDfmQ6fJ2rPHm4Y8gfm9X8ifmfrfmPyhHrd5p1sl1KZVgiimdI2MZKjlVZWj5&#xA;OD/NQb755x2v7Sw0eq8DgMgKs3XPfYVvt5jfZ7rRaM5sfFdFD+YfzU84aLHZu/lOC9+vTfV4UtNT&#xA;ZmEnEuAwks46AqjGvTbfNl2N2xp+0MpxYuMTiL9QHL4SLi6+EtLDjyVw+/8AYxvzf/zkR5k8uMtt&#xA;P5Wht7yeMtBK1608SsNiGVYISxXaoDfTnST0BhVnm6rB2nHMCYh85azq99rGq3eq38nq3t7K0870&#xA;oC7mpoOw8BloFCmJNm0HhQ7FXYq7FXYq7FXYq7FW1JUhh1BqMVei+Y/zaj1byw2lR6YILudAlzOX&#xA;5IKEElBSvxeBO3vmVPVGQI73Uafsw48vGZWOiA1j8srjTPJ6a892JJiI5JbZVIVEkIUDmftN8QOC&#xA;WnqF3u24u0RPN4YDI/y7/MHyno/lM2GozS293EXLRJGzCYM5dSGQEVFePxUyzDqBGIHc4mu0OXJl&#xA;4o0Y/c8u1O6iu9Su7qKP0oriaSWOL+VXYsF28AcxJmyS7rHHhiAegQ2RZuxV2KuxV2Kp75J8w23l&#xA;/wAx22p3MDTwxcg6xkCQBhTkhO1RlmKfDK3F1mA5cZiDRZO+nf8AKzPNl5dWFNOtbeFObygySN14&#xA;kqppVun2tvHLq8WV8qcMZPyeICXqJKz8ttZ8t+WdY1WLX2EVzGTDBc+kZgDGWSRRRWZeW29McMxA&#xA;kHmntDFlzQicfL5MN166srvWr66sozFaTTO8KHYhWNRUDpXrTtlGSQMiQ7DDExgAeYCAyDa7FXYq&#xA;7FXYqzf8vW8xa/P/AIWTV57TRyjyzxR/EeFQGWOu45F9xWnXbMjBcvTdB1uu8PEPF4QZso8t/lxr&#xA;P+OJ9H03U54dE08Q313As7o7xybceMfFeTFKE7fDnJ+1+pwaPHxHGJ5JxIiTEHh8yT3W7vsCc9SA&#xA;eLhiDvud/cj/AMx/Plxov5h2ENzau+l2Nv8AHCCFaT6x9qRD0+HgFFfBh3zA9gMEMWCWcbznKj5A&#xA;dP0/JyfaiMsx8IGqFj8fYwX8yPPVh5omtFsLWS3trXm3Kbj6js9OoUsNuPjvndZs3HQec7P0UsIP&#xA;EbJYXlDsXYq7FXYq7FXYq7FXYq7FXYq7FU1u/NXmK70mHSLm/ll02AARW7EUAXdQTSrBewJ27ZI5&#xA;JEV0aI6bHGZmB6ilWRb3Yq7FXYq7FXYq7FXYqibHUtRsJGlsbqa0kdeDPBI0bFT+ySpG2ESI5MJ4&#xA;4y2kAfehySSSTUnck4GbWKuxV2KuxV2KuxVWs728sp1uLOeS2uFrxmhdo3FdjRlIOIJHJjOAkKIs&#xA;J55Z8++ZvLurT6rY3Rlu7pPTuTc8pRINiC9TUkU2Nc1na3ZOHXwEM17GwRzcnSaiWA+ivd0SvWtc&#xA;1XW9Rk1HVLhrm7l+1I3YdlUDZVHgMydHosWmxjHijwwH4+LHNmlklxSNlA5lNTsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B40BD2BA9E94E811B2488A2224C7D334</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:B50BD2BA9E94E811B2488A2224C7D334</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B30BD2BA9E94E811B2488A2224C7D334</stRef:instanceID>
            <stRef:documentID>uuid:B20BD2BA9E94E811B2488A2224C7D334</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>900.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -900 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 900 li
1200 900 li
1200 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1200 900 mo
0 900 li
0 0 li
1200 0 li
1200 900 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .784314 .47451 .498039 cmyk
f
197.236 171.268 mo
197.236 203.37 223.26 229.393 255.361 229.393 cv
287.462 229.393 313.486 203.37 313.486 171.268 cv
313.486 139.167 287.462 113.143 255.361 113.143 cv
223.26 113.143 197.236 139.167 197.236 171.268 cv
cp
0 .282353 .92549 0 cmyk
f
218.236 205.018 mo
218.236 214.958 227.974 223.018 239.986 223.018 cv
251.998 223.018 261.736 214.958 261.736 205.018 cv
261.736 195.078 251.998 187.018 239.986 187.018 cv
227.974 187.018 218.236 195.078 218.236 205.018 cv
cp
0 .231373 .917647 0 cmyk
f
206.986 148.018 mo
206.986 143.333 208.331 138.974 210.621 135.259 cv
211.013 134.493 211.458 133.604 211.916 132.671 cv
222.563 120.696 238.077 113.143 255.361 113.143 cv
272.98 113.143 288.756 120.993 299.417 133.375 cv
300.489 135.529 301.111 137.947 301.111 140.518 cv
301.111 149.424 293.892 156.643 284.986 156.643 cv
284.22 156.643 283.955 156.596 282.735 156.469 cv
274.548 156.081 266.981 157.749 261.236 160.269 cv
254.558 163.197 247.312 168.366 239.28 171.051 cv
238.822 171.209 238.357 171.353 237.885 171.483 cv
237.519 171.589 237.173 171.672 236.827 171.756 cv
236.603 171.807 236.385 171.87 236.16 171.916 cv
235.57 172.037 235.005 172.131 234.486 172.175 cv
234.483 172.175 234.479 172.173 234.475 172.172 cv
233.453 172.304 232.418 172.393 231.361 172.393 cv
217.899 172.393 206.986 161.48 206.986 148.018 cv
cp
.00784314 .129412 .905882 0 cmyk
f
235.089 131.613 mo
241.859 127.629 243.912 123.882 244.459 122.524 cv
246.111 117.546 251.527 113.776 258.17 113.221 cv
274.652 114.007 289.327 121.657 299.417 133.375 cv
300.489 135.529 301.111 137.947 301.111 140.518 cv
301.111 149.424 293.892 156.643 284.986 156.643 cv
284.22 156.643 283.955 156.596 282.735 156.469 cv
274.548 156.081 266.981 157.749 261.236 160.269 cv
254.558 163.197 247.312 168.366 239.28 171.051 cv
238.822 171.209 238.357 171.353 237.885 171.483 cv
237.519 171.589 237.173 171.672 236.827 171.756 cv
236.603 171.807 236.385 171.87 236.16 171.916 cv
235.997 171.949 235.855 171.958 235.697 171.987 cv
237.767 170.048 238.292 167.843 238.205 165.425 cv
237.447 157.958 233.14 152.77 231.1 150.696 cv
230.87 150.486 230.651 150.271 230.438 150.05 cv
230.183 149.815 230.025 149.682 230.025 149.682 cv
230.025 149.682 230.028 149.64 230.029 149.619 cv
228.234 147.587 227.174 145.121 227.174 142.456 cv
227.174 137.826 230.36 133.792 235.089 131.613 cv
cp
.0196078 .0666667 .905882 0 cmyk
f
286.823 136.071 mo
285.539 141.62 277.504 144.5 268.878 142.503 cv
260.253 140.506 254.302 134.389 255.586 128.84 cv
256.872 123.292 264.905 120.412 273.531 122.41 cv
282.156 124.406 288.108 130.523 286.823 136.071 cv
cp
.0156863 .0117647 .611765 0 cmyk
f
610.011 135.413 mo
609.683 135.413 609.359 135.435 609.039 135.463 cv
609.039 135.461 li
608.841 135.479 608.642 135.491 608.441 135.491 cv
604.804 135.491 601.839 132.652 601.625 129.07 cv
601.626 128.94 601.634 128.811 601.634 128.681 cv
601.634 112.446 588.473 99.2842 572.237 99.2842 cv
556.002 99.2842 542.84 112.446 542.84 128.681 cv
542.84 144.917 556.002 158.079 572.237 158.079 cv
572.405 158.079 572.572 158.068 572.741 158.065 cv
572.741 158.079 li
609.732 158.079 li
609.732 158.064 li
609.826 158.067 609.917 158.079 610.011 158.079 cv
616.269 158.079 621.343 153.004 621.343 146.745 cv
621.343 140.487 616.269 135.413 610.011 135.413 cv
cp
.0392157 .027451 .027451 0 cmyk
f
613.54 153.819 mo
613.54 156.171 611.634 158.079 609.281 158.079 cv
570.665 158.079 li
568.313 158.079 566.407 156.171 566.407 153.819 cv
566.407 153.819 li
566.407 151.468 568.313 149.562 570.665 149.562 cv
609.281 149.562 li
611.634 149.562 613.54 151.468 613.54 153.819 cv
613.54 153.819 li
cp
.0588235 .054902 .0588235 0 cmyk
f
547.973 118.666 mo
547.973 116.09 548.648 113.695 549.798 111.653 cv
549.996 111.233 550.22 110.744 550.45 110.231 cv
555.8 103.649 563.596 99.498 572.281 99.498 cv
581.136 99.498 589.062 103.813 594.419 110.618 cv
594.958 111.801 595.27 113.131 595.27 114.543 cv
595.27 119.439 591.643 123.406 587.168 123.406 cv
586.783 123.406 586.649 123.381 586.037 123.311 cv
581.922 123.097 578.121 124.014 575.234 125.399 cv
571.878 127.008 568.236 129.85 564.201 131.325 cv
563.971 131.413 563.736 131.49 563.5 131.563 cv
563.316 131.621 563.142 131.667 562.967 131.713 cv
562.854 131.741 562.746 131.774 562.633 131.801 cv
562.336 131.867 562.052 131.918 561.791 131.943 cv
561.79 131.943 561.788 131.941 561.785 131.941 cv
561.272 132.013 560.752 132.063 560.221 132.063 cv
553.458 132.063 547.973 126.064 547.973 118.666 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
562.094 109.649 mo
565.496 107.459 566.528 105.4 566.804 104.654 cv
567.633 101.918 570.354 99.8452 573.693 99.5405 cv
581.975 99.9727 589.349 104.177 594.419 110.618 cv
594.958 111.801 595.27 113.131 595.27 114.543 cv
595.27 119.439 591.643 123.406 587.168 123.406 cv
586.783 123.406 586.649 123.381 586.037 123.311 cv
581.922 123.097 578.121 124.014 575.234 125.399 cv
571.878 127.008 568.236 129.85 564.201 131.325 cv
563.971 131.413 563.736 131.49 563.5 131.563 cv
563.316 131.621 563.142 131.667 562.967 131.713 cv
562.854 131.741 562.746 131.774 562.633 131.801 cv
562.55 131.818 562.479 131.823 562.4 131.839 cv
563.44 130.774 563.704 129.561 563.66 128.232 cv
563.279 124.129 561.116 121.277 560.09 120.138 cv
559.975 120.023 559.865 119.905 559.756 119.783 cv
559.629 119.654 559.55 119.581 559.55 119.581 cv
559.55 119.581 559.551 119.558 559.551 119.546 cv
558.65 118.428 558.117 117.073 558.117 115.608 cv
558.117 113.064 559.718 110.848 562.094 109.649 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
588.091 112.1 mo
587.445 115.15 583.408 116.732 579.075 115.635 cv
574.74 114.538 571.749 111.174 572.395 108.126 cv
573.04 105.076 577.077 103.493 581.411 104.591 cv
585.746 105.688 588.737 109.05 588.091 112.1 cv
cp
0 0 0 0 cmyk
f
682.312 186.753 mo
682.312 200.008 671.566 210.753 658.311 210.753 cv
645.056 210.753 634.311 200.008 634.311 186.753 cv
634.311 173.496 645.056 162.751 658.311 162.751 cv
671.566 162.751 682.312 173.496 682.312 186.753 cv
cp
.0392157 .027451 .027451 0 cmyk
f
554.063 165.552 mo
554.063 197.654 580.087 223.677 612.187 223.677 cv
644.29 223.677 670.312 197.654 670.312 165.552 cv
670.312 133.452 644.29 107.427 612.187 107.427 cv
580.087 107.427 554.063 133.452 554.063 165.552 cv
cp
0 .282353 .92549 0 cmyk
f
575.063 199.302 mo
575.063 209.243 584.801 217.302 596.813 217.302 cv
608.824 217.302 618.562 209.243 618.562 199.302 cv
618.562 189.362 608.824 181.302 596.813 181.302 cv
584.801 181.302 575.063 189.362 575.063 199.302 cv
cp
0 .231373 .917647 0 cmyk
f
563.813 142.302 mo
563.813 137.618 565.157 133.258 567.447 129.543 cv
567.839 128.777 568.285 127.888 568.743 126.955 cv
579.39 114.98 594.904 107.427 612.187 107.427 cv
629.806 107.427 645.583 115.277 656.243 127.66 cv
657.315 129.813 657.937 132.231 657.937 134.802 cv
657.937 143.708 650.718 150.927 641.812 150.927 cv
641.046 150.927 640.781 150.88 639.561 150.753 cv
631.375 150.365 623.808 152.033 618.063 154.553 cv
611.384 157.481 604.138 162.65 596.106 165.335 cv
595.648 165.494 595.184 165.637 594.712 165.768 cv
594.346 165.873 594 165.957 593.653 166.04 cv
593.43 166.091 593.212 166.154 592.986 166.2 cv
592.396 166.321 591.832 166.415 591.313 166.459 cv
591.309 166.459 591.306 166.458 591.302 166.456 cv
590.279 166.588 589.245 166.677 588.188 166.677 cv
574.726 166.677 563.813 155.764 563.813 142.302 cv
cp
.00784314 .129412 .905882 0 cmyk
f
591.916 125.897 mo
598.686 121.913 600.738 118.166 601.287 116.808 cv
602.939 111.831 608.354 108.06 614.998 107.505 cv
631.478 108.292 646.154 115.941 656.243 127.66 cv
657.315 129.813 657.937 132.231 657.937 134.802 cv
657.937 143.708 650.718 150.927 641.812 150.927 cv
641.046 150.927 640.781 150.88 639.561 150.753 cv
631.375 150.365 623.808 152.033 618.063 154.553 cv
611.384 157.481 604.138 162.65 596.106 165.335 cv
595.648 165.494 595.184 165.637 594.712 165.768 cv
594.346 165.873 594 165.957 593.653 166.04 cv
593.43 166.091 593.212 166.154 592.986 166.2 cv
592.824 166.233 592.682 166.242 592.523 166.271 cv
594.593 164.332 595.119 162.127 595.031 159.709 cv
594.274 152.243 589.967 147.054 587.927 144.98 cv
587.697 144.771 587.477 144.555 587.265 144.334 cv
587.01 144.1 586.852 143.966 586.852 143.966 cv
586.852 143.966 586.854 143.924 586.856 143.903 cv
585.06 141.872 584.001 139.405 584.001 136.74 cv
584.001 132.11 587.187 128.076 591.916 125.897 cv
cp
.0196078 .0666667 .905882 0 cmyk
f
643.65 130.355 mo
642.365 135.904 634.332 138.784 625.705 136.787 cv
617.08 134.791 611.128 128.673 612.414 123.125 cv
613.698 117.576 621.732 114.696 630.357 116.694 cv
638.982 118.69 644.934 124.808 643.65 130.355 cv
cp
.0156863 .0117647 .611765 0 cmyk
f
648.813 209.253 mo
648.813 226.926 634.486 241.252 616.812 241.252 cv
599.138 241.252 584.813 226.926 584.813 209.253 cv
584.813 191.578 599.138 177.252 616.812 177.252 cv
634.486 177.252 648.813 191.578 648.813 209.253 cv
cp
.0784314 .0823529 .168627 0 cmyk
f
619.938 208.752 mo
619.439 208.752 618.948 208.784 618.458 208.827 cv
618.458 208.824 li
618.158 208.85 617.855 208.871 617.547 208.871 cv
612.013 208.871 607.5 204.548 607.171 199.096 cv
607.175 198.896 607.188 198.702 607.188 198.502 cv
607.188 173.788 587.152 153.753 562.437 153.753 cv
537.722 153.753 517.688 173.788 517.688 198.502 cv
517.688 223.217 537.722 243.253 562.437 243.253 cv
562.695 243.253 562.947 243.239 563.203 243.234 cv
563.203 243.253 li
619.516 243.253 li
619.516 243.231 li
619.657 243.236 619.796 243.253 619.938 243.253 cv
629.465 243.253 637.189 235.531 637.189 226.002 cv
637.189 216.476 629.465 208.752 619.938 208.752 cv
cp
.0392157 .027451 .027451 0 cmyk
f
625.311 236.77 mo
625.311 240.35 622.41 243.253 618.83 243.253 cv
560.043 243.253 li
556.463 243.253 553.562 240.35 553.562 236.77 cv
553.562 236.77 li
553.562 233.191 556.463 230.29 560.043 230.29 cv
618.83 230.29 li
622.41 230.29 625.311 233.191 625.311 236.77 cv
625.311 236.77 li
cp
.0588235 .054902 .0588235 0 cmyk
f
525.501 183.258 mo
525.501 179.338 526.529 175.69 528.28 172.582 cv
528.582 171.942 528.921 171.198 529.271 170.417 cv
537.416 160.399 549.283 154.08 562.504 154.08 cv
575.982 154.08 588.05 160.646 596.203 171.006 cv
597.025 172.808 597.501 174.832 597.501 176.982 cv
597.501 184.434 591.979 190.474 585.167 190.474 cv
584.58 190.474 584.377 190.436 583.444 190.327 cv
577.182 190.003 571.393 191.398 566.999 193.507 cv
561.891 195.957 556.348 200.281 550.204 202.528 cv
549.853 202.661 549.497 202.78 549.138 202.89 cv
548.856 202.978 548.591 203.048 548.326 203.118 cv
548.155 203.161 547.989 203.213 547.816 203.251 cv
547.365 203.353 546.933 203.432 546.536 203.468 cv
546.533 203.468 546.532 203.467 546.527 203.465 cv
545.747 203.577 544.956 203.651 544.146 203.651 cv
533.849 203.651 525.501 194.521 525.501 183.258 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
546.998 169.532 mo
552.176 166.198 553.746 163.063 554.167 161.928 cv
555.429 157.762 559.572 154.608 564.653 154.144 cv
577.261 154.802 588.488 161.202 596.203 171.006 cv
597.025 172.808 597.501 174.832 597.501 176.982 cv
597.501 184.434 591.979 190.474 585.167 190.474 cv
584.58 190.474 584.377 190.436 583.444 190.327 cv
577.182 190.003 571.393 191.398 566.999 193.507 cv
561.891 195.957 556.348 200.281 550.204 202.528 cv
549.853 202.661 549.497 202.78 549.138 202.89 cv
548.856 202.978 548.591 203.048 548.326 203.118 cv
548.155 203.161 547.989 203.213 547.816 203.251 cv
547.692 203.279 547.583 203.287 547.463 203.312 cv
549.047 201.688 549.448 199.843 549.381 197.82 cv
548.801 191.575 545.506 187.233 543.946 185.498 cv
543.771 185.323 543.602 185.143 543.439 184.957 cv
543.245 184.762 543.125 184.649 543.125 184.649 cv
543.125 184.649 543.126 184.614 543.127 184.597 cv
541.755 182.896 540.943 180.833 540.943 178.604 cv
540.943 174.729 543.379 171.354 546.998 169.532 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
586.572 173.262 mo
585.589 177.905 579.442 180.313 572.845 178.642 cv
566.247 176.972 561.694 171.854 562.677 167.212 cv
563.66 162.57 569.805 160.16 576.403 161.832 cv
583 163.501 587.553 168.62 586.572 173.262 cv
cp
0 0 0 0 cmyk
f
999.25 184.437 mo
998.608 184.437 997.977 184.479 997.349 184.532 cv
997.349 184.531 li
996.964 184.566 996.574 184.589 996.178 184.589 cv
989.067 184.589 983.267 179.036 982.846 172.03 cv
982.851 171.775 982.867 171.523 982.867 171.268 cv
982.867 139.51 957.121 113.766 925.363 113.766 cv
893.605 113.766 867.859 139.51 867.859 171.268 cv
867.859 203.026 893.605 228.772 925.363 228.772 cv
925.693 228.772 926.018 228.753 926.347 228.749 cv
926.347 228.772 li
998.708 228.772 li
998.708 228.744 li
998.888 228.75 999.067 228.772 999.25 228.772 cv
1011.49 228.772 1021.42 218.848 1021.42 206.604 cv
1021.42 194.363 1011.49 184.437 999.25 184.437 cv
cp
.0392157 .027451 .027451 0 cmyk
f
1006.15 220.441 mo
1006.15 225.041 1002.43 228.772 997.826 228.772 cv
922.287 228.772 li
917.686 228.772 913.958 225.041 913.958 220.441 cv
913.958 220.441 li
913.958 215.842 917.686 212.114 922.287 212.114 cv
997.826 212.114 li
1002.43 212.114 1006.15 215.842 1006.15 220.441 cv
1006.15 220.441 li
cp
.0588235 .054902 .0588235 0 cmyk
f
877.899 151.679 mo
877.899 146.641 879.222 141.955 881.471 137.962 cv
881.857 137.137 882.295 136.181 882.745 135.179 cv
893.211 122.306 908.459 114.185 925.45 114.185 cv
942.768 114.185 958.275 122.624 968.751 135.936 cv
969.806 138.25 970.418 140.852 970.418 143.615 cv
970.418 153.19 963.322 160.95 954.569 160.95 cv
953.815 160.95 953.554 160.901 952.356 160.764 cv
944.309 160.346 936.871 162.138 931.224 164.849 cv
924.661 167.996 917.537 173.553 909.643 176.44 cv
909.191 176.612 908.734 176.764 908.272 176.906 cv
907.912 177.019 907.571 177.108 907.23 177.199 cv
907.01 177.253 906.797 177.321 906.576 177.371 cv
905.997 177.501 905.441 177.601 904.93 177.649 cv
904.926 177.649 904.923 177.647 904.919 177.645 cv
903.915 177.788 902.898 177.885 901.858 177.885 cv
888.626 177.885 877.899 166.151 877.899 151.679 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
905.524 134.042 mo
912.178 129.759 914.195 125.729 914.734 124.27 cv
916.357 118.917 921.681 114.864 928.21 114.267 cv
944.412 115.113 958.836 123.335 968.751 135.936 cv
969.806 138.25 970.418 140.852 970.418 143.615 cv
970.418 153.19 963.322 160.95 954.569 160.95 cv
953.815 160.95 953.554 160.901 952.356 160.764 cv
944.309 160.346 936.871 162.138 931.224 164.849 cv
924.661 167.996 917.537 173.553 909.643 176.44 cv
909.191 176.612 908.734 176.764 908.272 176.906 cv
907.912 177.019 907.571 177.108 907.23 177.199 cv
907.01 177.253 906.797 177.321 906.576 177.371 cv
906.415 177.407 906.276 177.415 906.121 177.447 cv
908.156 175.361 908.671 172.991 908.586 170.392 cv
907.84 162.366 903.607 156.788 901.602 154.556 cv
901.375 154.333 901.16 154.1 900.95 153.863 cv
900.701 153.612 900.545 153.467 900.545 153.467 cv
900.545 153.467 900.548 153.422 900.548 153.4 cv
898.786 151.214 897.744 148.563 897.744 145.698 cv
897.744 140.72 900.874 136.384 905.524 134.042 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
956.375 138.833 mo
955.111 144.8 947.214 147.895 938.736 145.748 cv
930.258 143.602 924.408 137.024 925.671 131.061 cv
926.933 125.095 934.831 121.998 943.308 124.147 cv
951.787 126.292 957.636 132.87 956.375 138.833 cv
cp
0 0 0 0 cmyk
f
583.425 668.944 mo
583.425 693.58 603.397 713.552 628.033 713.552 cv
652.669 713.552 672.642 693.58 672.642 668.944 cv
672.642 644.307 652.669 624.336 628.033 624.336 cv
603.397 624.336 583.425 644.307 583.425 668.944 cv
cp
0 .282353 .92549 0 cmyk
f
599.542 694.846 mo
599.542 702.475 607.015 708.66 616.234 708.66 cv
625.453 708.66 632.927 702.475 632.927 694.846 cv
632.927 687.215 625.453 681.032 616.234 681.032 cv
607.015 681.032 599.542 687.215 599.542 694.846 cv
cp
0 .231373 .917647 0 cmyk
f
590.908 651.102 mo
590.908 647.506 591.939 644.159 593.697 641.309 cv
593.999 640.721 594.34 640.039 594.691 639.322 cv
602.863 630.132 614.767 624.336 628.033 624.336 cv
641.554 624.336 653.664 630.36 661.844 639.863 cv
662.666 641.516 663.144 643.371 663.144 645.344 cv
663.144 652.18 657.603 657.719 650.769 657.719 cv
650.181 657.719 649.978 657.684 649.042 657.584 cv
642.759 657.287 636.951 658.567 632.542 660.501 cv
627.417 662.748 621.855 666.717 615.691 668.777 cv
615.339 668.898 614.984 669.009 614.621 669.108 cv
614.341 669.19 614.076 669.254 613.809 669.318 cv
613.638 669.357 613.47 669.407 613.296 669.441 cv
612.843 669.535 612.41 669.606 612.013 669.641 cv
612.01 669.639 612.007 669.639 612.004 669.637 cv
611.219 669.738 610.425 669.807 609.615 669.807 cv
599.284 669.807 590.908 661.433 590.908 651.102 cv
cp
.00784314 .129412 .905882 0 cmyk
f
612.474 638.511 mo
617.67 635.452 619.247 632.575 619.667 631.535 cv
620.935 627.715 625.091 624.82 630.189 624.396 cv
642.839 624.998 654.101 630.869 661.844 639.863 cv
662.666 641.516 663.144 643.371 663.144 645.344 cv
663.144 652.18 657.603 657.719 650.769 657.719 cv
650.181 657.719 649.978 657.684 649.042 657.584 cv
642.759 657.287 636.951 658.567 632.542 660.501 cv
627.417 662.748 621.855 666.717 615.691 668.777 cv
615.339 668.898 614.984 669.009 614.621 669.108 cv
614.341 669.19 614.076 669.254 613.809 669.318 cv
613.638 669.357 613.47 669.407 613.296 669.441 cv
613.171 669.467 613.064 669.473 612.942 669.496 cv
614.53 668.006 614.934 666.314 614.867 664.459 cv
614.285 658.73 610.979 654.747 609.414 653.154 cv
609.238 652.995 609.069 652.828 608.906 652.66 cv
608.711 652.48 608.589 652.379 608.589 652.379 cv
608.589 652.379 608.591 652.345 608.593 652.33 cv
607.214 650.77 606.4 648.877 606.4 646.831 cv
606.4 643.279 608.846 640.182 612.474 638.511 cv
cp
.0196078 .0666667 .905882 0 cmyk
f
652.179 641.932 mo
651.193 646.189 645.028 648.4 638.408 646.867 cv
631.789 645.334 627.22 640.639 628.207 636.383 cv
629.193 632.124 635.359 629.914 641.978 631.447 cv
648.597 632.979 653.166 637.673 652.179 641.932 cv
cp
.0156863 .0117647 .611765 0 cmyk
f
670.458 705.178 mo
670.458 724.465 654.824 740.1 635.536 740.1 cv
616.248 740.1 600.613 724.465 600.613 705.178 cv
600.613 685.889 616.248 670.254 635.536 670.254 cv
654.824 670.254 670.458 685.889 670.458 705.178 cv
cp
.0784314 .0823529 .168627 0 cmyk
f
638.947 704.629 mo
638.402 704.629 637.867 704.666 637.333 704.711 cv
637.333 704.709 li
637.005 704.738 636.673 704.758 636.338 704.758 cv
630.298 704.758 625.373 700.041 625.015 694.092 cv
625.018 693.875 625.031 693.662 625.031 693.445 cv
625.031 666.473 603.166 644.607 576.195 644.607 cv
549.223 644.607 527.357 666.473 527.357 693.445 cv
527.357 720.418 549.223 742.283 576.195 742.283 cv
576.475 742.283 576.75 742.266 577.03 742.262 cv
577.03 742.283 li
638.486 742.283 li
638.486 742.26 li
638.64 742.263 638.791 742.283 638.947 742.283 cv
649.345 742.283 657.773 733.854 657.773 723.457 cv
657.773 713.06 649.345 704.629 638.947 704.629 cv
cp
.0392157 .027451 .027451 0 cmyk
f
644.811 735.208 mo
644.811 739.115 641.644 742.283 637.738 742.283 cv
573.582 742.283 li
569.675 742.283 566.508 739.115 566.508 735.208 cv
566.508 735.208 li
566.508 731.301 569.675 728.136 573.582 728.136 cv
637.738 728.136 li
641.644 728.136 644.811 731.301 644.811 735.208 cv
644.811 735.208 li
cp
.0588235 .054902 .0588235 0 cmyk
f
535.884 676.808 mo
535.884 672.529 537.007 668.551 538.917 665.156 cv
539.246 664.457 539.616 663.645 539.999 662.793 cv
548.887 651.859 561.838 644.963 576.268 644.963 cv
590.977 644.963 604.146 652.131 613.044 663.437 cv
613.941 665.402 614.459 667.611 614.459 669.959 cv
614.459 678.091 608.433 684.683 601 684.683 cv
600.359 684.683 600.138 684.641 599.12 684.523 cv
592.285 684.168 585.968 685.69 581.172 687.993 cv
575.597 690.665 569.547 695.387 562.843 697.838 cv
562.46 697.982 562.072 698.112 561.68 698.232 cv
561.374 698.329 561.083 698.405 560.795 698.481 cv
560.607 698.528 560.427 698.586 560.238 698.628 cv
559.746 698.738 559.274 698.822 558.841 698.863 cv
558.838 698.863 558.835 698.862 558.831 698.861 cv
557.978 698.982 557.115 699.063 556.232 699.063 cv
544.995 699.063 535.884 689.1 535.884 676.808 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
559.345 661.828 mo
564.995 658.189 566.708 654.768 567.167 653.529 cv
568.545 648.982 573.067 645.541 578.613 645.033 cv
592.373 645.753 604.623 652.736 613.044 663.437 cv
613.941 665.402 614.459 667.611 614.459 669.959 cv
614.459 678.091 608.433 684.683 601 684.683 cv
600.359 684.683 600.138 684.641 599.12 684.523 cv
592.285 684.168 585.968 685.69 581.172 687.993 cv
575.597 690.665 569.547 695.387 562.843 697.838 cv
562.46 697.982 562.072 698.112 561.68 698.232 cv
561.374 698.329 561.083 698.405 560.795 698.481 cv
560.607 698.528 560.427 698.586 560.238 698.628 cv
560.102 698.657 559.983 698.666 559.853 698.692 cv
561.58 696.922 562.018 694.907 561.946 692.699 cv
561.312 685.884 557.717 681.146 556.014 679.251 cv
555.822 679.063 555.639 678.864 555.46 678.662 cv
555.249 678.449 555.117 678.326 555.117 678.326 cv
555.117 678.326 555.119 678.289 555.12 678.268 cv
553.622 676.414 552.737 674.162 552.737 671.728 cv
552.737 667.5 555.396 663.817 559.345 661.828 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
602.533 665.897 mo
601.46 670.966 594.753 673.594 587.553 671.77 cv
580.352 669.947 575.383 664.362 576.456 659.297 cv
577.528 654.23 584.235 651.601 591.437 653.424 cv
598.636 655.246 603.605 660.834 602.533 665.897 cv
cp
0 0 0 0 cmyk
f
552.152 765.193 mo
555.145 771.17 562.415 773.587 568.39 770.594 cv
574.365 767.6 576.784 760.332 573.79 754.356 cv
568.081 742.954 569.698 742.872 557.553 748.955 cv
551.578 751.949 549.16 759.219 552.152 765.193 cv
cp
.694118 .0941176 0 0 cmyk
f
566.309 752.851 mo
566.203 750.783 564.094 749.211 561.596 749.336 cv
559.099 749.463 557.159 751.24 557.263 753.308 cv
557.369 755.375 559.477 756.947 561.976 756.822 cv
564.472 756.694 566.413 754.918 566.309 752.851 cv
cp
.541176 0 .0823529 0 cmyk
f
573.23 763.188 mo
573.28 764.162 573.045 765.084 572.607 765.879 cv
572.534 766.043 572.451 766.233 572.366 766.433 cv
570.278 769.034 567.132 770.768 563.539 770.949 cv
559.874 771.135 556.512 769.668 554.165 767.206 cv
553.919 766.768 553.767 766.273 553.739 765.738 cv
553.645 763.887 555.069 762.309 556.922 762.217 cv
557.08 762.208 557.136 762.215 557.391 762.23 cv
559.099 762.223 560.654 761.797 561.822 761.213 cv
563.178 760.533 564.631 759.383 566.273 758.74 cv
566.366 758.703 566.461 758.668 566.558 758.634 cv
566.634 758.609 566.704 758.588 566.776 758.568 cv
566.821 758.555 566.867 758.539 566.912 758.527 cv
567.034 758.496 567.149 758.47 567.256 758.455 cv
567.258 758.457 567.259 758.457 567.259 758.457 cv
567.472 758.418 567.686 758.388 567.905 758.377 cv
570.705 758.236 573.088 760.391 573.23 763.188 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
567.524 766.891 mo
566.162 767.789 565.775 768.588 565.676 768.875 cv
565.386 769.924 564.302 770.763 562.931 770.947 cv
559.504 770.957 556.38 769.525 554.165 767.2 cv
553.919 766.766 553.765 766.27 553.739 765.736 cv
553.645 763.89 555.066 762.316 556.915 762.225 cv
557.073 762.217 557.127 762.221 557.382 762.236 cv
559.083 762.231 560.635 761.807 561.801 761.224 cv
563.155 760.544 564.605 759.396 566.24 758.756 cv
566.335 758.719 566.43 758.684 566.525 758.651 cv
566.602 758.627 566.672 758.605 566.742 758.584 cv
566.789 758.57 566.832 758.557 566.878 758.545 cv
566.912 758.534 566.941 758.531 566.974 758.525 cv
566.566 758.949 566.48 759.412 566.522 759.912 cv
566.758 761.452 567.706 762.482 568.15 762.893 cv
568.201 762.934 568.248 762.976 568.295 763.018 cv
568.349 763.063 568.384 763.092 568.384 763.092 cv
568.384 763.092 568.384 763.1 568.384 763.104 cv
568.778 763.508 569.023 764.007 569.052 764.559 cv
569.101 765.519 568.481 766.389 567.524 766.891 cv
cp
.635294 0 .152941 0 cmyk
f
556.749 766.509 mo
556.957 765.346 558.592 764.664 560.402 764.988 cv
562.211 765.311 563.509 766.518 563.301 767.682 cv
563.093 768.846 561.458 769.526 559.648 769.203 cv
557.837 768.879 556.54 767.674 556.749 766.509 cv
cp
.541176 0 .0823529 0 cmyk
f
619.773 770.342 mo
622.914 776.613 630.542 779.15 636.813 776.01 cv
643.083 772.867 645.62 765.24 642.48 758.971 cv
636.488 747.006 638.185 746.92 625.441 753.303 cv
619.17 756.443 616.633 764.072 619.773 770.342 cv
cp
.694118 .0941176 0 0 cmyk
f
634.824 757.321 mo
634.714 755.152 632.5 753.501 629.88 753.633 cv
627.259 753.766 625.223 755.633 625.333 757.802 cv
625.443 759.97 627.656 761.621 630.277 761.487 cv
632.898 761.355 634.933 759.489 634.824 757.321 cv
cp
.541176 0 .0823529 0 cmyk
f
641.89 768.238 mo
641.941 769.262 641.697 770.229 641.238 771.063 cv
641.161 771.234 641.074 771.434 640.984 771.642 cv
638.793 774.372 635.492 776.189 631.721 776.382 cv
627.876 776.576 624.347 775.039 621.884 772.453 cv
621.628 771.996 621.466 771.475 621.437 770.914 cv
621.338 768.971 622.833 767.316 624.778 767.218 cv
624.945 767.209 625.001 767.217 625.27 767.23 cv
627.062 767.225 628.693 766.778 629.919 766.166 cv
631.343 765.453 632.869 764.244 634.591 763.568 cv
634.689 763.531 634.789 763.494 634.89 763.461 cv
634.968 763.433 635.043 763.41 635.119 763.389 cv
635.167 763.375 635.212 763.359 635.261 763.348 cv
635.389 763.313 635.511 763.287 635.624 763.273 cv
635.625 763.273 635.626 763.273 635.626 763.273 cv
635.847 763.232 636.074 763.201 636.303 763.189 cv
639.24 763.041 641.742 765.302 641.89 768.238 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
635.904 772.123 mo
634.474 773.065 634.068 773.904 633.964 774.205 cv
633.66 775.307 632.523 776.188 631.083 776.382 cv
627.488 776.391 624.209 774.888 621.883 772.449 cv
621.626 771.992 621.466 771.472 621.438 770.914 cv
621.338 768.975 622.832 767.323 624.769 767.227 cv
624.935 767.218 624.994 767.225 625.261 767.24 cv
627.046 767.234 628.674 766.787 629.899 766.175 cv
631.318 765.466 632.839 764.26 634.557 763.588 cv
634.656 763.549 634.755 763.512 634.856 763.479 cv
634.935 763.451 635.009 763.43 635.083 763.408 cv
635.131 763.395 635.177 763.379 635.226 763.363 cv
635.261 763.356 635.292 763.352 635.326 763.345 cv
634.897 763.79 634.808 764.275 634.853 764.799 cv
635.101 766.416 636.093 767.498 636.561 767.928 cv
636.614 767.969 636.664 768.015 636.713 768.061 cv
636.769 768.108 636.806 768.137 636.806 768.137 cv
636.806 768.137 636.806 768.146 636.806 768.149 cv
637.218 768.572 637.476 769.098 637.505 769.678 cv
637.557 770.686 636.908 771.598 635.904 772.123 cv
cp
.635294 0 .152941 0 cmyk
f
624.596 771.724 mo
624.814 770.502 626.531 769.787 628.429 770.127 cv
630.328 770.465 631.692 771.732 631.474 772.954 cv
631.253 774.174 629.537 774.889 627.638 774.551 cv
625.739 774.211 624.378 772.943 624.596 771.724 cv
cp
.541176 0 .0823529 0 cmyk
f
584.08 785.974 mo
586.601 791.006 592.721 793.04 597.751 790.521 cv
602.782 788.001 604.816 781.881 602.296 776.851 cv
597.491 767.253 598.852 767.183 588.628 772.304 cv
583.598 774.823 581.562 780.945 584.08 785.974 cv
cp
.694118 .0941176 0 0 cmyk
f
595.368 775.803 mo
595.28 774.063 593.503 772.738 591.401 772.844 cv
589.299 772.953 587.666 774.448 587.754 776.188 cv
587.842 777.929 589.617 779.253 591.721 779.147 cv
593.823 779.041 595.456 777.543 595.368 775.803 cv
cp
.541176 0 .0823529 0 cmyk
f
601.826 784.286 mo
601.867 785.106 601.668 785.883 601.3 786.553 cv
601.24 786.688 601.169 786.852 601.097 787.017 cv
599.339 789.207 596.691 790.667 593.666 790.819 cv
590.581 790.977 587.751 789.741 585.776 787.667 cv
585.57 787.299 585.438 786.883 585.416 786.432 cv
585.338 784.873 586.538 783.548 588.095 783.467 cv
588.23 783.461 588.277 783.466 588.491 783.479 cv
589.928 783.475 591.237 783.115 592.22 782.623 cv
593.363 782.051 594.586 781.082 595.969 780.541 cv
596.046 780.51 596.127 780.48 596.208 780.453 cv
596.272 780.431 596.331 780.413 596.391 780.396 cv
596.429 780.384 596.468 780.372 596.506 780.361 cv
596.609 780.336 596.707 780.313 596.796 780.302 cv
596.799 780.303 596.799 780.303 596.799 780.303 cv
596.978 780.27 597.157 780.244 597.341 780.236 cv
599.699 780.117 601.705 781.931 601.826 784.286 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
597.021 787.404 mo
595.874 788.16 595.55 788.832 595.466 789.073 cv
595.222 789.957 594.308 790.664 593.155 790.818 cv
590.271 790.826 587.64 789.621 585.775 787.664 cv
585.568 787.297 585.438 786.882 585.416 786.432 cv
585.338 784.878 586.534 783.553 588.089 783.475 cv
588.221 783.467 588.27 783.473 588.483 783.484 cv
589.916 783.48 591.223 783.123 592.203 782.633 cv
593.344 782.061 594.563 781.096 595.942 780.555 cv
596.02 780.523 596.101 780.495 596.18 780.467 cv
596.244 780.447 596.303 780.428 596.363 780.412 cv
596.401 780.4 596.439 780.387 596.479 780.377 cv
596.506 780.371 596.531 780.366 596.559 780.36 cv
596.215 780.718 596.142 781.107 596.178 781.529 cv
596.377 782.826 597.174 783.693 597.549 784.037 cv
597.592 784.072 597.631 784.107 597.671 784.143 cv
597.716 784.182 597.746 784.204 597.746 784.204 cv
597.746 784.204 597.746 784.213 597.746 784.215 cv
598.077 784.553 598.283 784.977 598.308 785.441 cv
598.348 786.25 597.828 786.981 597.021 787.404 cv
cp
.635294 0 .152941 0 cmyk
f
587.95 787.082 mo
588.126 786.103 589.501 785.528 591.025 785.799 cv
592.55 786.072 593.643 787.088 593.467 788.07 cv
593.292 789.05 591.914 789.623 590.391 789.35 cv
588.867 789.078 587.774 788.063 587.95 787.082 cv
cp
.541176 0 .0823529 0 cmyk
f
189.016 762.111 mo
192.773 769.611 201.898 772.646 209.398 768.889 cv
216.897 765.133 219.932 756.008 216.176 748.508 cv
209.009 734.199 211.04 734.095 195.794 741.729 cv
188.294 745.486 185.26 754.611 189.016 762.111 cv
cp
.694118 .0941176 0 0 cmyk
f
206.784 746.617 mo
206.652 744.023 204.005 742.049 200.871 742.209 cv
197.736 742.367 195.3 744.598 195.431 747.191 cv
195.563 749.786 198.21 751.761 201.345 751.603 cv
204.48 751.444 206.915 749.212 206.784 746.617 cv
cp
.541176 0 .0823529 0 cmyk
f
215.471 759.595 mo
215.534 760.818 215.241 761.974 214.691 762.973 cv
214.599 763.178 214.495 763.416 214.387 763.666 cv
211.767 766.931 207.818 769.107 203.307 769.334 cv
198.709 769.567 194.488 767.728 191.543 764.637 cv
191.235 764.089 191.042 763.467 191.007 762.794 cv
190.89 760.471 192.678 758.492 195.002 758.375 cv
195.202 758.364 195.272 758.371 195.592 758.391 cv
197.734 758.383 199.687 757.848 201.152 757.115 cv
202.857 756.262 204.679 754.816 206.74 754.011 cv
206.857 753.964 206.977 753.92 207.098 753.879 cv
207.192 753.847 207.281 753.82 207.371 753.794 cv
207.428 753.777 207.484 753.759 207.542 753.742 cv
207.695 753.705 207.841 753.672 207.976 753.653 cv
207.977 753.654 207.978 753.654 207.979 753.654 cv
208.245 753.606 208.512 753.57 208.789 753.557 cv
212.302 753.378 215.293 756.082 215.471 759.595 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
208.31 764.242 mo
206.6 765.369 206.115 766.371 205.99 766.731 cv
205.626 768.049 204.266 769.102 202.544 769.333 cv
198.244 769.346 194.323 767.547 191.542 764.631 cv
191.235 764.083 191.041 763.462 191.007 762.794 cv
190.89 760.475 192.674 758.5 194.992 758.383 cv
195.191 758.375 195.261 758.382 195.581 758.399 cv
197.716 758.393 199.664 757.859 201.126 757.128 cv
202.826 756.277 204.645 754.836 206.699 754.031 cv
206.817 753.984 206.936 753.941 207.057 753.9 cv
207.152 753.869 207.24 753.842 207.329 753.816 cv
207.387 753.799 207.442 753.781 207.5 753.766 cv
207.542 753.754 207.58 753.75 207.62 753.741 cv
207.107 754.273 207 754.854 207.053 755.481 cv
207.349 757.415 208.539 758.709 209.097 759.223 cv
209.16 759.273 209.22 759.326 209.278 759.381 cv
209.347 759.439 209.39 759.472 209.39 759.472 cv
209.39 759.472 209.39 759.483 209.39 759.488 cv
209.884 759.993 210.193 760.621 210.228 761.316 cv
210.289 762.52 209.512 763.613 208.31 764.242 cv
cp
.635294 0 .152941 0 cmyk
f
194.786 763.762 mo
195.046 762.302 197.1 761.446 199.371 761.852 cv
201.642 762.258 203.272 763.772 203.01 765.234 cv
202.75 766.695 200.696 767.551 198.424 767.145 cv
196.153 766.737 194.523 765.225 194.786 763.762 cv
cp
.541176 0 .0823529 0 cmyk
f
273.891 768.574 mo
277.833 776.443 287.409 779.628 295.279 775.688 cv
303.149 771.746 306.334 762.168 302.392 754.299 cv
294.871 739.283 297.001 739.174 281.004 747.186 cv
273.134 751.128 269.95 760.703 273.891 768.574 cv
cp
.694118 .0941176 0 0 cmyk
f
292.783 752.229 mo
292.645 749.508 289.866 747.436 286.577 747.602 cv
283.288 747.77 280.732 750.109 280.87 752.833 cv
281.008 755.555 283.786 757.627 287.076 757.461 cv
290.365 757.293 292.92 754.953 292.783 752.229 cv
cp
.541176 0 .0823529 0 cmyk
f
301.652 765.934 mo
301.717 767.217 301.41 768.43 300.833 769.479 cv
300.737 769.693 300.627 769.942 300.515 770.205 cv
297.765 773.631 293.621 775.914 288.888 776.153 cv
284.063 776.398 279.633 774.467 276.543 771.225 cv
276.22 770.648 276.016 769.995 275.979 769.291 cv
275.857 766.852 277.734 764.774 280.172 764.651 cv
280.383 764.641 280.456 764.65 280.792 764.669 cv
283.039 764.662 285.088 764.1 286.626 763.33 cv
288.415 762.436 290.328 760.919 292.49 760.072 cv
292.613 760.023 292.738 759.979 292.866 759.936 cv
292.964 759.9 293.058 759.873 293.152 759.847 cv
293.212 759.829 293.271 759.809 293.332 759.793 cv
293.492 759.752 293.645 759.718 293.787 759.699 cv
293.788 759.699 293.789 759.699 293.79 759.7 cv
294.068 759.648 294.35 759.611 294.639 759.596 cv
298.327 759.41 301.466 762.246 301.652 765.934 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
294.137 770.81 mo
292.343 771.992 291.834 773.043 291.703 773.423 cv
291.321 774.805 289.894 775.91 288.086 776.153 cv
283.574 776.165 279.46 774.278 276.542 771.217 cv
276.219 770.645 276.015 769.992 275.98 769.289 cv
275.857 766.857 277.729 764.785 280.163 764.663 cv
280.371 764.651 280.444 764.66 280.78 764.68 cv
283.021 764.672 285.064 764.112 286.6 763.344 cv
288.383 762.451 290.291 760.939 292.447 760.096 cv
292.57 760.046 292.696 760 292.822 759.958 cv
292.922 759.924 293.015 759.896 293.108 759.869 cv
293.168 759.852 293.227 759.832 293.288 759.816 cv
293.332 759.805 293.371 759.8 293.414 759.789 cv
292.875 760.35 292.762 760.959 292.819 761.616 cv
293.129 763.646 294.378 765.003 294.963 765.542 cv
295.03 765.596 295.092 765.652 295.153 765.709 cv
295.225 765.771 295.271 765.805 295.271 765.805 cv
295.271 765.805 295.271 765.816 295.271 765.822 cv
295.79 766.352 296.112 767.012 296.15 767.739 cv
296.213 769.004 295.399 770.148 294.137 770.81 cv
cp
.635294 0 .152941 0 cmyk
f
279.945 770.307 mo
280.219 768.773 282.374 767.875 284.757 768.303 cv
287.14 768.729 288.851 770.317 288.577 771.852 cv
288.302 773.383 286.148 774.281 283.764 773.855 cv
281.38 773.429 279.67 771.84 279.945 770.307 cv
cp
.541176 0 .0823529 0 cmyk
f
229.091 788.194 mo
232.254 794.508 239.937 797.063 246.25 793.9 cv
252.564 790.738 255.119 783.056 251.956 776.742 cv
245.923 764.695 247.632 764.607 234.798 771.037 cv
228.485 774.197 225.929 781.881 229.091 788.194 cv
cp
.694118 .0941176 0 0 cmyk
f
243.258 775.43 mo
243.148 773.244 240.919 771.583 238.28 771.715 cv
235.641 771.85 233.591 773.728 233.702 775.912 cv
233.813 778.096 236.041 779.758 238.68 779.625 cv
241.32 779.492 243.369 777.612 243.258 775.43 cv
cp
.541176 0 .0823529 0 cmyk
f
251.363 786.076 mo
251.415 787.105 251.168 788.078 250.707 788.92 cv
250.629 789.092 250.541 789.293 250.45 789.502 cv
248.245 792.252 244.92 794.084 241.122 794.275 cv
237.251 794.473 233.698 792.922 231.219 790.32 cv
230.959 789.858 230.795 789.336 230.767 788.769 cv
230.669 786.813 232.175 785.147 234.13 785.048 cv
234.299 785.039 234.358 785.047 234.627 785.063 cv
236.43 785.055 238.074 784.605 239.309 783.987 cv
240.743 783.27 242.278 782.054 244.012 781.374 cv
244.111 781.336 244.211 781.298 244.313 781.264 cv
244.394 781.236 244.468 781.215 244.543 781.192 cv
244.591 781.178 244.639 781.162 244.688 781.15 cv
244.816 781.116 244.939 781.09 245.052 781.074 cv
245.054 781.075 245.054 781.075 245.055 781.075 cv
245.279 781.034 245.505 781.004 245.737 780.992 cv
248.695 780.842 251.213 783.119 251.363 786.076 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
245.333 789.988 mo
243.894 790.937 243.486 791.78 243.381 792.084 cv
243.075 793.193 241.929 794.078 240.48 794.273 cv
236.86 794.285 233.559 792.771 231.217 790.315 cv
230.959 789.854 230.795 789.332 230.767 788.769 cv
230.669 786.817 232.17 785.154 234.123 785.057 cv
234.29 785.048 234.349 785.055 234.618 785.07 cv
236.416 785.064 238.055 784.614 239.287 783.999 cv
240.718 783.283 242.249 782.07 243.979 781.393 cv
244.078 781.352 244.178 781.316 244.279 781.281 cv
244.359 781.256 244.433 781.232 244.508 781.211 cv
244.556 781.197 244.603 781.181 244.653 781.169 cv
244.688 781.158 244.72 781.156 244.753 781.146 cv
244.321 781.596 244.23 782.084 244.277 782.613 cv
244.526 784.24 245.527 785.33 245.997 785.763 cv
246.05 785.805 246.1 785.851 246.149 785.896 cv
246.208 785.944 246.244 785.973 246.244 785.973 cv
246.244 785.973 246.243 785.982 246.243 785.985 cv
246.66 786.412 246.918 786.94 246.949 787.525 cv
247 788.539 246.346 789.459 245.333 789.988 cv
cp
.635294 0 .152941 0 cmyk
f
233.948 789.584 mo
234.168 788.355 235.896 787.635 237.809 787.977 cv
239.72 788.317 241.093 789.594 240.873 790.824 cv
240.653 792.055 238.925 792.773 237.012 792.431 cv
235.1 792.09 233.728 790.813 233.948 789.584 cv
cp
.541176 0 .0823529 0 cmyk
f
333.83 693.822 mo
333.83 713.109 318.194 728.745 298.907 728.745 cv
279.619 728.745 263.983 713.109 263.983 693.822 cv
263.983 674.534 279.619 658.898 298.907 658.898 cv
318.194 658.898 333.83 674.534 333.83 693.822 cv
cp
.0784314 .0823529 .168627 0 cmyk
f
308.283 691.351 mo
307.641 691.351 307.009 691.393 306.381 691.445 cv
306.381 691.444 li
305.997 691.479 305.606 691.503 305.21 691.503 cv
298.099 691.503 292.3 685.949 291.879 678.943 cv
291.883 678.688 291.899 678.437 291.899 678.182 cv
291.899 646.424 266.153 620.68 234.396 620.68 cv
202.637 620.68 176.892 646.424 176.892 678.182 cv
176.892 709.939 202.637 735.686 234.396 735.686 cv
234.726 735.686 235.05 735.666 235.379 735.662 cv
235.379 735.686 li
307.74 735.686 li
307.74 735.658 li
307.921 735.664 308.099 735.686 308.283 735.686 cv
320.524 735.686 330.45 725.762 330.45 713.518 cv
330.45 701.276 320.524 691.351 308.283 691.351 cv
cp
.0392157 .027451 .027451 0 cmyk
f
315.188 727.355 mo
315.188 731.955 311.458 735.686 306.858 735.686 cv
231.319 735.686 li
226.718 735.686 222.99 731.955 222.99 727.355 cv
222.99 727.355 li
222.99 722.756 226.718 719.027 231.319 719.027 cv
306.858 719.027 li
311.458 719.027 315.188 722.756 315.188 727.355 cv
315.188 727.355 li
cp
.0588235 .054902 .0588235 0 cmyk
f
186.932 658.592 mo
186.932 653.555 188.254 648.869 190.503 644.875 cv
190.89 644.051 191.328 643.094 191.777 642.092 cv
202.244 629.219 217.492 621.098 234.482 621.098 cv
251.801 621.098 267.307 629.537 277.784 642.85 cv
278.839 645.164 279.451 647.766 279.451 650.528 cv
279.451 660.104 272.355 667.863 263.602 667.863 cv
262.847 667.863 262.586 667.814 261.388 667.678 cv
253.342 667.26 245.903 669.051 240.256 671.763 cv
233.693 674.909 226.57 680.467 218.675 683.354 cv
218.224 683.525 217.767 683.678 217.304 683.82 cv
216.944 683.933 216.604 684.021 216.263 684.113 cv
216.042 684.167 215.83 684.234 215.608 684.284 cv
215.029 684.414 214.473 684.514 213.962 684.563 cv
213.958 684.563 213.956 684.561 213.952 684.559 cv
212.947 684.701 211.93 684.799 210.891 684.799 cv
197.66 684.799 186.932 673.064 186.932 658.592 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
214.556 640.955 mo
221.21 636.672 223.228 632.643 223.767 631.184 cv
225.389 625.831 230.713 621.777 237.243 621.18 cv
253.444 622.027 267.869 630.249 277.784 642.85 cv
278.839 645.164 279.451 647.766 279.451 650.528 cv
279.451 660.104 272.355 667.863 263.602 667.863 cv
262.847 667.863 262.586 667.814 261.388 667.678 cv
253.342 667.26 245.903 669.051 240.256 671.763 cv
233.693 674.909 226.57 680.467 218.675 683.354 cv
218.224 683.525 217.767 683.678 217.304 683.82 cv
216.944 683.933 216.604 684.021 216.263 684.113 cv
216.042 684.167 215.83 684.234 215.608 684.284 cv
215.447 684.32 215.309 684.328 215.153 684.36 cv
217.188 682.274 217.704 679.904 217.619 677.306 cv
216.873 669.279 212.639 663.701 210.634 661.469 cv
210.408 661.246 210.192 661.014 209.982 660.776 cv
209.733 660.525 209.578 660.381 209.578 660.381 cv
209.578 660.381 209.581 660.336 209.581 660.313 cv
207.818 658.128 206.776 655.477 206.776 652.611 cv
206.776 647.634 209.906 643.298 214.556 640.955 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
265.407 645.747 mo
264.144 651.713 256.248 654.809 247.769 652.661 cv
239.291 650.516 233.44 643.938 234.704 637.975 cv
235.966 632.008 243.863 628.912 252.34 631.061 cv
260.819 633.205 266.669 639.783 265.407 645.747 cv
cp
0 0 0 0 cmyk
f
960.801 744.529 mo
960.801 740.143 957.353 736.57 953.02 736.354 cv
953.02 736.342 li
952.798 736.342 li
952.734 736.34 952.669 736.333 952.605 736.333 cv
952.54 736.333 952.476 736.34 952.412 736.342 cv
941.805 736.342 930.777 736.342 920.164 736.34 cv
920.164 736.342 li
919.453 736.338 918.74 736.333 917.998 736.333 cv
913.47 736.333 909.801 740.002 909.801 744.529 cv
909.801 749.055 913.47 752.725 917.998 752.725 cv
953.02 752.725 li
953.02 752.704 li
957.353 752.487 960.801 748.914 960.801 744.529 cv
cp
0 .282353 .92549 0 cmyk
f
956.238 737.178 mo
952.304 735.237 947.576 736.75 945.462 740.54 cv
945.454 740.535 li
945.356 740.733 li
945.326 740.791 945.291 740.844 945.261 740.902 cv
945.232 740.962 945.211 741.021 945.185 741.08 cv
940.492 750.592 935.612 760.482 930.917 770 cv
930.917 770 li
930.597 770.635 930.279 771.273 929.951 771.939 cv
927.948 775.998 929.615 780.912 933.673 782.915 cv
937.734 784.918 942.648 783.25 944.652 779.191 cv
960.146 747.783 li
960.127 747.773 li
961.849 743.792 960.172 739.119 956.238 737.178 cv
cp
0 .231373 .917647 0 cmyk
f
936.937 706.141 mo
933.003 704.2 928.275 705.712 926.162 709.502 cv
926.153 709.497 li
926.054 709.696 li
926.025 709.754 925.99 709.807 925.96 709.865 cv
925.931 709.924 925.91 709.983 925.883 710.042 cv
921.191 719.553 916.311 729.443 911.615 738.963 cv
911.617 738.963 li
911.296 739.598 910.977 740.235 910.649 740.9 cv
908.646 744.959 910.314 749.875 914.373 751.878 cv
918.433 753.881 923.347 752.213 925.35 748.152 cv
940.845 716.745 li
940.826 716.736 li
942.548 712.755 940.871 708.08 936.937 706.141 cv
cp
f
948.233 790.998 mo
948.304 790.951 li
948.304 790.941 li
949.474 790.021 950.412 788.777 950.951 787.274 cv
952.401 783.223 950.463 778.787 946.607 777.049 cv
946.603 777.041 li
946.509 777.009 li
946.339 776.934 946.171 776.857 945.996 776.795 cv
945.82 776.732 945.641 776.684 945.463 776.634 cv
931.076 771.482 li
930.906 771.408 930.738 771.332 930.562 771.27 cv
926.3 769.743 921.608 771.963 920.083 776.224 cv
919.36 778.242 919.486 780.354 920.261 782.183 cv
923.234 793.369 li
923.552 796.404 925.551 799.14 928.616 800.236 cv
931.346 801.215 934.25 800.648 936.387 799 cv
947.354 791.592 li
947.66 791.414 947.953 791.215 948.233 790.998 cv
cp
0 .282353 .92549 0 cmyk
f
938.041 796.678 mo
936.665 797.301 935.253 797.599 933.943 797.607 cv
933.679 797.628 933.375 797.652 933.057 797.68 cv
928.511 797.018 924.795 794.732 923.125 791.061 cv
921.423 787.318 922.205 782.92 924.812 779.002 cv
925.339 778.486 925.991 778.033 926.746 777.688 cv
929.361 776.499 932.177 777.067 933.039 778.96 cv
933.113 779.123 933.125 779.184 933.204 779.461 cv
933.882 781.251 935.103 782.635 936.397 783.519 cv
937.903 784.545 940.119 785.394 941.685 786.741 cv
941.776 786.817 941.863 786.896 941.947 786.98 cv
942.013 787.043 942.07 787.105 942.128 787.169 cv
942.165 787.209 942.205 787.246 942.24 787.287 cv
942.333 787.397 942.416 787.504 942.478 787.609 cv
942.478 787.609 942.478 787.609 942.478 787.611 cv
942.615 787.811 942.742 788.019 942.843 788.244 cv
944.144 791.102 941.994 794.879 938.041 796.678 cv
cp
.00784314 .129412 .905882 0 cmyk
f
930.508 792.899 mo
928.684 791.994 927.384 792.059 926.934 792.123 cv
925.312 792.438 923.682 791.791 922.878 790.453 cv
921.515 786.85 922.344 782.71 924.812 779.002 cv
925.339 778.486 925.991 778.033 926.746 777.688 cv
929.361 776.499 932.177 777.067 933.039 778.96 cv
933.113 779.123 933.125 779.184 933.204 779.461 cv
933.882 781.251 935.103 782.635 936.397 783.519 cv
937.903 784.545 940.119 785.394 941.685 786.741 cv
941.776 786.817 941.863 786.896 941.947 786.98 cv
942.013 787.043 942.07 787.105 942.128 787.169 cv
942.165 787.209 942.205 787.246 942.24 787.287 cv
942.266 787.318 942.282 787.348 942.305 787.377 cv
941.536 787.197 940.838 787.38 940.135 787.721 cv
938.017 788.88 936.909 790.486 936.498 791.197 cv
936.458 791.273 936.415 791.35 936.371 791.424 cv
936.328 791.51 936.303 791.561 936.303 791.561 cv
936.303 791.561 936.291 791.566 936.285 791.568 cv
935.861 792.221 935.24 792.775 934.457 793.131 cv
933.097 793.75 931.604 793.613 930.508 792.899 cv
cp
.0196078 .0666667 .905882 0 cmyk
f
926.819 781.316 mo
928.573 780.848 930.195 782.17 930.443 784.269 cv
930.689 786.366 929.466 788.447 927.714 788.916 cv
925.96 789.385 924.338 788.063 924.091 785.965 cv
923.845 783.867 925.066 781.784 926.819 781.316 cv
cp
.0156863 .0117647 .611765 0 cmyk
f
940.329 779.666 mo
939.138 781.229 939.703 783.662 941.592 785.102 cv
943.481 786.542 945.978 786.442 947.169 784.879 cv
948.361 783.314 947.794 780.882 945.906 779.441 cv
944.018 778.002 941.521 778.102 940.329 779.666 cv
cp
0 .231373 .917647 0 cmyk
f
910.29 744.666 mo
910.29 748.467 913.684 751.547 917.871 751.547 cv
922.058 751.547 925.452 748.467 925.452 744.666 cv
925.452 740.867 922.058 737.786 917.871 737.786 cv
913.684 737.786 910.29 740.867 910.29 744.666 cv
cp
.00784314 .129412 .905882 0 cmyk
f
944.897 744.325 mo
944.897 748.125 948.291 751.205 952.478 751.205 cv
956.665 751.205 960.059 748.125 960.059 744.325 cv
960.059 740.525 956.665 737.445 952.478 737.445 cv
948.291 737.445 944.897 740.525 944.897 744.325 cv
cp
f
925.772 713.133 mo
925.772 716.933 929.166 720.014 933.353 720.014 cv
937.54 720.014 940.934 716.933 940.934 713.133 cv
940.934 709.333 937.54 706.254 933.353 706.254 cv
929.166 706.254 925.772 709.333 925.772 713.133 cv
cp
f
1023.11 688.362 mo
1023.11 707.65 1007.47 723.285 988.184 723.285 cv
968.897 723.285 953.261 707.65 953.261 688.362 cv
953.261 669.074 968.897 653.439 988.184 653.439 cv
1007.47 653.439 1023.11 669.074 1023.11 688.362 cv
cp
.0784314 .0823529 .168627 0 cmyk
f
997.561 685.891 mo
996.918 685.891 996.287 685.934 995.66 685.986 cv
995.66 685.984 li
995.274 686.02 994.884 686.043 994.488 686.043 cv
987.377 686.043 981.578 680.49 981.157 673.484 cv
981.162 673.229 981.176 672.977 981.176 672.723 cv
981.176 640.965 955.431 615.22 923.673 615.22 cv
891.915 615.22 866.169 640.965 866.169 672.723 cv
866.169 704.48 891.915 730.227 923.673 730.227 cv
924.003 730.227 924.328 730.207 924.657 730.203 cv
924.657 730.227 li
997.018 730.227 li
997.018 730.198 li
997.199 730.204 997.376 730.227 997.561 730.227 cv
1009.8 730.227 1019.73 720.302 1019.73 708.059 cv
1019.73 695.816 1009.8 685.891 997.561 685.891 cv
cp
.0392157 .027451 .027451 0 cmyk
f
1004.47 721.896 mo
1004.47 726.495 1000.74 730.227 996.136 730.227 cv
920.597 730.227 li
915.996 730.227 912.268 726.495 912.268 721.896 cv
912.268 721.896 li
912.268 717.296 915.996 713.568 920.597 713.568 cv
996.136 713.568 li
1000.74 713.568 1004.47 717.296 1004.47 721.896 cv
1004.47 721.896 li
cp
.0588235 .054902 .0588235 0 cmyk
f
876.209 653.133 mo
876.209 648.096 877.533 643.409 879.782 639.416 cv
880.167 638.592 880.605 637.635 881.055 636.633 cv
891.521 623.76 906.77 615.639 923.759 615.639 cv
941.079 615.639 956.584 624.078 967.062 637.391 cv
968.117 639.705 968.729 642.307 968.729 645.068 cv
968.729 654.645 961.632 662.404 952.879 662.404 cv
952.125 662.404 951.865 662.355 950.666 662.218 cv
942.62 661.801 935.181 663.592 929.535 666.303 cv
922.971 669.449 915.847 675.008 907.954 677.895 cv
907.501 678.066 907.044 678.219 906.583 678.36 cv
906.222 678.473 905.881 678.563 905.541 678.653 cv
905.32 678.707 905.108 678.775 904.886 678.824 cv
904.306 678.955 903.75 679.055 903.24 679.104 cv
903.237 679.104 903.234 679.102 903.229 679.099 cv
902.225 679.242 901.208 679.339 900.168 679.339 cv
886.937 679.339 876.209 667.605 876.209 653.133 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
903.834 635.496 mo
910.488 631.213 912.505 627.184 913.044 625.725 cv
914.667 620.371 919.992 616.318 926.521 615.721 cv
942.722 616.567 957.146 624.789 967.062 637.391 cv
968.117 639.705 968.729 642.307 968.729 645.068 cv
968.729 654.645 961.632 662.404 952.879 662.404 cv
952.125 662.404 951.865 662.355 950.666 662.218 cv
942.62 661.801 935.181 663.592 929.535 666.303 cv
922.971 669.449 915.847 675.008 907.954 677.895 cv
907.501 678.066 907.044 678.219 906.583 678.36 cv
906.222 678.473 905.881 678.563 905.541 678.653 cv
905.32 678.707 905.108 678.775 904.886 678.824 cv
904.725 678.861 904.586 678.869 904.431 678.9 cv
906.466 676.814 906.982 674.445 906.896 671.846 cv
906.151 663.82 901.917 658.242 899.912 656.01 cv
899.686 655.787 899.47 655.555 899.26 655.316 cv
899.01 655.066 898.856 654.922 898.856 654.922 cv
898.856 654.922 898.858 654.876 898.859 654.854 cv
897.096 652.668 896.054 650.018 896.054 647.152 cv
896.054 642.174 899.184 637.838 903.834 635.496 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
954.685 640.287 mo
953.421 646.254 945.525 649.35 937.046 647.201 cv
928.569 645.056 922.718 638.479 923.982 632.516 cv
925.244 626.549 933.14 623.452 941.619 625.602 cv
950.097 627.746 955.947 634.324 954.685 640.287 cv
cp
0 0 0 0 cmyk
f
870.044 749.152 mo
873.8 756.652 882.925 759.688 890.425 755.93 cv
897.925 752.174 900.96 743.048 897.204 735.548 cv
890.037 721.239 892.067 721.135 876.823 728.77 cv
869.323 732.527 866.289 741.652 870.044 749.152 cv
cp
.694118 .0941176 0 0 cmyk
f
887.812 733.658 mo
887.68 731.064 885.033 729.09 881.898 729.249 cv
878.763 729.407 876.328 731.639 876.459 734.232 cv
876.591 736.826 879.238 738.801 882.373 738.643 cv
885.507 738.484 887.942 736.252 887.812 733.658 cv
cp
.541176 0 .0823529 0 cmyk
f
896.5 746.635 mo
896.561 747.858 896.268 749.014 895.719 750.014 cv
895.626 750.219 895.523 750.457 895.416 750.706 cv
892.794 753.971 888.846 756.148 884.335 756.375 cv
879.737 756.607 875.516 754.768 872.572 751.678 cv
872.262 751.129 872.069 750.507 872.035 749.834 cv
871.917 747.512 873.707 745.532 876.03 745.415 cv
876.23 745.404 876.299 745.412 876.62 745.432 cv
878.762 745.424 880.714 744.888 882.18 744.155 cv
883.884 743.303 885.707 741.857 887.768 741.051 cv
887.885 741.004 888.004 740.961 888.126 740.92 cv
888.22 740.887 888.309 740.861 888.398 740.834 cv
888.457 740.818 888.512 740.799 888.571 740.783 cv
888.723 740.745 888.869 740.713 889.003 740.693 cv
889.005 740.695 889.005 740.695 889.006 740.695 cv
889.272 740.646 889.541 740.61 889.816 740.598 cv
893.33 740.418 896.321 743.123 896.5 746.635 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
889.337 751.283 mo
887.628 752.41 887.143 753.412 887.018 753.771 cv
886.654 755.089 885.293 756.143 883.572 756.373 cv
879.272 756.387 875.35 754.588 872.57 751.672 cv
872.262 751.123 872.068 750.502 872.035 749.834 cv
871.917 747.516 873.702 745.541 876.02 745.424 cv
876.219 745.415 876.289 745.422 876.609 745.439 cv
878.744 745.433 880.692 744.899 882.155 744.168 cv
883.854 743.317 885.673 741.876 887.727 741.072 cv
887.845 741.025 887.964 740.982 888.085 740.941 cv
888.179 740.909 888.268 740.883 888.357 740.856 cv
888.415 740.839 888.47 740.821 888.528 740.807 cv
888.571 740.795 888.607 740.791 888.648 740.781 cv
888.134 741.313 888.027 741.894 888.082 742.521 cv
888.377 744.455 889.567 745.749 890.125 746.264 cv
890.188 746.314 890.248 746.367 890.306 746.422 cv
890.375 746.48 890.417 746.512 890.417 746.512 cv
890.417 746.512 890.417 746.523 890.417 746.528 cv
890.912 747.033 891.22 747.662 891.255 748.356 cv
891.316 749.561 890.541 750.653 889.337 751.283 cv
cp
.635294 0 .152941 0 cmyk
f
875.813 750.803 mo
876.074 749.342 878.127 748.486 880.399 748.893 cv
882.67 749.299 884.3 750.813 884.039 752.275 cv
883.778 753.735 881.724 754.591 879.452 754.186 cv
877.181 753.777 875.551 752.265 875.813 750.803 cv
cp
.541176 0 .0823529 0 cmyk
f
964.669 763.614 mo
968.611 771.484 978.187 774.67 986.056 770.728 cv
993.927 766.785 997.112 757.21 993.169 749.34 cv
985.649 734.323 987.779 734.215 971.783 742.228 cv
963.912 746.17 960.728 755.745 964.669 763.614 cv
cp
.694118 .0941176 0 0 cmyk
f
983.56 747.271 mo
983.423 744.548 980.644 742.477 977.355 742.643 cv
974.066 742.809 971.51 745.15 971.648 747.873 cv
971.787 750.595 974.564 752.668 977.853 752.5 cv
981.143 752.335 983.699 749.992 983.56 747.271 cv
cp
.541176 0 .0823529 0 cmyk
f
992.43 760.975 mo
992.495 762.258 992.188 763.469 991.611 764.52 cv
991.515 764.733 991.405 764.984 991.292 765.246 cv
988.542 768.672 984.398 770.956 979.666 771.195 cv
974.84 771.439 970.412 769.508 967.322 766.264 cv
966.998 765.689 966.794 765.037 966.757 764.332 cv
966.635 761.893 968.511 759.816 970.951 759.693 cv
971.161 759.683 971.233 759.691 971.57 759.711 cv
973.816 759.703 975.866 759.141 977.405 758.371 cv
979.193 757.477 981.105 755.961 983.267 755.113 cv
983.39 755.065 983.516 755.02 983.643 754.977 cv
983.742 754.942 983.835 754.914 983.929 754.887 cv
983.99 754.871 984.048 754.85 984.11 754.834 cv
984.269 754.793 984.422 754.76 984.565 754.74 cv
984.566 754.74 984.567 754.74 984.568 754.74 cv
984.846 754.69 985.128 754.652 985.417 754.638 cv
989.104 754.451 992.244 757.287 992.43 760.975 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
984.915 765.852 mo
983.121 767.033 982.612 768.085 982.481 768.463 cv
982.099 769.846 980.671 770.95 978.865 771.193 cv
974.352 771.207 970.238 769.32 967.319 766.258 cv
966.997 765.684 966.793 765.032 966.758 764.33 cv
966.635 761.898 968.507 759.826 970.94 759.703 cv
971.149 759.693 971.222 759.701 971.558 759.721 cv
973.798 759.713 975.842 759.152 977.377 758.385 cv
979.161 757.492 981.069 755.98 983.225 755.136 cv
983.348 755.086 983.473 755.042 983.6 755 cv
983.7 754.965 983.792 754.938 983.886 754.91 cv
983.946 754.893 984.004 754.872 984.066 754.857 cv
984.11 754.846 984.149 754.842 984.191 754.831 cv
983.653 755.389 983.541 755.998 983.596 756.658 cv
983.907 758.687 985.156 760.045 985.741 760.584 cv
985.808 760.638 985.87 760.693 985.931 760.75 cv
986.003 760.811 986.049 760.846 986.049 760.846 cv
986.049 760.846 986.048 760.857 986.048 760.861 cv
986.567 761.394 986.89 762.053 986.927 762.779 cv
986.992 764.045 986.177 765.19 984.915 765.852 cv
cp
.635294 0 .152941 0 cmyk
f
970.722 765.349 mo
970.997 763.814 973.152 762.917 975.535 763.344 cv
977.917 763.77 979.628 765.359 979.354 766.893 cv
979.081 768.425 976.925 769.322 974.542 768.896 cv
972.158 768.471 970.448 766.881 970.722 765.349 cv
cp
.541176 0 .0823529 0 cmyk
f
887.802 785.109 mo
890.964 791.423 898.648 793.978 904.961 790.814 cv
911.275 787.654 913.83 779.971 910.667 773.657 cv
904.634 761.61 906.343 761.522 893.509 767.951 cv
887.196 771.113 884.64 778.796 887.802 785.109 cv
cp
.694118 .0941176 0 0 cmyk
f
901.969 772.345 mo
901.859 770.159 899.63 768.498 896.992 768.63 cv
894.352 768.765 892.302 770.643 892.413 772.826 cv
892.523 775.011 894.751 776.674 897.391 776.54 cv
900.031 776.406 902.08 774.527 901.969 772.345 cv
cp
.541176 0 .0823529 0 cmyk
f
910.074 782.991 mo
910.125 784.021 909.878 784.994 909.417 785.834 cv
909.339 786.008 909.251 786.208 909.162 786.418 cv
906.956 789.167 903.631 791 899.833 791.189 cv
895.962 791.388 892.41 789.836 889.93 787.234 cv
889.67 786.773 889.506 786.25 889.478 785.684 cv
889.38 783.729 890.886 782.063 892.841 781.963 cv
893.009 781.954 893.069 781.961 893.337 781.978 cv
895.141 781.971 896.785 781.521 898.019 780.902 cv
899.454 780.185 900.989 778.969 902.723 778.289 cv
902.822 778.251 902.922 778.213 903.024 778.18 cv
903.105 778.151 903.179 778.129 903.254 778.107 cv
903.302 778.093 903.35 778.076 903.399 778.064 cv
903.527 778.031 903.65 778.005 903.763 777.988 cv
903.765 777.99 903.765 777.99 903.766 777.99 cv
903.99 777.949 904.216 777.918 904.448 777.906 cv
907.406 777.758 909.924 780.033 910.074 782.991 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
904.044 786.904 mo
902.605 787.852 902.197 788.695 902.092 788.998 cv
901.786 790.109 900.64 790.994 899.191 791.188 cv
895.571 791.2 892.27 789.686 889.928 787.23 cv
889.669 786.77 889.506 786.248 889.478 785.684 cv
889.38 783.732 890.881 782.07 892.833 781.972 cv
893.001 781.963 893.06 781.971 893.329 781.984 cv
895.126 781.979 896.766 781.529 897.998 780.914 cv
899.429 780.197 900.959 778.984 902.689 778.309 cv
902.789 778.268 902.888 778.232 902.99 778.197 cv
903.07 778.17 903.144 778.146 903.219 778.127 cv
903.267 778.111 903.314 778.096 903.364 778.084 cv
903.399 778.074 903.431 778.07 903.464 778.063 cv
903.033 778.51 902.941 779 902.988 779.528 cv
903.237 781.156 904.238 782.246 904.708 782.678 cv
904.761 782.721 904.81 782.766 904.86 782.811 cv
904.918 782.859 904.955 782.887 904.955 782.887 cv
904.955 782.887 904.955 782.897 904.955 782.9 cv
905.371 783.326 905.629 783.855 905.66 784.439 cv
905.71 785.453 905.057 786.373 904.044 786.904 cv
cp
.635294 0 .152941 0 cmyk
f
892.659 786.5 mo
892.879 785.271 894.607 784.55 896.519 784.891 cv
898.431 785.232 899.804 786.508 899.583 787.738 cv
899.365 788.969 897.636 789.688 895.723 789.346 cv
893.811 789.004 892.439 787.729 892.659 786.5 cv
cp
.541176 0 .0823529 0 cmyk
f
197.236 439.617 mo
197.236 471.718 223.26 497.742 255.361 497.742 cv
287.462 497.742 313.486 471.718 313.486 439.617 cv
313.486 407.516 287.462 381.492 255.361 381.492 cv
223.26 381.492 197.236 407.516 197.236 439.617 cv
cp
.0901961 .113725 .121569 0 cmyk
f
218.236 473.367 mo
218.236 483.308 227.974 491.367 239.986 491.367 cv
251.998 491.367 261.736 483.308 261.736 473.367 cv
261.736 463.427 251.998 455.367 239.986 455.367 cv
227.974 455.367 218.236 463.427 218.236 473.367 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
206.986 416.367 mo
206.986 411.683 208.331 407.323 210.621 403.608 cv
211.013 402.842 211.458 401.951 211.916 401.02 cv
222.563 389.045 238.077 381.492 255.361 381.492 cv
272.98 381.492 288.756 389.342 299.417 401.723 cv
300.489 403.878 301.111 406.297 301.111 408.867 cv
301.111 417.771 293.892 424.992 284.986 424.992 cv
284.22 424.992 283.955 424.945 282.735 424.816 cv
274.548 424.43 266.981 426.097 261.236 428.616 cv
254.558 431.545 247.312 436.714 239.28 439.4 cv
238.822 439.559 238.357 439.701 237.885 439.832 cv
237.519 439.938 237.173 440.021 236.827 440.105 cv
236.603 440.156 236.385 440.219 236.16 440.265 cv
235.57 440.387 235.005 440.48 234.486 440.523 cv
234.483 440.522 234.479 440.522 234.475 440.521 cv
233.453 440.651 232.418 440.742 231.361 440.742 cv
217.899 440.742 206.986 429.829 206.986 416.367 cv
cp
.0470588 .0705882 .0627451 0 cmyk
f
235.089 399.961 mo
241.859 395.979 243.912 392.229 244.459 390.873 cv
246.111 385.895 251.527 382.123 258.17 381.57 cv
274.652 382.356 289.327 390.004 299.417 401.723 cv
300.489 403.878 301.111 406.297 301.111 408.867 cv
301.111 417.771 293.892 424.992 284.986 424.992 cv
284.22 424.992 283.955 424.945 282.735 424.816 cv
274.548 424.43 266.981 426.097 261.236 428.616 cv
254.558 431.545 247.312 436.714 239.28 439.4 cv
238.822 439.559 238.357 439.701 237.885 439.832 cv
237.519 439.938 237.173 440.021 236.827 440.105 cv
236.603 440.156 236.385 440.219 236.16 440.265 cv
235.997 440.299 235.855 440.307 235.697 440.336 cv
237.767 438.396 238.292 436.191 238.205 433.772 cv
237.447 426.308 233.14 421.119 231.1 419.043 cv
230.87 418.836 230.651 418.62 230.438 418.398 cv
230.183 418.164 230.025 418.031 230.025 418.031 cv
230.025 418.031 230.028 417.988 230.029 417.969 cv
228.234 415.936 227.174 413.47 227.174 410.804 cv
227.174 406.175 230.36 402.141 235.089 399.961 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
286.823 404.42 mo
285.539 409.969 277.504 412.849 268.878 410.851 cv
260.253 408.854 254.302 402.736 255.586 397.189 cv
256.872 391.641 264.905 388.761 273.531 390.758 cv
282.156 392.754 288.108 398.871 286.823 404.42 cv
cp
0 0 0 0 cmyk
f
610.011 403.764 mo
609.683 403.764 609.359 403.785 609.039 403.813 cv
609.039 403.811 li
608.841 403.828 608.642 403.842 608.441 403.842 cv
604.804 403.842 601.839 401.002 601.625 397.421 cv
601.626 397.291 601.634 397.162 601.634 397.031 cv
601.634 380.795 588.473 367.633 572.237 367.633 cv
556.002 367.633 542.84 380.795 542.84 397.031 cv
542.84 413.266 556.002 426.428 572.237 426.428 cv
572.405 426.428 572.572 426.419 572.741 426.416 cv
572.741 426.428 li
609.732 426.428 li
609.732 426.414 li
609.826 426.416 609.917 426.428 610.011 426.428 cv
616.269 426.428 621.343 421.355 621.343 415.096 cv
621.343 408.838 616.269 403.764 610.011 403.764 cv
cp
.0392157 .027451 .027451 0 cmyk
f
613.54 422.17 mo
613.54 424.521 611.634 426.428 609.281 426.428 cv
570.665 426.428 li
568.313 426.428 566.407 424.521 566.407 422.17 cv
566.407 422.17 li
566.407 419.818 568.313 417.911 570.665 417.911 cv
609.281 417.911 li
611.634 417.911 613.54 419.818 613.54 422.17 cv
613.54 422.17 li
cp
.0588235 .054902 .0588235 0 cmyk
f
547.973 387.016 mo
547.973 384.441 548.648 382.046 549.798 380.004 cv
549.996 379.582 550.22 379.094 550.45 378.58 cv
555.8 372 563.596 367.849 572.281 367.849 cv
581.136 367.849 589.062 372.162 594.419 378.969 cv
594.958 380.152 595.27 381.48 595.27 382.895 cv
595.27 387.788 591.643 391.756 587.168 391.756 cv
586.783 391.756 586.649 391.731 586.037 391.661 cv
581.922 391.447 578.121 392.363 575.234 393.748 cv
571.878 395.358 568.236 398.199 564.201 399.676 cv
563.971 399.762 563.736 399.841 563.5 399.912 cv
563.316 399.971 563.142 400.017 562.967 400.063 cv
562.854 400.092 562.746 400.125 562.633 400.151 cv
562.336 400.217 562.052 400.269 561.791 400.293 cv
561.79 400.292 561.788 400.292 561.785 400.291 cv
561.272 400.363 560.752 400.414 560.221 400.414 cv
553.458 400.414 547.973 394.415 547.973 387.016 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
562.094 378 mo
565.496 375.811 566.528 373.75 566.804 373.005 cv
567.633 370.269 570.354 368.195 573.693 367.891 cv
581.975 368.323 589.349 372.527 594.419 378.969 cv
594.958 380.152 595.27 381.48 595.27 382.895 cv
595.27 387.788 591.643 391.756 587.168 391.756 cv
586.783 391.756 586.649 391.731 586.037 391.661 cv
581.922 391.447 578.121 392.363 575.234 393.748 cv
571.878 395.358 568.236 398.199 564.201 399.676 cv
563.971 399.762 563.736 399.841 563.5 399.912 cv
563.316 399.971 563.142 400.017 562.967 400.063 cv
562.854 400.092 562.746 400.125 562.633 400.151 cv
562.55 400.169 562.479 400.174 562.4 400.189 cv
563.44 399.123 563.704 397.912 563.66 396.583 cv
563.279 392.48 561.116 389.628 560.09 388.486 cv
559.975 388.373 559.865 388.254 559.756 388.133 cv
559.629 388.005 559.55 387.93 559.55 387.93 cv
559.55 387.93 559.551 387.908 559.551 387.896 cv
558.65 386.779 558.117 385.424 558.117 383.959 cv
558.117 381.414 559.718 379.197 562.094 378 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
588.091 380.449 mo
587.445 383.5 583.408 385.082 579.075 383.984 cv
574.74 382.887 571.749 379.525 572.395 376.475 cv
573.04 373.427 577.077 371.844 581.411 372.941 cv
585.746 374.039 588.737 377.4 588.091 380.449 cv
cp
0 0 0 0 cmyk
f
682.312 455.102 mo
682.312 468.357 671.566 479.104 658.311 479.104 cv
645.056 479.104 634.311 468.357 634.311 455.102 cv
634.311 441.847 645.056 431.102 658.311 431.102 cv
671.566 431.102 682.312 441.847 682.312 455.102 cv
cp
.0392157 .027451 .027451 0 cmyk
f
554.063 433.902 mo
554.063 466.004 580.087 492.027 612.187 492.027 cv
644.29 492.027 670.312 466.004 670.312 433.902 cv
670.312 401.801 644.29 375.777 612.187 375.777 cv
580.087 375.777 554.063 401.801 554.063 433.902 cv
cp
.0901961 .113725 .121569 0 cmyk
f
575.063 467.652 mo
575.063 477.594 584.801 485.652 596.813 485.652 cv
608.824 485.652 618.562 477.594 618.562 467.652 cv
618.562 457.713 608.824 449.652 596.813 449.652 cv
584.801 449.652 575.063 457.713 575.063 467.652 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
563.813 410.652 mo
563.813 405.969 565.157 401.609 567.447 397.895 cv
567.839 397.128 568.285 396.237 568.743 395.306 cv
579.39 383.33 594.904 375.777 612.187 375.777 cv
629.806 375.777 645.583 383.628 656.243 396.009 cv
657.315 398.164 657.937 400.582 657.937 403.152 cv
657.937 412.058 650.718 419.277 641.812 419.277 cv
641.046 419.277 640.781 419.23 639.561 419.102 cv
631.375 418.715 623.808 420.383 618.063 422.902 cv
611.384 425.83 604.138 431 596.106 433.686 cv
595.648 433.844 595.184 433.986 594.712 434.118 cv
594.346 434.224 594 434.307 593.653 434.391 cv
593.43 434.441 593.212 434.505 592.986 434.551 cv
592.396 434.672 591.832 434.766 591.313 434.81 cv
591.309 434.809 591.306 434.809 591.302 434.807 cv
590.279 434.938 589.245 435.027 588.188 435.027 cv
574.726 435.027 563.813 424.115 563.813 410.652 cv
cp
.0470588 .0705882 .0627451 0 cmyk
f
591.916 394.246 mo
598.686 390.264 600.738 386.516 601.287 385.158 cv
602.939 380.18 608.354 376.409 614.998 375.855 cv
631.478 376.643 646.154 384.29 656.243 396.009 cv
657.315 398.164 657.937 400.582 657.937 403.152 cv
657.937 412.058 650.718 419.277 641.812 419.277 cv
641.046 419.277 640.781 419.23 639.561 419.102 cv
631.375 418.715 623.808 420.383 618.063 422.902 cv
611.384 425.83 604.138 431 596.106 433.686 cv
595.648 433.844 595.184 433.986 594.712 434.118 cv
594.346 434.224 594 434.307 593.653 434.391 cv
593.43 434.441 593.212 434.505 592.986 434.551 cv
592.824 434.584 592.682 434.593 592.523 434.622 cv
594.593 432.682 595.119 430.477 595.031 428.059 cv
594.274 420.594 589.967 415.404 587.927 413.329 cv
587.697 413.121 587.477 412.906 587.265 412.685 cv
587.01 412.45 586.852 412.316 586.852 412.316 cv
586.852 412.316 586.854 412.274 586.856 412.254 cv
585.06 410.221 584.001 407.756 584.001 405.09 cv
584.001 400.461 587.187 396.426 591.916 394.246 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
643.65 398.705 mo
642.365 404.254 634.332 407.135 625.705 405.137 cv
617.08 403.14 611.128 397.022 612.414 391.475 cv
613.698 385.926 621.732 383.047 630.357 385.043 cv
638.982 387.039 644.934 393.156 643.65 398.705 cv
cp
0 0 0 0 cmyk
f
648.813 477.602 mo
648.813 495.275 634.486 509.604 616.812 509.604 cv
599.138 509.604 584.813 495.275 584.813 477.602 cv
584.813 459.929 599.138 445.603 616.812 445.603 cv
634.486 445.603 648.813 459.929 648.813 477.602 cv
cp
.207843 .227451 .231373 0 cmyk
f
619.938 477.102 mo
619.439 477.102 618.948 477.135 618.458 477.176 cv
618.458 477.174 li
618.158 477.201 617.855 477.22 617.547 477.22 cv
612.013 477.22 607.5 472.896 607.171 467.445 cv
607.175 467.247 607.188 467.051 607.188 466.854 cv
607.188 442.139 587.152 422.102 562.437 422.102 cv
537.722 422.102 517.688 442.139 517.688 466.854 cv
517.688 491.568 537.722 511.603 562.437 511.603 cv
562.695 511.603 562.947 511.588 563.203 511.584 cv
563.203 511.603 li
619.516 511.603 li
619.516 511.582 li
619.657 511.585 619.796 511.603 619.938 511.603 cv
629.465 511.603 637.189 503.88 637.189 494.353 cv
637.189 484.825 629.465 477.102 619.938 477.102 cv
cp
.0392157 .027451 .027451 0 cmyk
f
625.311 505.121 mo
625.311 508.701 622.41 511.603 618.83 511.603 cv
560.043 511.603 li
556.463 511.603 553.562 508.701 553.562 505.121 cv
553.562 505.121 li
553.562 501.541 556.463 498.639 560.043 498.639 cv
618.83 498.639 li
622.41 498.639 625.311 501.541 625.311 505.121 cv
625.311 505.121 li
cp
.0588235 .054902 .0588235 0 cmyk
f
525.501 451.607 mo
525.501 447.688 526.529 444.041 528.28 440.933 cv
528.582 440.291 528.921 439.547 529.271 438.766 cv
537.416 428.748 549.283 422.429 562.504 422.429 cv
575.982 422.429 588.05 428.997 596.203 439.356 cv
597.025 441.158 597.501 443.182 597.501 445.333 cv
597.501 452.783 591.979 458.822 585.167 458.822 cv
584.58 458.822 584.377 458.785 583.444 458.678 cv
577.182 458.353 571.393 459.747 566.999 461.856 cv
561.891 464.306 556.348 468.631 550.204 470.879 cv
549.853 471.01 549.497 471.129 549.138 471.24 cv
548.856 471.328 548.591 471.398 548.326 471.467 cv
548.155 471.512 547.989 471.563 547.816 471.602 cv
547.365 471.703 546.933 471.781 546.536 471.818 cv
546.533 471.817 546.532 471.816 546.527 471.816 cv
545.747 471.926 544.956 472 544.146 472 cv
533.849 472 525.501 462.87 525.501 451.607 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
546.998 437.881 mo
552.176 434.549 553.746 431.412 554.167 430.277 cv
555.429 426.113 559.572 422.957 564.653 422.493 cv
577.261 423.152 588.488 429.551 596.203 439.356 cv
597.025 441.158 597.501 443.182 597.501 445.333 cv
597.501 452.783 591.979 458.822 585.167 458.822 cv
584.58 458.822 584.377 458.785 583.444 458.678 cv
577.182 458.353 571.393 459.747 566.999 461.856 cv
561.891 464.306 556.348 468.631 550.204 470.879 cv
549.853 471.01 549.497 471.129 549.138 471.24 cv
548.856 471.328 548.591 471.398 548.326 471.467 cv
548.155 471.512 547.989 471.563 547.816 471.602 cv
547.692 471.63 547.583 471.636 547.463 471.66 cv
549.047 470.037 549.448 468.193 549.381 466.17 cv
548.801 459.924 545.506 455.582 543.946 453.847 cv
543.771 453.672 543.602 453.492 543.439 453.308 cv
543.245 453.111 543.125 453 543.125 453 cv
543.125 453 543.126 452.965 543.127 452.947 cv
541.755 451.246 540.943 449.183 540.943 446.953 cv
540.943 443.08 543.379 439.705 546.998 437.881 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
586.572 441.611 mo
585.589 446.254 579.442 448.662 572.845 446.992 cv
566.247 445.321 561.694 440.203 562.677 435.563 cv
563.66 430.92 569.805 428.511 576.403 430.182 cv
583 431.852 587.553 436.971 586.572 441.611 cv
cp
0 0 0 0 cmyk
f
928.422 400.234 mo
928.422 424.673 948.234 444.484 972.672 444.484 cv
997.111 444.484 1016.92 424.673 1016.92 400.234 cv
1016.92 375.797 997.111 355.985 972.672 355.985 cv
948.234 355.985 928.422 375.797 928.422 400.234 cv
cp
.0901961 .113725 .121569 0 cmyk
f
944.41 425.928 mo
944.41 433.496 951.824 439.632 960.967 439.632 cv
970.112 439.632 977.525 433.496 977.525 425.928 cv
977.525 418.361 970.112 412.225 960.967 412.225 cv
951.824 412.225 944.41 418.361 944.41 425.928 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
935.845 382.535 mo
935.845 378.969 936.869 375.648 938.612 372.822 cv
938.911 372.238 939.25 371.561 939.598 370.852 cv
947.705 361.734 959.513 355.985 972.672 355.985 cv
986.085 355.985 998.096 361.961 1006.21 371.387 cv
1007.03 373.027 1007.5 374.868 1007.5 376.825 cv
1007.5 383.604 1002.01 389.101 995.226 389.101 cv
994.642 389.101 994.441 389.065 993.511 388.967 cv
987.28 388.673 981.519 389.941 977.144 391.86 cv
972.062 394.09 966.544 398.024 960.43 400.069 cv
960.082 400.189 959.728 400.299 959.369 400.398 cv
959.089 400.479 958.826 400.543 958.562 400.605 cv
958.392 400.645 958.226 400.693 958.054 400.727 cv
957.605 400.819 957.175 400.891 956.781 400.925 cv
956.778 400.925 956.775 400.924 956.772 400.924 cv
955.994 401.023 955.207 401.09 954.402 401.09 cv
944.154 401.09 935.845 392.783 935.845 382.535 cv
cp
.0470588 .0705882 .0627451 0 cmyk
f
957.24 370.046 mo
962.394 367.012 963.957 364.158 964.374 363.126 cv
965.63 359.336 969.753 356.465 974.811 356.043 cv
987.358 356.643 998.531 362.465 1006.21 371.387 cv
1007.03 373.027 1007.5 374.868 1007.5 376.825 cv
1007.5 383.604 1002.01 389.101 995.226 389.101 cv
994.642 389.101 994.441 389.065 993.511 388.967 cv
987.28 388.673 981.519 389.941 977.144 391.86 cv
972.062 394.09 966.544 398.024 960.43 400.069 cv
960.082 400.189 959.728 400.299 959.369 400.398 cv
959.089 400.479 958.826 400.543 958.562 400.605 cv
958.392 400.645 958.226 400.693 958.054 400.727 cv
957.93 400.754 957.823 400.76 957.703 400.783 cv
959.278 399.305 959.677 397.627 959.612 395.786 cv
959.035 390.103 955.755 386.152 954.203 384.572 cv
954.027 384.413 953.861 384.249 953.699 384.082 cv
953.505 383.903 953.384 383.801 953.384 383.801 cv
953.384 383.801 953.386 383.769 953.387 383.754 cv
952.02 382.205 951.214 380.329 951.214 378.301 cv
951.214 374.775 953.639 371.704 957.24 370.046 cv
cp
.0431373 .0235294 .054902 0 cmyk
f
996.625 373.439 mo
995.646 377.663 989.53 379.855 982.962 378.336 cv
976.398 376.814 971.866 372.158 972.843 367.936 cv
973.822 363.711 979.938 361.518 986.505 363.038 cv
993.071 364.559 997.602 369.215 996.625 373.439 cv
cp
0 0 0 0 cmyk
f
1015.46 436.826 mo
1015.46 456.114 999.821 471.748 980.534 471.748 cv
961.246 471.748 945.61 456.114 945.61 436.826 cv
945.61 417.537 961.246 401.903 980.534 401.903 cv
999.821 401.903 1015.46 417.537 1015.46 436.826 cv
cp
.207843 .227451 .231373 0 cmyk
f
983.945 436.279 mo
983.4 436.279 982.863 436.315 982.331 436.361 cv
982.331 436.357 li
982.002 436.387 981.671 436.408 981.335 436.408 cv
975.296 436.408 970.371 431.691 970.013 425.74 cv
970.016 425.523 970.029 425.312 970.029 425.095 cv
970.029 398.123 948.164 376.257 921.192 376.257 cv
894.22 376.257 872.354 398.123 872.354 425.095 cv
872.354 452.066 894.22 473.933 921.192 473.933 cv
921.472 473.933 921.748 473.915 922.028 473.91 cv
922.028 473.933 li
983.484 473.933 li
983.484 473.909 li
983.637 473.912 983.789 473.933 983.945 473.933 cv
994.341 473.933 1002.77 465.504 1002.77 455.106 cv
1002.77 444.709 994.341 436.279 983.945 436.279 cv
cp
.0392157 .027451 .027451 0 cmyk
f
989.809 466.857 mo
989.809 470.764 986.642 473.933 982.735 473.933 cv
918.58 473.933 li
914.672 473.933 911.505 470.764 911.505 466.857 cv
911.505 466.857 li
911.505 462.951 914.672 459.785 918.58 459.785 cv
982.735 459.785 li
986.642 459.785 989.809 462.951 989.809 466.857 cv
989.809 466.857 li
cp
.0588235 .054902 .0588235 0 cmyk
f
880.88 408.457 mo
880.88 404.178 882.004 400.199 883.915 396.806 cv
884.244 396.107 884.614 395.294 884.997 394.443 cv
893.885 383.51 906.835 376.613 921.265 376.613 cv
935.974 376.613 949.143 383.78 958.042 395.086 cv
958.938 397.052 959.458 399.261 959.458 401.609 cv
959.458 409.74 953.431 416.332 945.998 416.332 cv
945.357 416.332 945.134 416.289 944.117 416.172 cv
937.283 415.818 930.966 417.34 926.169 419.643 cv
920.595 422.314 914.545 427.035 907.84 429.488 cv
907.458 429.631 907.07 429.762 906.677 429.882 cv
906.371 429.979 906.082 430.055 905.792 430.131 cv
905.605 430.178 905.424 430.234 905.236 430.277 cv
904.744 430.387 904.272 430.473 903.838 430.514 cv
903.835 430.514 903.833 430.512 903.829 430.51 cv
902.976 430.632 902.113 430.713 901.229 430.713 cv
889.993 430.713 880.88 420.748 880.88 408.457 cv
cp
.0196078 .0117647 .0117647 0 cmyk
f
904.341 393.478 mo
909.993 389.839 911.707 386.417 912.165 385.18 cv
913.542 380.633 918.065 377.189 923.611 376.684 cv
937.371 377.402 949.621 384.385 958.042 395.086 cv
958.938 397.052 959.458 399.261 959.458 401.609 cv
959.458 409.74 953.431 416.332 945.998 416.332 cv
945.357 416.332 945.134 416.289 944.117 416.172 cv
937.283 415.818 930.966 417.34 926.169 419.643 cv
920.595 422.314 914.545 427.035 907.84 429.488 cv
907.458 429.631 907.07 429.762 906.677 429.882 cv
906.371 429.979 906.082 430.055 905.792 430.131 cv
905.605 430.178 905.424 430.234 905.236 430.277 cv
905.099 430.307 904.981 430.315 904.85 430.342 cv
906.578 428.57 907.016 426.557 906.943 424.35 cv
906.31 417.533 902.715 412.796 901.011 410.9 cv
900.82 410.711 900.636 410.514 900.458 410.312 cv
900.246 410.1 900.115 409.977 900.115 409.977 cv
900.115 409.977 900.117 409.938 900.118 409.918 cv
898.62 408.063 897.735 405.812 897.735 403.377 cv
897.735 399.149 900.393 395.467 904.341 393.478 cv
cp
.00784314 .00392157 .00392157 0 cmyk
f
947.531 397.547 mo
946.458 402.615 939.75 405.243 932.55 403.42 cv
925.35 401.598 920.381 396.012 921.454 390.946 cv
922.526 385.879 929.232 383.25 936.433 385.074 cv
943.633 386.896 948.602 392.482 947.531 397.547 cv
cp
0 0 0 0 cmyk
f
897.15 496.843 mo
900.143 502.819 907.413 505.236 913.388 502.244 cv
919.363 499.25 921.781 491.98 918.788 486.006 cv
913.079 474.604 914.696 474.521 902.55 480.605 cv
896.576 483.6 894.158 490.867 897.15 496.843 cv
cp
.694118 .0941176 0 0 cmyk
f
911.306 484.5 mo
911.201 482.434 909.091 480.859 906.593 480.986 cv
904.096 481.111 902.156 482.891 902.261 484.957 cv
902.367 487.023 904.474 488.598 906.972 488.471 cv
909.469 488.344 911.41 486.566 911.306 484.5 cv
cp
.541176 0 .0823529 0 cmyk
f
918.227 494.838 mo
918.277 495.812 918.043 496.732 917.605 497.528 cv
917.532 497.692 917.449 497.883 917.363 498.082 cv
915.275 500.684 912.129 502.416 908.537 502.598 cv
904.872 502.784 901.509 501.318 899.163 498.855 cv
898.917 498.418 898.763 497.922 898.736 497.388 cv
898.642 495.536 900.067 493.959 901.919 493.866 cv
902.078 493.857 902.133 493.865 902.388 493.879 cv
904.095 493.872 905.652 493.445 906.82 492.863 cv
908.176 492.184 909.628 491.031 911.271 490.391 cv
911.364 490.352 911.458 490.316 911.555 490.283 cv
911.63 490.258 911.701 490.238 911.774 490.217 cv
911.819 490.204 911.864 490.188 911.91 490.176 cv
912.032 490.146 912.147 490.119 912.254 490.104 cv
912.255 490.105 912.257 490.105 912.257 490.105 cv
912.468 490.068 912.683 490.037 912.903 490.027 cv
915.703 489.887 918.085 492.039 918.227 494.838 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
912.521 498.541 mo
911.16 499.438 910.773 500.236 910.673 500.523 cv
910.383 501.572 909.299 502.412 907.927 502.597 cv
904.501 502.607 901.376 501.174 899.163 498.85 cv
898.917 498.414 898.763 497.92 898.736 497.387 cv
898.642 495.539 900.064 493.966 901.912 493.873 cv
902.07 493.866 902.125 493.871 902.379 493.885 cv
904.081 493.881 905.633 493.456 906.798 492.873 cv
908.152 492.193 909.602 491.047 911.238 490.404 cv
911.332 490.368 911.427 490.333 911.523 490.301 cv
911.599 490.275 911.669 490.256 911.74 490.233 cv
911.787 490.221 911.83 490.205 911.876 490.193 cv
911.91 490.184 911.939 490.181 911.971 490.175 cv
911.564 490.598 911.478 491.061 911.52 491.563 cv
911.756 493.102 912.704 494.131 913.148 494.541 cv
913.199 494.582 913.246 494.625 913.292 494.668 cv
913.347 494.713 913.381 494.74 913.381 494.74 cv
913.381 494.74 913.381 494.75 913.381 494.752 cv
913.776 495.156 914.021 495.656 914.05 496.209 cv
914.098 497.168 913.479 498.038 912.521 498.541 cv
cp
.635294 0 .152941 0 cmyk
f
901.747 498.158 mo
901.955 496.995 903.589 496.314 905.4 496.638 cv
907.208 496.96 908.507 498.167 908.299 499.332 cv
908.091 500.494 906.456 501.176 904.645 500.852 cv
902.835 500.528 901.538 499.322 901.747 498.158 cv
cp
.541176 0 .0823529 0 cmyk
f
964.77 501.992 mo
967.911 508.263 975.54 510.8 981.81 507.659 cv
988.082 504.518 990.618 496.89 987.478 490.62 cv
981.486 478.655 983.183 478.568 970.439 484.953 cv
964.167 488.094 961.63 495.723 964.77 501.992 cv
cp
.694118 .0941176 0 0 cmyk
f
979.822 488.971 mo
979.711 486.801 977.499 485.15 974.876 485.282 cv
972.256 485.416 970.22 487.281 970.33 489.451 cv
970.44 491.619 972.654 493.27 975.275 493.137 cv
977.895 493.005 979.931 491.139 979.822 488.971 cv
cp
.541176 0 .0823529 0 cmyk
f
986.888 499.889 mo
986.939 500.91 986.695 501.877 986.236 502.713 cv
986.159 502.884 986.072 503.083 985.981 503.291 cv
983.791 506.021 980.489 507.84 976.719 508.031 cv
972.874 508.227 969.345 506.688 966.882 504.103 cv
966.626 503.646 966.462 503.124 966.434 502.563 cv
966.336 500.621 967.832 498.965 969.776 498.867 cv
969.942 498.858 970 498.865 970.268 498.881 cv
972.058 498.875 973.691 498.428 974.917 497.815 cv
976.341 497.102 977.865 495.894 979.587 495.219 cv
979.686 495.18 979.787 495.144 979.887 495.109 cv
979.966 495.082 980.042 495.061 980.115 495.038 cv
980.164 495.025 980.209 495.009 980.259 494.997 cv
980.386 494.962 980.508 494.938 980.622 494.922 cv
980.623 494.922 980.624 494.922 980.624 494.922 cv
980.845 494.881 981.07 494.851 981.301 494.839 cv
984.238 494.691 986.74 496.951 986.888 499.889 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
980.9 503.773 mo
979.47 504.715 979.066 505.555 978.961 505.854 cv
978.657 506.956 977.52 507.836 976.081 508.031 cv
972.485 508.04 969.207 506.537 966.881 504.098 cv
966.625 503.641 966.462 503.121 966.435 502.563 cv
966.336 500.623 967.828 498.973 969.767 498.876 cv
969.932 498.867 969.991 498.875 970.259 498.889 cv
972.044 498.883 973.672 498.437 974.896 497.824 cv
976.316 497.115 977.836 495.91 979.554 495.237 cv
979.652 495.197 979.751 495.161 979.853 495.127 cv
979.933 495.102 980.007 495.079 980.08 495.057 cv
980.128 495.044 980.174 495.027 980.224 495.014 cv
980.259 495.006 980.29 495.002 980.324 494.994 cv
979.895 495.439 979.804 495.924 979.85 496.449 cv
980.097 498.066 981.091 499.146 981.559 499.578 cv
981.612 499.619 981.662 499.664 981.71 499.709 cv
981.767 499.758 981.803 499.785 981.803 499.785 cv
981.803 499.785 981.803 499.796 981.803 499.799 cv
982.216 500.223 982.474 500.746 982.503 501.326 cv
982.555 502.334 981.906 503.247 980.9 503.773 cv
cp
.635294 0 .152941 0 cmyk
f
969.593 503.373 mo
969.812 502.151 971.529 501.437 973.427 501.776 cv
975.326 502.115 976.689 503.382 976.47 504.604 cv
976.251 505.824 974.535 506.539 972.636 506.2 cv
970.737 505.86 969.375 504.594 969.593 503.373 cv
cp
.541176 0 .0823529 0 cmyk
f
929.078 517.623 mo
931.598 522.654 937.719 524.689 942.75 522.17 cv
947.779 519.65 949.814 513.53 947.294 508.5 cv
942.488 498.902 943.849 498.832 933.625 503.953 cv
928.595 506.473 926.559 512.594 929.078 517.623 cv
cp
.694118 .0941176 0 0 cmyk
f
940.365 507.453 mo
940.277 505.713 938.501 504.389 936.398 504.494 cv
934.297 504.602 932.664 506.098 932.751 507.838 cv
932.839 509.578 934.615 510.902 936.718 510.797 cv
938.821 510.689 940.453 509.193 940.365 507.453 cv
cp
.541176 0 .0823529 0 cmyk
f
946.822 515.936 mo
946.863 516.756 946.667 517.532 946.298 518.201 cv
946.236 518.338 946.167 518.5 946.095 518.666 cv
944.337 520.855 941.689 522.316 938.664 522.469 cv
935.578 522.625 932.748 521.391 930.773 519.316 cv
930.567 518.949 930.436 518.533 930.414 518.082 cv
930.335 516.523 931.535 515.197 933.093 515.117 cv
933.227 515.111 933.274 515.115 933.489 515.129 cv
934.925 515.124 936.234 514.766 937.218 514.273 cv
938.361 513.7 939.583 512.732 940.966 512.189 cv
941.044 512.159 941.125 512.13 941.206 512.102 cv
941.27 512.08 941.329 512.063 941.388 512.047 cv
941.426 512.033 941.465 512.021 941.504 512.012 cv
941.606 511.984 941.705 511.963 941.794 511.951 cv
941.796 511.953 941.796 511.953 941.796 511.953 cv
941.975 511.919 942.155 511.895 942.339 511.885 cv
944.696 511.767 946.703 513.58 946.822 515.936 cv
cp
.631373 .00392157 .0156863 0 cmyk
f
942.018 519.055 mo
940.872 519.811 940.546 520.48 940.463 520.723 cv
940.218 521.605 939.305 522.313 938.152 522.467 cv
935.268 522.477 932.636 521.271 930.772 519.313 cv
930.566 518.945 930.436 518.531 930.414 518.082 cv
930.335 516.527 931.531 515.201 933.086 515.124 cv
933.219 515.117 933.267 515.123 933.48 515.135 cv
934.914 515.13 936.22 514.772 937.201 514.281 cv
938.341 513.711 939.56 512.745 940.939 512.205 cv
941.017 512.172 941.097 512.145 941.177 512.117 cv
941.242 512.096 941.3 512.077 941.361 512.061 cv
941.399 512.049 941.436 512.036 941.476 512.025 cv
941.504 512.02 941.529 512.016 941.556 512.01 cv
941.212 512.367 941.139 512.757 941.176 513.179 cv
941.375 514.475 942.172 515.342 942.546 515.687 cv
942.589 515.722 942.629 515.757 942.667 515.792 cv
942.714 515.832 942.744 515.854 942.744 515.854 cv
942.744 515.854 942.744 515.862 942.744 515.863 cv
943.075 516.202 943.281 516.625 943.305 517.092 cv
943.345 517.9 942.826 518.631 942.018 519.055 cv
cp
.635294 0 .152941 0 cmyk
f
932.948 518.732 mo
933.123 517.752 934.5 517.178 936.023 517.449 cv
937.546 517.721 938.64 518.738 938.464 519.719 cv
938.291 520.699 936.912 521.271 935.388 521 cv
933.865 520.727 932.771 519.712 932.948 518.732 cv
cp
.541176 0 .0823529 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Sasa) ()
%%Title: (Weather Icons.eps)
%%CreationDate: 7/31/2018 1:03 PM
%AI9_DataStream
%Gb",KB3Q=sde<S6>hAr[3F`/#EWBpNLp=5$J;l?#OoQ@C@>3P1q=+=U\*iNQb,t2S,dcT;JZ.g8?$1?kFdNCEZH[9^;JVe8Rt%W>
%'`(VU'IDijargY/nDHb&T\Ag.O]E18E1FXqq.@0a<GcjO>Kq2rh9InDbuT0SQ2=QrUgBD5kt*>sZ!+=is%6kgV=Gqoam>BB`EKrY
%CppK=SWoC?R&HWrk'([b70VV]8)J$FleP0UTCQ&64'2'ebtm[>ro:6:ktin0<Y[4/^&IdVg);g(2I&\Ghj3XH]#n@o'7EHaMX"A[
%C?b=Uot8lDZq?lmZgm]C$Hh^;U.L-jl]QKX<Db@?h\&(Gjf<$jDS7:KRL3!@f?WCjMHEX@?%^Sf>S_S)s!cfSi\/gg#l]=S.fKsB
%%=Z3=/Z#?R;:#5j*d)-?JYf.NP9+LG#'HR?:mSVRi:'V:lFL<e<-b8k77ist_f4jQjL_%K7ZN[HY)tIKOom5r(manQ'SktG[H_,b
%W>F)_V:tK04k&[9f)A=;)j)8i&%_FKlWp::+[1aG>f$6fbt>Ar`mr7>XHtWh;/Yl!0?$efF^FHslo+080Rc1H"LYo,?L=&-<?[s&
%=39<A[;j]DcRiGQLj?.5nUT9a9<fLeBFH+s>EKNhMaW$Tp<0j\N5e$fj^,!2?>HY>/[J6]>I@'k;O*L2rBRW%-h;9UO4QqfEi2iQ
%phWd7PMGK.,T<?-HX7^_(Yu.@7]?TXBhlgIO[4?",he6*WDfOO>E5i6T_tA'rp$^+O]F!DNh;VkT<=*E\XZIGFo9g54OnR:eTLDh
%=QJfmRq3b2A`5;c68H_N1<V-_rBad+Bj;Hg>l)Lo>o1Uf(Wl.U5ERL`6aBr,=`ZScalSV]=N&ZtdBY`YZ%rP%U<"Su/Xe4o,jH(>
%Ok"ral]`F)O:;*):F&<Br8*<DkS/Ii%6B38gioA2+uB(LTD/eb_G:jlQmIVZVsooIN\;NM?`6uo<3uYIco(_hRUQjcJ!@J5K%#=<
%JlVRpZARLs%Z'8*eqs76nbuA\8]3h=6Qbh37>ZR04VuGWJ\r9L6Qc8h(9A+9d7=,Q?g+/E"8qd0%ha=8)>]/]@PEMG#j.![TMAi0
%\FI9Yq*QNu.!Ue`JpBOu7.3PL\FH;-U1R925AVO#rsrhj6!m+/6-_*//fpdKpk`NJf$R"((QfS"OTli%m(S_]RO$N5l4B-HMmG&n
%^>*_gKuaOnn<Lp6>JYa85/DSCZX=h5hB*TLJ"la0k1;8D(BoWXih+hITr:;``RkP&M'@iT:Pa%ir?;b`pU)s01S7gD*XG@3FWco:
%c5oTAYPI-jqn*D/")[V^ak9%Ips&K$m+3cq(0OX;iICXi6)ElFdkpSCr%7mcLA3k./cJUjdhJVI\+jUjipZBGpuaWrDoW0!GJ&En
%N-H'9(B:[CnTXb4r1iWS]HDpC`P4`*r#PbPs-2H6L[u?Mr"S0Arq?@)^X5Qra;Ll;-o!oa-"b^gc47pmT+cZpG.FEdINs3`XT-c'
%/WV8B^I@NW+3FEj3$5>[RFSJ8XRj0Gq(,;7q,,etB:l7trt;i7hfGTt1Tu50'R'3'k=8rnT7,i/l[S$tXPt\1s7m+XV/HN!Dn;h6
%[7/"^IM4>g2bY9oib4g\g#9`cqIg%U\CcqdfNHsJ$WO5(]5W>X`Qp`E`ds%keh%RD3I&aOC4<tW.23P#4AN\_[]$]@/l*RY\3...
%$0Hg$3(CnRJJlMX#)eR0S'`]B>[bm9_+hD;l1iT1Zbpp7]YZ.%!DUm#<01IWRfc/3_2YGP67WcAMHqdeq<5?GKQViA`Y;.EO%i>$
%J.!pVe%l4QKi[sgn@7D4#YDiYLO'lW+V)#6"&g-d1)^sV9GJ#^(u/Bm/O\8D87q>hR!R&/5_VWN\7@<cd;4)qnFZd_@o;`m6[>>n
%AqCe#d/W(ECO%pRn@>__2C-$C,iHBQ0p5M%WCRf#Qoa?MEo85W)-Ns8,?c2oDR?.*</[sWQA_@B^=gtM*(`;9O<i`G!YeKKpYE_"
%M*amA5cGTEYOCIHidis,P"$At(cVh5d;5/3`p^N(8m^DO1d8*&?JfTP64nWi9NOjD'g"(+n9aThqii7Zn0<mUiJM'lcpS'ephb^`
%ppf\,LDh0N/29c-%"1+"/P7U,,ZWFFr$)!WSbQBq$QAskX7b>ZbGhLY5gT?7$8eaK)+QqJ[h3[$NBBk5FR>1#,%J4tV2r_N,PSoL
%8iZ-0F**@X@sejjE8a0'oTSl2G)ePT'aAFqBcr'Q1[H?jcAFQmO&]:\KmnRXUQoNf$u:_IpWC&A9lcZ2o9pn#5ghb;9*:nuoFr_9
%GGr2a:-5dT.'0BTr>'G3aaeb^I'c4XjM3M9MGm9pOG*tck;'b9+b#WE,sB.AU$od#bqW3[CFXKc0M87a0&X;`->1XYRkhT)9P%.X
%5=sPu/,YJm8^?uaoD;?9$rq,,_@HN]lAcHR=T$4rMCUd7&$LE27iJJ+0TINrL!9#4\eo22rQf5F1'a]-pBA^r5;Fr-G*0(+US-W^
%G3[t+=8P\L,$#:7?i0aLm-M()Q,:g1qtql/*7R/2$9JL#c],fe55SS6lp%"G0rN;\@tdq^q:\]ABkjF4E"#jn:gm'Or"um*[qk.N
%&JPfX!E3h-QYgD`NDk:1@7@t_,;p]HikpH]FnX_++HF9XMl?\DEc$Cm<23QJjt<%MAe.'F]eKA<Q"$Ue/38O#Y!"(9d$I)=aV5?(
%&gAJc>#W5U</R[e#7@1\k5=jt%Q8X<Mb#C^)1ktlCdGmpR&PqMWG"uLe<C7F(bVo2CUmoc?AL/Y[JR!K;h9Y%p%4eV*B8'q70-j\
%cLp5r*21\O[UU58e!qgbrR%A+ZI-M0`u;4md'pMAn\^?1N;aA@rMSZ8NW$p"H59Cioo+RJ(!;5$C!g.!.u%;o.`C?#9fM7WOKYm^
%^e-(mFS1:cZge^01U?j0VlV3hjTDOc3U]aBRmQR<W/`h)OejQ-PK@CKfVOgT@1(8;(?H:/$7QerC*Tef=j:U1odbX?%;PfsH%#Jc
%0#Z?S_=f:4*J5/L"pu6Q[*dd&Y[*?JE'bGVYVO$C(ni]O.!V"3,=9`UpL"9IAe.'6gCY0T559(4mPp=/X)Ud94N%$"-YF!Ld(''N
%YVt2oKY<7*_&_IQ/YU6^@QPB/Iu[Wr'2Sj:#kFQm-.dAjV%#;B+=iZAeMMYic/1-#@F(FVlY_9@ZH>X+I:.LGM('JQ)W@-M(^k5H
%FR3HDG<g6nd']CQ2@_n904M"K0%M!=-84,o=oe@Tp:Q+$$'o`/@AGd:iE.kh/<JGm?;:cO#do-hG@6ftMHM9i;*>k98h5P"l]rTs
%-FBLJPV9mh]^20VZVYm)N&EB/fK>VF1uKr:iXk"S]8cSqCIJWoU\29#o_Mk?o+mInfi5*k?Y-%KTkA18LtX,.SY4'FDM3b,/4fTO
%"+@(r>C&9sQDJmi)-]M$Gp'/9rVGrK2au:'g*l*6/sEX''eE5Z&A(A@Y8*3Cg8,NSefN-s\961c7L(GUp*jTUR88e.;.Q&>X>5O=
%&$b;-'et3Ga+0's@7!k#kFhN/de?mWT.O<l?1p9VfU:>T7g_?Lg?1t7B:h>a`^NUSq9erX>%#S.VpI?l0nh9U9U/Tb/gQ>p"rBD)
%Oi=(M7?%DM.28)]#qsYWA!<'+'iGBs*P?R8[$;a>+V,CMU2^1_oE(W,FP4nEqkQ&D"J2\;2Ddnt7`6d'54hXoHfl19\Qm/(!e3N`
%]BLuLoL<]2Y`DKOnC+EpA(MoML!]?k#)?ofA?ZXnE(R.L8MqKqjPtqW@PbQ^E;dWim4$CO>%K\'Rd&MK5!igJ#J<iDq%T264]7,t
%h,iD$m!a2Si%=T3BM#FZ5r-'*Ol23\f>2gn]n<AKl]N;k0sb]]BqEYn):Zi'^M]*e$aCou=$H.XUg20m.\dG(]_EQY\FhKma:p"Z
%qSPNeN<jREauT+!F,DJne;5.5m62BXaa%MuUsVY$qK^mB(\A_&mpX8$LFTLE16RIu>4]0GWO?9d.`[<[IF`+m<6\<>V!5q<7klfd
%iV`cjVasU+I=][skMh@alVS>fOPeGAE<@r\i:N!^/E=tV\N)9I-6IQpW<bfa)D@jq"%So>4j1@!(G:@!/O[kk%;T"SBI*[[EnVg7
%UCQL7F@3pD293Ood*eNP6Y&hZhn@%?UK8IgH#8_YbN_2R2W+<Qf"4%nkIb(b][/I>!.T_,:`!Yd*;I=c;WmLq#\l$0Jt'FA^n2sL
%D0TKtL6_Q20"`+1Z0RF`3+)qL6Y6OX.0@almJpCmW\,Lf^0Ma1A3,`*We_gHQ_#<OcE>Q6Gph,6k\n_64NmJn%;?Q0JfS,LSNOXl
%JtNj(0nC0SB5g-;\H,imrmGI4i,Om'#@u?8\*'_cS[*Kq*0h`1SRAF4EqVd4]V(`J`_7E9!9rNY6WA5ls)(]7nlT`#&+Q,k?HDH]
%\HAUkB#(!n0OQoa;PO;hF"=K!1ElYB:E`gZijS'JDMb+KZ3MIdL!&ef9bj!t5iXEE7Hljn<([t'q!PpCbpH"?=XpL\2lXpS+mFrp
%PSpP;HF8Zb1YnS0-pN&EaYO(!Hj9`V"%,#PLu,j=J;!YYa/[@M-US#fmR8g#"sj$mB`>"H^^Lj4*,HTX-^Z^(Ld5b\5XRui!+$A3
%qTTUVVnR\!RL*/F=?.SkI8abHs.D=t(J<VMf`NWINH!QhNaCErQ2<38(B^9R%H0j!I7eqNidNDi5T^X`jmn/Y6M(nHBg-P1*r)h,
%m"!80XT+]oLhQ0^UJ(u]kc]DLgL@P,:@W\D_Ytdf&(hRpeGbs6^/3L4=5OfFHTYU&=4lD\Mg;=NJ`,OsCS)Q"SUL4B;V9Z8O/I+.
%#T(oi`kML+7Tp\=:uD;(m$.$+Ti&WVOh@m.jqV3,Kbkqif-TgnRe>gRpGDf#T,groh<R;D)k`R;ntntrC(7h=l&YkW&^Qu2rHaeO
%DRZ(jl^c$uo8io&ALbsRC21N5\O^;teOHD639AQ+T.,nVW4TH%I:Bce]7)l9aMV@dVp0OiI2*G5V$,[eME5L;b1)L%hW^)9\O3nj
%6MTrP>O,7"MV?+/X'1LrL?NWXgV-3!24O93O^8+X;:,,4X!@2Z9dN*b@27/,q(4^1Wn2%LXjZl2XZW]_+jYdu7c]i6[TG2jWaSKs
%-iH6HD^g5io;E+6EUTZqMSU;(;%ElrXOa=H(06reo?F=O]O<O;GYu$V)(CK+PVVXP=3m>;X,(RG[F"]T>&R_;"sBS'W5@RmlWQog
%lD6tLQ/W$7fo/W%,so4-Zsm3@XEd.R)+DQqeVTZm.cTFGqs@jphSG*Pf7NIjFo(FAleOME8sR0SCLt0=YLND+iR(,0l0k[!K-%2D
%fX5Ilh+j6.GD-ZA>-1\PRdrnL?>3CYS3flNm8-l:L\T9mL%1mm9<+^KGaqr!Ud>ACHP69[Wcu-U(Y.787;#$"7d3MjUDEV2=6@(U
%J(6$>$]3_bl"8H`RBHH>d>bp(]*lA!]'sKY?-)B&AEqb_V%[ul=)&J,^*(h)3n%W/..U^"aaH3[m,FA$8p%3`onm!Ujp_tch:?;,
%/D"ob13Z-hM/3J*T36prGGS;VGO%",mjFW*G8e`D:9@G9L#A(G[5f8apa[T$4fN(KQtaO0gp,=+]39#NIs+CUAam#ZrN&&X:$u/Z
%HaQrCPl?mcZ"RT<YSku1F^2g3K4OXg&nj\e4eDU.)4ABS[oKSK$Wfo/U2.hDFH(R$]NSg07/$=ARpANRE]VVXEf4+t:9u7oQS@Z_
%onAsW2S5.cl>f7o?t3bg"4kOb9l2/Yg`1JbETQ>^$b+*?1D3dWhr2_K[7XsOf&&<"mDPD3g6omI]2<39,%u'kI5qTB9mjLiQV2_:
%`0X,E\S3?Y2&=B%PNpFFn`<fZ"n:[83\g[6>djKA[=3?tW\jbPV\eQ7UVA%NIWf`J@,aDQG=NhQD00nG/EV,RP-=jf/"o+(:/3YA
%N3.Wt;RbJbPoA?'UGh"QZc)W<A.Z"$hd0GSAnn?iE,Lh;qmf5#k1NnLg)6Xp^PQC*eFbumgTAur3_WuKjsrCVc.;_u(Sgqp*antI
%Q\c/tkn;PBX_tMLX6%%_./CH6F2,YbNcqmS<[q/]b9]/?lUa8rcVC3A1mm*FWKh6Wg7;,/B!_cKbcH;OHj:%/?T/qSWB(l.\YTeV
%.aFgEIW$&^"A!WEcMc^%9s,H8Q0?5;B5V5G2f"DuY$?WqjlW"Okc*jMB/eU<UITVsSU8gnap?&CY6cbOWKXE(bTd0[9FI2^Jd9]^
%5b^7s2D8VUrc3bi^1`G2;p6e6O2^cqLX,rQ&/`Thr@#)=;&OMjeR"U,K0Hn2PZkK?`Ds;jU\"NNamh8M_:(euVZHEm%d<4nlb!R"
%hF_QR*m#4>4DqM@aY'2rQd=%HW/J%+a->f2]SAA@jD3%nR[K_1>dISZ[]7mX8hAI<k;F+7gkM8`3%E]5<GGeWNq`onlgldPXt5Dn
%g`#ohAj#2r:b&l!8S/@JD0.:82d=lM\@YLFP+"`sA?fNY&\r1ENm>`dMFkT6!O(/4_ZK1[Pr^l_n!GC5!5C[i21ngG2l5HAGSf]J
%*fQGKXLZr*)2%J1kdj/pk2&F-n-]RKL?Oq0:a!%)3k:nk-6k<]Ys,0\ZFf%-]D_\81[!PFh)hMI@Wd$p:5R9?rR?*8Z%A:R-oDpn
%qI-d</^*taK3;g:^Pp+jg@Y=_bVJ53-=:Oqf1Y3T?81r]FF>[;S?!8;-aD0E.m+gujo:Ycpo=%8S_RZQ.V&JQ$0N3=kC0FrLoK4%
%3U.^#7WF_2Qc!7ifAf,*^@=p4/EU8#,[@e4UE'u<R<o<:k'6@pi6%4.e$_'Sbt)KTH<kF/:47lJ`2M?R)?Qq19;.--DH:$lec.,t
%P3<Ba6`8Fs6kPQ%<a@I,\l4a%E(?^m=Z7U"n"u'&h4/774DQgXA/(W!c)Mkf._BbcHW-qDC7X(N1(I0KFB6(i1`J2U.[RbKh(a6d
%H9)d44KEAMCQ3(#i`o'c<%l"(arCqJ,b7r5,]&5!R/*#^iD*&f[bgX4odi^pg6Io,XkZk`(>rZ1<@?IV1)CF(H'*9EaE6RQKJ/LZ
%..\.FQ'/5ZfC_SdM'CE:\IZ\2peI%WId`uS/TSs>PaMr>KP>^)p7hJ#At</1(T"c8HVn<71\[)GZ54h?M_ZYYc=662;?$fH;5=bC
%m\ec-g5@0(RG/@u\a=`@UrHm3[:>?mU<%FgmObq/fo'ki<bZI3Sf0$qSH:Z\3L7/OniWnBCWT-&^)K"KcTp9!.q[IdKt>#QZZD;m
%q`@RPi<[hJSA/SYI^eF9T1-Af4Lo#M_6mCTAgOr6_1DgA&mS(Km8i.KTgb3a>YE;KH%r^VKJZ!&"P'A:[DZ0?N3rf=&l`'L</[mb
%S]kJiHeqjK_1I0e!aq`le#SV%W0%2j&iE;2W*bPXCO]FOqt8C@PCNA_ghcC':f=1/N^PUZ#?%$(,ACf@X5r)'&km%?YF6^)1e96;
%R9<T,nF@>pApA40m4E'Fh9_CNC=5m(7@t%c:;8aO6#(uEFk7Osl<15DqDG]E@X)01Fn/F_(J-]hXsKFKgnIGKg=Nk.ATGh/eYOp_
%CoMpCNA'm8)D0Nu$;[L)aF.h^n]Q&fmQIa!r%R"F+=UpoY5D5%*mO_Qo&eJFZV@mm?<?."p9t7W7S;)\?PCWY_f[J,5U&+03GL](
%3ZL[I1TsfQ%l.=<H#&ZDQCtOjJU+:MH'.O7P>V?WrU!H&FhZCUe1SP.53T?=6`F)O>[18j1+(5[HBPq#$P?<h7rm$23U&I=lbA?s
%QX[9"gXF&NrHBZ&P4d^CrARmZp!==%^m_PPM4D\VDmJMP1VHu=2;a+8d7:M)gRS"/DmJLea)SV"c$)QoOu;--c$,g"Q.jno=6;(Y
%[mpCoHSkI.n>f`r2uf?%Oa?EmU-f5fbI@^UU/V".B'/F$MVXuelNDN3cZ--N)9k#XjD?hdZt^`(bktY$H)]OZ,9KO$d!CmKc:dae
%*@)6&,XV4>_NtFO^TEm[2U5OWC1Dn?WTlsT;5p*F2u]m9lda9MX'41i[RuOACJmaf/.%jnTsH"d(?q':+e6KsAo90!Nl5['l+aX,
%DJ.Igqg+"9:H9r9ZR!+\Xj^X?Od\hp)2Dqs20Lp%Tia,,S!"Tec`X2)[o2Q/,\5E=Y*NeqC+\#.HEoFF3R[I_E8,$4>sP,oT"n)5
%DAgYRf-BId[da#K=fYJD0[,[_?BW)s&pX42"CA_pM[6t?;&G>.,_;:-n<*o\P/'^'GY%ri[j(<>*tt!N9e606!%Ca4Rqg$<kO@9l
%#gu\GQamVP/_\>/`=.\OQVG[K&hLn2'/G!'pWFm!m>VME]-lb`O6a4!I]54\*-rR?=QY3iH,!lV7dZC4-BcL@h`WtP_G*_p!'L#I
%ifp%dXdL,l)joc'E_L@YqA2kd[rK*0$K+Hm?V53CR['7PG"rN#8sSOG$h<MQjH:_O:eYmZIkGRoM$q[nj6SR$*f1\%<[?O$b)'^V
%@krHLKq(;Spj:lJIdYUaH$7cAG+];HC./buj'^OkFafDKpi#d*if*;73Wnt31,l]_FaF<=n^)0+LSj@ZK?4aP;3flr'I94!N2IRL
%h>+*POkNt$V41It<`N(m1GZDg$r&1]:<49[1ULl636!.I+e?P+OuUJKNal0_*+Q,\?tTN"(c$M1iYZb&kpCD/gG75)EK#0snKa-W
%`%c.$*!76cV^/\'-1T:s_*:"sQ-,XqrCsUFZVOogS&gtipmH6'r"&8YR8#%S+saY;c]m\<gqu^YH.]*=b+f$04[([M*S'FQG=hG&
%SlOs<[)C3OVknREfW+r;<Z>Tf\$IadXSO8bX&>^>[7<4OVppMk'Al^??`8m;(@ZL="hC-n8P?_lUXPG^.@P;fNb>KVQ&MSZZ<?iG
%\MkqI2^l3qk_;,E@ikRVY78(B^s>leFkWr2YA\&M:s(/SG;"*d/j2e/#J!-[?)U#fW[u_U0<+BpOptbR?((<O?8>fRs34m/'R_b%
%R."mL!%&'\&kqRa1<XRiEWS;/5dC(f%q@,J)on8s8TiKjm)57f%>[Qf\\st1]XbtMS!WOghV:59iDt5F&k5p]bq4N+[t*5N&qB=-
%q/[2#@,+Y(:82BX4#b1cOgoIh4.!HuoBFPgMri5UFm#(#F0"R-3-923R"(Ij\CmsR[n8EsReUr^i6O"/)a5&(63bPak4>a5'!=rL
%Y=*CqAo^+JEj*F:6ZR8'Kb?++H'[C]cWlPdRp^?/bZ416hY#?DWI27=&u=Z4WEece>*fR4[QD7h1/Vd>h5o[4o&[cu7ZShlF'I.m
%#f4-<=sQ0@M`C%XJgfeK:Sr!CrA"&m6U;?HSln=)hXGAJN,%U$QeiYBQ[]t?]IWtg(K)WZle^CL=3"%Gd6@59QrX0^hkPBt/kOaE
%4fRVS=.Y61RZ2Kg2"FY-4lM%m*4+q$`0RKJ[rk_$=(MW=2nA">1iK^OW_5%Co\\A&=).7V83*_ZAr'QBl]`rW>C!5kqF`S1*(`5%
%o-n$V.+jeh?!b(`L+kOQHF$4Qc-=W*RHBL@\&P.HF?A]90W33s-0,I#'W05bQC7DA@W(^?>PS*,fr.Zr_(\Mk'[;\9Ph8B\9f0C(
%LRo"5C85GlCLZ^KUIEq8]U6-6''u2[,`nBI/k<%#7u%2'AgLS8I?7>&b8KUCU@#"GO4DQ@*nP1urDIL.Kmt&X=MfX$*0mBkA^pNV
%qbaglp%1PB>ou\@>3FnF.eUN7A9+21$(L\2;+B$tI<(PWi45HrVt@Wb\T'g@Ibs6W)6H]s`W_bLDdro1H.h,g)Eg#8g"r=j\C"@4
%8r6Zc4+%h0Xl:"t9=^$ofL"Ig[)gkCcGStrD@4=#q8Ga',q;[L?@uI5iG)!TrYtP_TM4c*J!CU65N-Ipq73-)[OHEIbc[l$S?lhn
%g!uRofAgsi^0tKUXJ5q^$CBP11#GU1.Uh;\r?W>^Mf;>/bse%4d[e)Od/i--CB#m"A7>nXAg'V1(+`W4nr?Hc/_3YAaUYq.`.R<-
%D=/Pjg)Z#[KXXEr<1.rP-O+]KZ2S6:o\ln*.b7cZN.9(+#^8n=18B1HU6AbQ+q2a;IP2Xhlq'?M1b!Sejb$bD,E!gXBfi/e(1#.m
%'/>uaR&PuSB%`Si%Ug.Y7tQe*V+1>Uk"Q2(..bnj203]39mnAO<WkTSYAVYT9L9gmkeh1#DgBOUl\UB1<rnL:Q8c.hnqL=%j\([V
%A9Lr6UsQ%C0103;$.?qbAn.H*iG3714aOP_?>Ds$r:-C<f<OqWi`W//3Q+qJD%`(7NTORWrX7/[P\G*,lO>^Wa:W..T@Mlq)T,L_
%;$l.@[$80NeJ]m!V!.=Nqf(-!1b6JM*Hk':bNZ@Te<V\oCZV.f>0Y7Upe2V+;;Z/7M-'O-Jp>`1*)t,+<i'!YV]qhTR`J7"&&8,=
%O-4f\hgQ.(YEY/qSbi7a8QGb_B*WZN^FL]R16Eb0>Da+0#Ro5mM+Oi:QWfrRh9+<LNQMB)N:-h7d+\XsU'HgHLF%msq"S1VRZ0qK
%ef!"jhTZ"]5[^C;MfC-fjP(_`6qQ-nTrSBG0l4`1_/LD`GNk$[S!o6_Wb'h?7:.lEUI;'l-#d$oEn#Q[#o^\IV_2MLc$F-h?+X;8
%ZeF'4<#/c2(8a`hVsno<gdPGc6iY,N6QeFd.S9ck#tu^#4WR30'W\C535B')[4O3*Ktb-a6b#8>97kV!:<1:e28SM[V\>Sl)Q+=;
%dsu'dTf"Fm"fUclgAP@kS5+#a-;J=_:+&#li:N6nSaoS8iP,MD'D.9@^3YCF$2Q"440=ca\V@,)1rK4-k-8M:Xoag?<_UQM(DikM
%T+cU4MpFkEcNuc_pcLDtl`+js7PRlkE\)rZSO&Z?g@i7j%,2(\-R]uKV9K.>'9l6gH?tekgG?'""5d'd72oc$"-su-MlX@JOp%0d
%J;t)c<W^VS5UQOp/O5d0p1Q-0.upKr]!.ei.cIZTk&<3.9Qk1s!$)`G*@J\d"J6?TSpCu&Xa./;7@JLcL2@edmu,b6c,9gu"IBd,
%NebeqK$+HQ-b(.GZa3+#m"hV\h)jfp-?Xpd#sQDHB/_i0P2LD5cS=ol/-^ia;67iI'G8Q^0:r./SL[B13^N"T.%M>H8PhH6kr@'"
%IiF0D,,gXh%<$K("VY9=J2nr1-YH3f?qu54rY\!:Rl7WNi=,nQS`"R@ca!"#3Lu>kF+V`ej"oSK'\TjU<de14fM!*9T@8gVL*SID
%^iV]+:(F6K0V-#OoJ#ZASIk"d,1=^/1dSD!`SpS>$lrI$N7YYAW<l6G0HCt,P>`q;9IDMW4\Yan:_Z+Ec+?%3&lBsd7MqNC%-krL
%@04nt@6-ELP/)/@dkP66KU^GJL1>r4ia'U@-bTC&.u$V\S_VGOT_*/s[%3k3K$jrt:Q*Yi^N?DghIZZb*Y6!++!G?Gn_r1;!KdM^
%':=dbe&fGC"Juj"T&,hMZ"=j%*_cH<H>MfZ0*t<"0HC\$PB2Hb9IDMW4\Y`gK79aDTQ#S%hjikHSke]N8mj\49HRT*.a>`j#GqGH
%E4[5XjfrY4Dl_2`R]"\8^=Bkkq'*!8G'5>*0O:\aP7Hs2]B?R+-)papYgcUgg/4tNQ]NlNDu+UUf((o?Dac7e>@f-pBemTX%]UgI
%FjY%(=/8G-VGD#7QUJu)o7QGT$C8FMd.3MW]i@[C%"<Cgg?#nZ^Yq-;[,)N3<De-IV:<'rkgZ6TQ?^NUs$GAeH=P/!c5MFK(j(Ba
%r0ccFDS>X!MSt:XX6Y(f`$8:M?lG0K9Ht1M0,"-b2k?N]nCqjhNCkOFp[.%.kjFf&eP<"l]!6`G7D"mM+&E"*:9+M(IXTEkq!_Xp
%Y4oaSs4K%9A(/lr"^V8u4e>,qBWu4-noF/2_gVg'RI2ZC]@>Q++V1L06+2Zh0jd_X.cTFGYH-,a*C]qAkUVkoW2"+sR\+Ma]3!NP
%-XZ-M;]_I1q#nbcrf!cq'-_?"+7a[K]='/.n@%`a<AFMM/YcX0rSV5Q9?eQK/3RgV:];oQg)C^_BMOESTKVNcfg0E-]mnmb<]->*
%amXYUFS08AZ<EB"PFlr./in5\CK.7KW_=d3Ae(l42r#@/N^f64P="g:9H!`ap]i0eXJhCZlW#CYO;[;N$c;P/Yl:O_/0O>-#X%rd
%m^>4%X#Y^F)\pcnFpU&Ik"sJnGtIsAkRBC_hV,;<Wn]f8CC]G&(*In7?7RZ=N4Yd]4L3!De_9hQPkkPTk5r4p9ql]YeLI*tWP3X,
%kFu`O%^2654864SU<ZE0-MHVh<.BAA8Ul=_gW9Aa2EPGNlrMFnH`\3sYu9BsbVV7*"CpJ#ZeHs2ZNpoaLCHOJgK_,GWnJn%aLM'O
%)WUg?A+!@0#`4ei78f'1T3kYM[I.&[T\=;7]3a,?-n)EsWi7*D6afne3`W8F=B6Bk<bfBLD-&fuLnbb/flk&S>,iZDYIjHcPo0XU
%:a@[FDbB<#6(W)&gI[sFRbd<"Bku5B;Q#sE7;S4BkRX[2J50^s9td^<02`%OG,O&orKh#;OUc\?FJUA.?FOuM9ph$a1/6Ts`XKCM
%Xj1Xee>f=ec$H^];Q3s<ctJP`SQ;`;^+RgKQ[_jkCR%l2p>;ldU$&Om+>Ka*B[5h[>-nGHdnWn^.gTHTCiGb@m28BZR+@n[e5>o-
%:9%-iF\8R>HEHch*-AC26+P`%29rh1o4i$TGo]GtTH2UAOGDB_Mc,=&U111*SU?nK%nG(km;B78W^Ee5;FaY*_0&#nURIk]9,-!S
%8u5mjY=e3*If?^XS"9P#V0^BVIbU3db&o<'d0tN<Vs,e+E$I/#WD'eM$m`AEW).Bs\o^XRgoaq*l_TD^X!7l"Dal_QWffCNTV08h
%Xo;HTG=V^)oh1;8_"?<HVd-E2;rM[qs!ER_Ve3:`A0I&5f,E1=S(C"TV7uZ"XncV;FcCWe]8q$sVh\p#]=6T/KJBl=rNfZLJj[GE
%dNM3UP-4ZJbI*ejR9$^@<k3uY>EG^P`7CYU8:>M9Yf,&?F#VW_L)j"=)U-oI)s\*A=KePlGfJ]hPgc-^LG@"u@sH?VL/Ch,ZpGne
%h?t4Cp<#o?^I@_\<iJuLqNi*8&(&?`\B)(91!-dj/k27[>V^A,@K0/m&L-lb:(/K+o7Z;27uj>a'C"R\-IP]71QbC`Bp0gIB5u=3
%j]Z?5Xq?Q@X'A%G)nEl6K^DMt>nLYQ-s(i`)."qYHg)`OcBtujPq+VJl4*Pi>ZW8<.KYN:b(.O[K\+hXFR=s_Y]QFpI^t]6VE`U6
%,iE0r[N[?9m7p2'S<%Z,-mS7hc*Oa"F_k8Bh*lh)!J^SeSe=EF[IZk0_ASW%8+b;P4XR(CT%3++R=qF1BruGV\t5!a,\m!&_6E"^
%H7N9=2R!hq;u!lb,&)SSVnCkJ-?6)LDRQ4^PPBirB7rIb%M-"cLF2'WTVo.?j,&YmQ1`RJqEd+!T4?T!I=?=,-9m/WVX]P^$&']p
%`cFgW)QF9*b65WqboA5+85%)6aGgCR7Q0t/1o/\^CJILRMJNWePa8GMdo*50<pu06pf+AW5#"M'T%"o]80j4)KgbJQ['3#s^FHWD
%gO1Z?80,OVabccEQUotoEs%&9f'&n[p$:13ZS>L+YM3b.<.kSF$)?<O',&/YCf&jLX?2O9n*>(2!+^=\+-uP($BHU/#=fBLFP%!<
%-5>&'Qnhm2<kD.[eR>QBFM<UeDNCd0I$OE-oCCG8YrEStCj%E4@pg_JBd+2Z0rAP.ng=(P'5J:6`_<?pdIJS=KEu6@WRG4RI#I@k
%ed.0>3?qSGQq=e(ZUR[*eR"dfj<RWC+CZn-@fG\1f$K6^7b#B0TlhtBKhrtCqM=M4lVH(YT=c),2DO1##t^r(Y*XWtP>G"RDR@Hi
%PS/+Roe6k5')pY%2SLo&(iLcs,cq&!LUC@E=mtP_:"8U&#(=sUj&eJ(#7o@]2H`Xk$-'kkUO$7(35QofQ0c$#KLBqt+C#9-4^8Bq
%_&&q?[1s,_$r,:Xe+PK5M1BUhTJ7-Tla:_U-)G9]QcIbnS>&0,".Z+6Q#gL51/?21J_f-OGq:poW`#T(`2^g&Rg?t9m1D?aHC$fh
%ViIgUj@,CrKV)V;%ZgAX^H>9iWK$Ht0fML;Ir0E^n.'5"b^1Q?7NtZlnPc;/n\!b;6On*sLUY%L\?*/$e@\F;%HenOrh4?QVH;3B
%HA>m1P=r%g-6M/EZnXC1>Xt)'X9ll3l*FF`B,AC$\b>5nH]5a\[ti[Xd2l8eNHQ-f2MPE34[!\Q#BDOJ[GI*nBtr1L'.BYs^IjIt
%U)+i-8X"Cd<pT)G0\l%5#Pg)NV]>kHK_4MlX-2ktL:(YfB=32^)ho3WmLEML)ccU)G)[qTnI9!-Q71O-kk[9n1chYMV;q5GP??]m
%qr>k$q\_Dn3?4(C(]BEFHG0.+7,cbG'8(2MIe4)%0tLrXB"'M?o'5E<YjD\U"ZaLBFTV8M;t@]SNqbGpTL\;O.LBMN'/^Z_fDC>)
%S2Q`s.nq]9U,>BY8.tq#l"J_Vh(R,RoNL^9W_'u>UZK'4;u0IA6:6&%7rg)IdK5NjM)#N9[(`7^8X2=W)Jaap$tT,j).AMr>o9@%
%PEo[SG6l^*4\6WjZV$H'AX=Al3Fb@EEZ.j(nrThF-1uR;'.4Y)b(-0>*Y,Pj_gPa<VfA-A+f!Pc7JYo#VZYJBYl/t>jE7fV/75cQ
%=4M]iYD1\*rMnH<ST@LEjs^(o[p,\9@C@2X[q&7'Jc@fR[ditWnN':)C<j1IIl1Gs#Ebt1L_`W9W__S+qQ1(U`l/R(AEdublRfl:
%B%U'AaSoE]F,fZRZM)sY\]iWsE?jpj;9>&,c-oR'\+H^>`9aB@\SO+p4>a>th'S#aneU2J[u4[B7L^5V=Hgf\\g$0`ZX+$(E4Wb)
%NK$O*ft@/jZufZbq)aRV]fW<pdT&biBR!4"*!-NUda2+pE#at)_TD[\N3TdbiFC5IUr"p[L$I[W!+%&.U$8[X40&O+b4lH&Z`!83
%Uh4GlC37,9#28\XZqT3Z8s"Yk^6\dGB((Jt?V@#8l6NZ;,UAr[VtN[RK2n]WCoX7^F/<ZW[B<ON]Ai%@PXXe]U)#PW%m-UWV:;M9
%,1FmFFIX%jPKm$9bG7g3:mb.YH?@QJ3c1*rFhc\"3>!?n85p):ST5AeChT0$N\5!!;UjW(kG"F9esK>\)&SEXlE?+\,LnFFM,>o`
%;Ac^[SBhu]#]-Nj`^=aN"P"<)HqgNq[CK]AfbXC0$NATBVQOXM8C;fd'dCH<&;?_9,*,npj@_q;AL0b[#6cqT##_!=$7]+U2;Uc&
%9%?QYh_/fn/R;_I6Ag&rh(<!,_)mW=DsR`;'/b.0OiV[Ee]kG)6+(m9gUP2h"R4;L#R_T:>]/)p,sd2^;pW!s4hre$7)e5K)&r&/
%d?@ik6R;m2TR-SUld4)VQ^tW8V^M;VKE]*j,m__<`c#LW]X`#e"\5]KeT<s6+QUK2pI@&tM.<IO_sSuC\Cp'c+QF=5.4PFaFQd&l
%OXQ;#2fjrHK6MOXY=Jo<5uO=8(NhgZ65f@e+k_Z8BO]=ZQcC^;#(TBjl#HCgIBE?I*$[d:X7lHs;%i7C*9<BSURlV[&R0b]-1lH1
%,'c/S@aV-.4@_R&-9W'W:bJ-:_[cBXNZGjW;]1keBQ1^UOJI@.ZSHPol0qT`2#YBEKbKI0'Xgsu)/\.,>D$9@:K)W";041eD>.r?
%N@'QS@_;k"hR?#=7Adlr\Chbag6]55;jma-+Z%QSWc30^P9M;D$@Al(l&R]XF[PFA0XW:dOKJ?Wb8fYfFrW;6IB;p$3tI;5HOi=o
%D]V,kZr-\(nkstI\!l,fD-pSMT/Z2N/DaN4HBbIqdd?q_],(Y:hYPg8m:WV^kNf`e*kgEFFj"s5TY5LiW.o:f;;1gfq=>?_rmo)u
%oTQE%Q0\-Eqj"TZeSK*hhJ)eb??WX;0Ac,7D&UsB>j^d^E^$%CF?WOQDWN*CB]k9af'Q8fSc"PP=l[ur9'3.agWo.*FtT)Q=nfMH
%]Q*s2qkO/SR&\9#.5+JPQ?M//cg:CE5C^cpjjNTff,@AmrcN#JZM8QX]q)l@cEB@o(72H[B2f?3X8&4s-%GX]fZr'Wl6"U'Z59(e
%L&FU1iQ1bKq6IU/F)1CCULR.427f@UG5eU8h]Dd@mo4JuA65<DpG7T*pDTb<+%heN<TF'\=tUW6k1c`fKlOE'R<bGi>gC&dq7aM,
%Hh=J.X*1*tHiNZn`C@CC]#;)3EoCj/6<(':CF-Sm]Dm;mp?cE;>CZ/?d;!Im9/j2(q!]Xln9Aa/jb6I[=<$_DDIjaJ7p!l0?Z3%!
%='qQMCjW:4VIs)o*Hh0u>n)ZBk?k[T'Be^P<Vom".dOLt>)<GdIJn8%FetP/g\Y'H%j-!;Cuogumi<3F>S@o!j``mmpR^'Kk-sHs
%pQa(jg?H;S>jer<"7";jlcD9ub@g.nHJ8G#Sn0Ps>H=?G^9?lQlIUBdo4t2ILW)?uT3A25_Llc3$7DN^Pgd6+#61t+XLRMCgH7+$
%''XHfL$t`mmA%*W')Y$uIeKkIU?/#>5P5@EI_*'eq=3SdO(QaJ.W6tUqUJEBm)u%.?c+4h92?([WbO64]T^U40Y>G;G]$WUX<6QJ
%;?"UVrbUuPcU+W'k^M)DIJ;=KJ+2E&AhTM,c^u6/IW#,^\pdE)A;uX?-\A%aXNIHXM7WUKCOF4i(%XYM:NEibf%S-seV!I&md,d&
%4FHkY[LXk4YX7OBkLHWWhX6S/`Vec=/&<6uf0TW`!hJZLgZ@Ve90Yk3Slng&CZD@72fnVsdiId[+*/Zsn-@u@l],?%+_f;0%Q?B_
%5#iYoCYq(CkEY%n/Y2!2oD<,S:GVKOANALe^\*Xh06<n@lOS^]TB@$X0(TC_M6cF.mWRaRV93hb\U;*\]sr1X.\0EpO$79=msj(+
%/a;AQeNIlP`MJ@AO)l,g_.@&#2dHjRQ1X!EPJQCc:k>9WO`k"nUs@eCS3+J6[-`kD]7Z(@8NZ>^L]&%^pH=5fh(Ge3S@ZUm`P&@e
%b#($aUXtcB!h3h?5.g^^E`dZKBdDO.8,J70Vk>Km[deZ?Hoh/Da8>Oh@c%$Y/O/"hNk;I2Y#2sVB>m3o['S?KhL!86[//e\$J1_R
%qgSJhqkI*#b17O#S!g%0&,3&^=&4DLXpZc)2d5b1Wr4r!E-Cc-ZFtNS1\suYH6^Q\]icdJm]9D*d3F05fmdm(f`(.CIN@gI?T:Od
%+2-P1ZBS/ZUcZ6mVS9He.N^iQ'>NE8V\l'lO<@o0J,[+2](_m369#J`!GeGE)4RCf?+3YEr;"_"f>/,OT-Ks0U$K\[g!Bl([kHTK
%NjOEq1&:U$]DjS^1&(W%^EoIp??MhT:[71>k-03I<]E5l/5\?e^ZJnjgc5e7Xp"m_fe)ViW`M=5kYXmp*4sD?O-dW7#A9+?g>e_c
%>?X>=(:=")P1@;(=j?FpF_*#bCAAZIca8n:7p?SZpEt9QF&4aAUm3;OVcL<;j[@D_\sq0+fsQ7RjCS($&-[p=2I@0+imGbs<d:p<
%k9OBn6@l0D)i.J@K")_NLV>Mfbn"injj-t61e4nZXlE=+#ZN$pb!i%-`NP[sVMWa2?_SHLn)I<uke:4rcTc=Tm[u[Sg=u>m89SBu
%>$emgY*QQbB-Q-lqX^?JDg@:hA\JVA+BY)hXM=9t3I$bpR7l*&NRlJHSU*!d7O"qrq!GM'0:FA(-_IQ6H*$;iLe&?]aea!4\`t>t
%(ss:j@GsD+DgmgT[[o]d2D@%a`+-/jUn<%lNV"`cQQc:d#H25O^UUn-)*UP7]gh"THt<>8Yf#X4^pLh9,El2;:e#AE,2+LH!#:6r
%Ed=B[HHNo-LTG]5"oD+AV[##4WJmaCa9Fe`Laj5+M1A,N27k4B%<J'DPWBUQ=toe]-E[n?@gJhH(;Ic21tHBj??@:XH/EiPck4[W
%V\p;,IUr@Mf.o/pXu+7TD_G8>hAL5emTSG'bTED3S\;.+BB`'_gqDmd7"'l*mH(ckHS_=Anfdo(MfM%sZX`qZ2s-c84F)>;!d!+[
%r;#X<kJDc@9M/`m>kQBn4mC88]Bj(5e_0D(XkjSjW8:*a3TAblfop15T^b".X0eIH.2JG+(L`ZsNDI1*N'Z!q^JXS[iN9eCg/EuO
%DsR@sV<u.jRqCd$]n<4%I8@31ph$VfcX5;q0;%+3hrhXtG1W(G(HocT05m/u%lsJ(G'C_'ae#*eX%s'-4hbHF!Tet4XDt=Yph$#g
%">9-)AU8X^FT'(2eQL[B[4^;Rl`ZAAZ^L-H[?gL?AhH.d<8,@_e*^*g?WXSV966YQCb%C#gcfTS[cL97oE_Ji,]JDqi:^IaKD3!k
%F:U91A,H,jWNfd?])42#+Z,Ym*03Wf!1W4Y]]oAV[Q:=/nYZ$K?pg,>B:]V'+?gN8Q-C]PC9+b:<;3#&"QS%UWY]%5YHl_(P*3k`
%/H(J"I/B$Zr>t,EBbPoTeZ^@h%EtcBHR#ibM>OmiQ_#7GW:&cV0-=08-@WR`Z%9$VS?3klqjRpOAn.ap4Nl:/22aTMCb9l$3VSnE
%q>0tr\HD8SQfS)4"bY'TlDsj:LDS;$g"R8?iLAl:?@q<,`P1]1mOPoQ:9OuB<je(d[@o_?p^W?1Vjt<.*DZgL+!5%eY-TdkRVl/'
%=5L=e^[u<1`ocm%N4\Up20]\R4?Vl'-WM(b9-`F6%QMU$p=@6aO*=/!0(/LP'S^!9+d]mdiHF<QEO5/AV/<oXisLikjo3usVb:<t
%RXK2Jn4YqMr)]efDS=tBKc+d:)[G'1W]g%AYPk)rR]>m(e&kQS?d_4LG4F>=-hiLP7eaOg^qFd*_B$8$q_J%lIqrD<r:0&HA/sI?
%3IK/)k<1g(Ta0GC[^t>>mH!RT84MI=Ar^p#hA&Z?c^0t+mm"JS'k"Y[rFtYGZafXB]8"^_WOse[bb7%CLt+>%55g^oEEMs_Fj8&k
%bb#g(6Qp.GEoX;d459&NjCi7jC)g!*E7cOPnr)&rbLVmGPLVY@P!0[(ZY+IUjMHr^7#KdFeuePiTuMd0](MEDl;D!";)M\YHk<O3
%+LF*nfWMIV`&\:hXOZX#m'j+kpH'B=Jko_orQMG[oed=)THm%GS+Kl[AFFZk/U,h7195Zjc`c0\>TF*LR`52^[CiY'GMX#UJ)'K\
%Vm,4(>%A+>g)lA3#=lsE$K%uO%_hmt=uHGsKo:F5VXTA5+71aKIm7^;kAr<@EhWF)nP_j=8sJR^?-tS@+6JIlfA825>B_,ONmt8H
%3is)(q8YOQlIJi3Ac(l;`n?:!o<%]G[:>6MjNjH/m'#T5,6j*o@'%VLXk'N,,n$MtN$S;]fKX[;V"ne:WU*M3?X=i:[m+c$j^5\^
%;R<FieS@'g!Yf&6iooA"_rAeOLYlbr1Zi)I0>%&P6"P1SrQUDHaF&d5ZL/JI3A2rMd<8T@*c;Z_gtj4bS^5!ZpE9%.\[emJ_n@!a
%\NGU'[#`OSkND$+)81*(T=@\g_I2Q$kmVdB!>-0@b2!!gI7Ou0>@5"K"uG='!_4Sh.402IE&VR"lT]gf$,L4MQEY,/>cpA<2@HEu
%T<<qT#aq)+^RNE([@c,V0>-#maBhB\7SbRU/!%.t^:r><POrU2E#dXZP*Z&b>FX37cPtW!IM<X?hEX-0CoQoPot4%`cDu'G>Np)k
%F)X$:O>,RrloAZnj-UX!XQS/imG+2dHSmY']saIr\0TaHmh.r+cUi$AO86,g\(VCZl<BaYGHUPlH^F1%[K)e'OnfWU9Bi);"O3iV
%4gjoY<.ZfBT9PGo]RPC@[JB/M:N3c$'L%dX5D?EkcPb<I];/3Po.@SL*,fIB?5pjFO"W^.:#]DoI)r;UY1h&p?[`@,[a4AQVJqd)
%h1Kd;S@3oX?6*Zc%ou%AF71nSs)n$Mn!PWV=3pm3/`f()-(:Trk,*k.VRXBil&XDReZJSL51Bj5cG,IJl;reBk+ZELqftUKGCF2j
%kOW`%Vq+AoN,s;n*mm"3Xke<:jA7_g%gl,)a:LI^V*@e"5&Y@c8V9i%0>"kol6jn!*^4FXY'f#0EA,&]]?\0;H$9#Cknc_Q(E2].
%;D#6Tq:QQlg0s`Sle-7.>GY.K5?"o]+-k#W<1V6AI;:F@kFOcGfBLU<;_=OWK6$j'"Zj63^ktI<:lRU;"r9ShdFRI/b9PGekDj]b
%mb.d;a3W07-JIp-I&\0s/T`'%h!rSdmUl1L]dRJ&RSQ^7k0CsqYA*\+Lk5q4c/sr^8Ts^qr<Hmh)O6*/rHkGg0ph]^?HbRiYTc^(
%>=V`4l9cGBR_(D2[W:g8BKc2GU)KhBLm=U1`Q#M5b4[5n+$P(?5Kab^]Jquu3lnLOQPoD6f:C.brUO:oC[L/qU"-e^arD<IgEXjc
%fZ>,ibIu+V?9J$dgancG1+M$/r;o#M-pS?Q([DLkj6,m_[I:_sq,^pao\rd?XVsq#B!)[\^[Ki'hYQ:p1-'Tn=`(5["chEf-_qID
%ebm_<L\pQtlM9`-\%A';:Y+B4Fl=BX-e3#aYN>_s7Um1U=anOBDOj#jd-'QsOqsV2hjmVM`Q,Y:N?[9Fr*Y0DR.oI+U%RDO``Z:`
%ob^ML!bI252klc;^&7Gi6PJIq]9ONQbUTU/dTt(,T?p32=Esf$).s[HhTf2PBO)ZuW97h]j6'o'3PN+tJ%<&IN_W+8op*ti(Gm[;
%AQ[Jl'pi^ncFp`W^UFe0d/-J:jNAb_:oMUUe_Ff/?igREQd'p1C"02Dn%mX6EmIA(,*GOQf5n>Afeb/TmWZ^#SpNa5B]ZB^Jc/C+
%f9eA/A<)]=Vt2R.n(is'?sm;mBs0_#Pof.:;or+Dgm&rU>p=)lqg:VT[J[7\/N@No5ccSFg.I`"=M8$&pG&f'8)I[T(%^6T_-?#H
%q=Wo=0n+HcShVa;R@!@WXaK\MCZEU]!fc/a\%&"i\/PdR==Gdbg3ukGns1usd7SS)@q32Ra>V+ogn\sT^>$NeK$Q,OlIicIG$33n
%I[2GOVb9@mZg5h$h)laAD%F=jqH>r&mo8.enh6>qMIP]DmH/a4:dumtFtV+9OM(JM7Id2FFg\aPW-Ukn2Le2/).-6g=(2,mI<<nS
%n9f:1pG@A;>'Do,\mK4'Z_(##rV.*m=!/GG@!P#fp:S3>LW`K&m(7Q"Mu`k?m))F/;3(&0qqkGl(ufk<;Ee:98l,/eoi:Zuqno<B
%NVqJa:,WMkMBm,SST]qK^NM97KB!Qa8j(liIVN"M<VMS+S&8]T9ArqV&QY^r&q6r(PFfNnatul>6XusjaD]d40mE=rO6kWb.JJ8Q
%d/;H@N;30u!Af+\M1?3YB9(j%7j7cbbH2kueG60**d8NmrdIOaijI4[.%>.X,Cs+^=8(&(;>s.(X\>%tX),dYfg0lo&\6.C0D:uj
%:>mVhqZGn^+9aMtZfTEfWu!(L5p*oLXf"m3mhX%fX.M=Ca3>\+S$g+o#K;;LX;/Ht\9LNdZheZ4qX<"I^!Aor665G/^Pj_VppdZX
%/<m9WB(koXa#1K6o6,Cm\6IlSFQre&_WjYS4DPr&Wt>rBI9S]ZXDC,+I_I9pJ,1Hu?(s>e;sg\@.-1aHHK0,GnnIOq*\#0Z?f*03
%]"/e[LAj)TYuRKSYb!r%1c&c;dIDP[jW5RZ(?QaUhb#]AJt@e5Kb28!6FhHP(4&Umeb+]!KE;C>H`I)+O<<td_N'Qs^A[,1*PYn"
%;?Uq<l&CY*PBZt8-.@*fB:hl4Y8WYb9E+%D1F6k1?hhaPNLda!#M/a,GGir[C6@Z+YMZf2OMEU1'UN,U#i<IBH;$2D=cIOT>/0f3
%C=eX5Sh([a0>"$.b:BA]8*rY=)-Pr<miGfmGMa-!hfmD->?E+PHM,.*$h,`hFA_J!Q2gS0gg/ODIk]38D"m=.FSd`P\1TXj>A?'N
%Cb:UY8$;=R@Lqs[16h<!j<\Gdi_-qL:A*IPLYnP7VJI(K.k).Mh,CtoX]3$QXju'u]A)7<J=0GNfZPGpmGq43WLaNmbK:.QTVmjg
%et1gUEr6E\%tFQJT.V%G\b=n)LY'W;lf@Qt?Gh-)]&>]-mc"\i\uE5bU0<;Ri#V0QKm0^jhU3hD/m*S_Js*_)f*!U]JTo\AFsDLq
%FVDAn]'+A;G4rt+hYlsd2mr9;p#28C0.>+mj$?LLjDV4=06Q_jhY.5ccS,54-1==[PK1SlqmsA4,H5&V<R'J'N=P&i[=nFr;EJIH
%r$jRm?Chf`O8ONO_`'0E2+Q+iS_pto)Qn>^1>]Rc,H]^pSPtQ@CSs&GdSmU::`68@h?QHl[F1B'\g^A&8Nmi_fLjjq//LuOl]rH_
%PlLN>k1FC#15&&$e^K6d/LmCr2,_GUBIRXcf?@2jPjMRea,JRd:f*qEY^dSaa=h;4O6'fE2iJC^o!H&SE"\WZ%o-U*"39#&E[7YB
%.E<$Jl$AL_%C5ZJ9>5a@cZ0:P4OMVWa6/eOFreE=OQ`'G`DENqRS<r&(@fBWaY_hM01b,%0YF9OG$QJYb#54T4XC7G^I%#QM7,`=
%9f#[r8[bYleJD%aS@iHfao&#k,n9KcQoGQ:6^0\Z-ZGq-*\SpS9Q!+_@e-9aQs;Km9KYNOP[eIFoFnl$T&1tM,g2gfn66DK9<l,V
%U@Gs.Kga?;b9@uU:0Q7LQ)%\[/"2;APPSue1"*M(fVoiYP+JCegG76T@M-ft`Lu;#AYjP$ikJca9!g03X_Y)^feb9t=um742m"Tb
%7\"PJMG8s^!N9fg:ba3:*7@!6.Rm8B\%m.8L2(c;/</e$W_cc1dWSld)c-=-V0#.#X"'"9['X;*k(OM5$LgM-6<)C1D;%t%Sp"@u
%>&*88>r9Ce\E?d-`/V.$&XO]`oX&D&,,:jqe5Ad]M)#O;Qo%@X)r!oQR%Q`e<O+56Ma\B&Zo#lE$`K..OuF>4bXtY+9S\9p-e9\,
%n^J\AWruCd,]2eEOO@p)+qVpT*1J_slQ*i(!FmB?4;bYD)b^9/BtBjY*9oWlVJ96XT2"3KPDKJuM3FpI/kXPLRmnK:d4hXid0rAW
%)/3Im?"?o?c/iKI?bX\3"&W#jd?pXf1l@fcKZrT@P<rEBO`XV)#DqGB0%s\5o,U-E9T=>?7,8-*9X2.uTNJWm0eJIG#XR!TW+]_/
%8CNPnaY`:aisH.>>JsejW'1AZ<N-P]2'U-D*@(!H"TsW!!8qfX-uqnN,$m/m<c+jb;7`p-,5:qZp.lAjLT,Y3Grhc,rl.i_+CRs_
%VlVUQT._7AVu4US;uL.6_up'^2')m.G)HY.PVjcr+D4@j5h;<!J?1KA!*NgK!OB]J"=Qtq873CpT0S(FNmL*S,)u>k.sOFm63oj4
%*aq?Z/sEL^^h*g`O%"]e:aT9UL.Y'pcB4R\2Iq>L(Q(PFQDutW7:I]#e0Z-)&;K`*^b_7u,#'2o>&7-"643*-_[)A)&d2DN2ERma
%0M>RrUm8#>f-LmW**7rbD,[bL'#)9q=Cae7FhQ3;;fPq6*Rb]kM0[&crNo!,'NGh/.^b0],UbMflDCG!%lK\VUSUtS'qZl]7Y_P*
%#$UUS)?reYc3l"NJ3Yt+.a!8Xa@`Wcr3nVkEAl5c>>^f%@_r8e13j.>`43i5OLi>Z];?3O;]Sa?aI;B2(8ml5fjK]?g2?2N8>_J&
%$)475?8C--32AA!@;Nif0T[)AV-3.9W?bJ30rTM^XH5bYC$:*e-]"Q9quu2'78PG=(<k8N)!#SWMAZU[7#hL7a;>S:`;CS[HkK@g
%ED;QTE$X-V$]md-(m'E0Ys:lkP^k'B:]d$B%`F#I&Q=Mi:B.gejg]k)V>>0L)E7u&!K*n?Mj2)L_r;'*.T0E5/M/X.ln'`lD$AgO
%/4sY3W>iq[gK&t_VG?9TD5%tW-R"nW(kbO/r%BH(p!BsPKbB^\a<J[nE)28W$7'UGd_o-kd=gOlW="FBe"ih)`[5CS?""&$8*JSH
%K\FXB_CJ`Clt_`7Lc0K;!E_3b;IVP-=D1!r@U6tgdN)4#WmM"HdLZr]EJ!5_7(j]_!hY*L/$di%\_OkZB_K*ABumA1N1hB7A1>BG
%0q$2Yai%[>)B=sGA&Ne1^'5X3,1mioeTSiQ(/G0WP&o1Tc!*'s^HhE#;fS?O?_@P?6<5(t,ajWKAsVGR/I!;h#`?n`5:Dg@-jl"b
%-tE`Ohtr5*QFe9ffG^.T6)5(n_(mjNG_M4d'Ug##OA\P367'UTUWLUVcl$>,G,+;j.2Dp=`Y+JNMai5/ZTKZ.LIahTKnMF'00r\<
%l?o<n_I+".PDmjr',qps,]&_ka!A8e_m2ToTo:<iR\FIb,T4i>NhJk!$7M#T6_XnRe5JY)2Ao[TU./6n5X@RX)D&tWAG#C?3f*nd
%2T!sq6M!]BA.4=9\1>RXk!*>a;7Cok\a+^,]#ledWf_IXdM-DuV:$&d_+k9!BdsNMA0h&l--&6GR!P3f$B[%g@e-<<%>tPrF$P1m
%.^D!4;fDnZ9O/65#IFZqGl!#^nMCG1A*Jr=0ojgI3/OarPVo?#:sQS^,I.emNu5h:rTP]q<_/4F6P.#">!uNRlHqg<%W_j!2akFm
%pJRs'MO"Su]PG;iC@`3\B``Ke6&;LuAoE<KY<"-P)Z`N#(m,Z0qU-689n=+V7`9muOc2cQ1jau(KH2"+BTf?1.(0m,+/*pr5[ac5
%h&[cN:qB,Zm2'[Jo07&D8+<BSd9)G6'Fq_8d=OQ/"o#>L2oqt,qcJSl1I@UlT?riH*$oW!Sg*>/Y4dsTi2b5BIa4\"e+7aEF+)eg
%;Q^tHg&dHi#R:0DM\:#6]_r-=?Qf*?JJE(H3"G2\:6+jE%oJ+FfE@b42&m3(d4m/=n2O^l(E<QQKSp&/lWP&;BpMR%9,0+3i=M2\
%#D5>iUS*\TbkVNi$+PhE/er:S(cgT.9@sG2LEjtR$mtiSfIkZc<KAK$+r-]2>k!dk5Z9'+VjK[\kTM1?X2@QCl'U7"eTIfLY*mjW
%IuVV9V3ob=M^&E<,#r;RpKSVI".URUJ;Qc/aM"uX[SPk:P2"p1^^lW3PgOWA@];2&K;.S<.*?R8%QpG?Y,7%djAQWeCkOWEMu<ql
%)4C+cpu7*I+`+r+SI-H07+]M"'saq*]]c5S8"r7U%!&g3#LOcS@%K0k"gL37FiN@5YW3pVYk<9\&;MA0Fl)c^d<oR4QQ?&i.&rtt
%A30G?R,meLQ7Y_W*9!99kWkt0,6s'(Oo/F8Ju_""iNNtDW[mul&9Zg0:t9]N;)'rUFN$P4<K^3ZPc^=i<"d-2`.'k/j\ZjP5VXJt
%0:R\-$]H/D92d25PIB^SaINH"e!P90_"KmVSX_B.TN^D/\iTM2:]kXYkT$Vg4lkk7*EhFe47'@W)G_5\l9+0eX7aOP:[c]dR$o[S
%)GBfZA&d#I9S2g,?f[0"!6?&h"%:Eo."IhmE'RrmJHV)1=BP'R)pYIX6l2$bX_8%C5?d,@F<S3p$el0LZjRDl<J1k"G-FMW>Z)0g
%-!,o8,<!D4%G9XFN2fQk&D"9]YGdf)Fs*qi(dPqU0lAmA2-J=,Jg;Q(Bo?4EVANoUL;\*sL^FoK!!kVCJP511>%.UcZ4T>8N%TpH
%.ZtZU,3lW3>>^'JX(7G&=X-WtQq4QJL+u*r'OGR.[I,fdZEOO#9]VH[0:ui$!^c6sCdh`bWko"=+gEn!ke?%++u2i8[Lb?;Q:X\K
%-G#$/JjPZd`_rVBoE>r6.uG`3\;m3/dTCT+Tdl^k/e`s5YC%&+9N)[O%>-e"?A`Hq=L^([)Intt7Fa4d#E9oC8r6EXR-JEe&&h**
%Xst\G,[)1<i5Vd5&@`uVRYSL<BQ-lXb!U.RjI"#@XKf"MS"o#::L]>8X>pmqO$mdD+Hje`$^4t[`'bo6<<ALT64%0h_O/t$ZGo2.
%)mHEnrg74g#u8KsQ"#ER'pj-do!UjprBjj"_pl5,%YWMWYeS*'fIN`2'*Xk:D&sY]49gY?G].p^,D66o695NVi/4:<A?`nij^WS_
%6Z:XJ:Lh?a+Ja!fbP$,NOr$RD)LtN#7LT<.e.U`c;D"[M.VI7219/_BRmZ3gecOen%Wq1EQ\gK<'BGPY"B`Y'.!!>e.9[[SX#I:Q
%X=Dr^,&uLlnS]ulP;8'@6n/WKN_j"MLmEsTJnh27@QMcb7`n%?!Qcmopk(R-"j;4H8ZipS=-u\UGSh4X;h>pM0d(3J*5^=#-t5:b
%UU`1Z0q]Yahlne;d%d84JNfBT7EL=),!qle(R-d02^iHHISeV**9iH!42$dD.F*:/VNFo(+.IhP<=U7R:K')gI_q$J?,Zh"?.0@H
%f4^2Qc&fdD7<XJ+8H_\J)t"LV;Z,f^.XWFV:;bIX?9rCdg<nUU$KJ,;W.5_lgFm34F2LC[(^D87.<tnZMT#b?67b;#"(Q?1T/j:c
%]2^OW_.GnT5T\0j&_pga`e$11\WSLb.[+i-M%[tf"r3++l[WZJA>`V4cX'0D-)clK2Y]Z[h'#!+'bj*69Q,UcJORXq<g_%uNF1$t
%pP+RP&0?MS.CnAR4G^l[XF\@N"GA0=05f^T-EM6m,\VrGjjOdIFP&!!aZ?iK?=OqDNo>eO]qI.ViUD,T0sU2!J6!?W4PU[=/nBe-
%?>*/O!scHj#Vj9')U<*.n;M<Q<d:@AJutALQ'(EZiZ`n;87l76SACL(3u!up&W5nK!P4u/6XcD8-B-JJ3->^/EM-7#-%j''.F`KI
%ncL(.7AQ7I!7-*Q@&%]LaO"C$nL9FI.eOOgotk7LoRRg4am`BR%C^Eq0!`R>'+\9(K0H`r?Ya)1+d\"rm"c[lY%7oR<VX?Koppl6
%/Cr!eLR5)"CfaA?PDlM?=#'BQgCM,"ECL3^7?aJ-LC>a:%)bnKL`\%F@u.h7\coU=_')<MUsZF"UF_"]\cGlmLtHMEJq?^W+OEqo
%[=d7$'<qq9>\1*"Z?:;WYTPA78>'*e'M]\1WPI%Pn<te`fWGLSmc*^X&]l]73O6G5k!;;?!X-S+s)!R*)Ft3%*Ze#e/>&S\\J,2.
%RA()Z,TIAe/'_a8j1i]JM^^FP_um?4"i2S]4qCoZ0U8hEQtpe"6L`Oo`n&Xok]qhBV5B/A<%M;[<6*F1D!?eSn!#W*`f$@lF<7k^
%9Wa)4)c,qADN6]F07n>OFC0\,Vq6CYMlH`t)@$;)0-1<?B06mt4S@rY@.)<OJh\m5;/)709l.Xcaah3:2I^ogfEhng#A5h4%#D`h
%-okmrLkb2pY1Vi)_lA'g$Is/+[[hNh&?uRgK^F&>\G_$!g2P;E7O41$UuEE_(:G?RL'XJ$eAc%I?ee4[(tV0Oq8qW,A@;lb,1U\#
%@VRka!=DOkrX(-IBWuJG$K5.[:N]+E^`h6=MPB_A;^Lg:-@fp$NC<nX]B<,&?5VPK&1V^Fq81[d(!ksO/13c[iZK#!1sIm<O^YR%
%@C-H*9sYDX2UN_lc_m_!aQG$TC>aFEcol4;eS-6+-rst@jprBTgKl?t2*dktnH'W+<XU.'OL+'dljkNPmk.Fm)i0l:'Ps:^"#%nD
%,(.E38_]_nD(Mb*H>3EbDJT>j#iL4O%s$Uo`<.,8+if2*`:d;,gERIFM:T[s,*=Sa(l8u^3,g-`8cY#VXITbk@eh,^.#EIG**AZq
%Z^@$Z\Q$KJ4%jC2Zq,=aN<_rd'PoSdJ2a+2;mEJ3I5D7^0No5"X>i,6dU5)J\4jfAcnIg+M94b5TT0s]i)U_q+\i7TlbkQ0M@B[#
%hF(/U8"?(\LH&t[pf+GNK<KY^Rc'EhAPF^L32@OabVQ41604:T=Q*7o9MtsU]YP>k@GCuC*^>3f0f^^Aa2d0gco3"Is+dL+8^R:I
%;FnI8ntGnWlJSm=kW@/h`!R\VhLV<Z`E)q+[=F&m!<F@)Ogoqh6jUW;q!\d>ErgtH6<DAa!KdJbI)D^\;F'a;o-;YM$#uV3UNn=;
%a4@JE_?k#L$/S"=G6Oe/aDZ5uc=$*q/uK0=6'OJX(GIkfie&&&Ssg=%&M=PHH3;grcm'aLEN5?P6li-B9a$pDLpKr2p8!?uQnGOm
%:d#(DIg6<5('B-VEQEtoNfZa/g_DY<064&sRu4YaK7PK(A-.X&fPX5gK[n"HAmmHKP0ooS/&b"!EROpX%'b8AKX$.<,'Mr)=q4dV
%_%[,4.'-Vh93+oIi<jQ1M4,aW)4i>R2A*h>L)t:$@E[)s5V6qT"G1;q1?sl'CGRB\-Ud7kBip!4]H^;FbCMt']9.^1!_QU3M'Nl#
%]uaM]P>!..EEGV-FN^GHiTA.1LlArTT_Xn6d6u.aLh'Y(*YD5Mim7]'#X<5U8s'<&r+K2oQlm9LrkQN0$^[ttXqm^=X0h0nLJK.j
%B:CS+.?M\9dClM5n1Yjpe/2@5<l"S)6r7B-$F7\!'mOmV[Dg<-7pcNcj(Sp5N2\UBj'F:=nM]=ul\ubZ!R9jV>>Bhk97')%5*#VM
%\r!7LF+0:=bYGG'"ll?KC_`&9CQT?%K7U"8;<H<>W[hgT@7XAUlFK,gLu[HK'd_jILC"XH00UM7-KN**YR"f!9!Lc$+=u-]mR>tG
%lW<OR]K&qJe0b<FKDtYa#TLGIq\bS:jOMV`]S$-@&uXe=e7An]`<#t;\LPnSo^Xk3RuXfV@0_%8hT"RC+Ra4G1p;WaE-Q:;R&KPs
%l]A((oJ.1aYU`@60MXEW1M#K/-c`i_'A#Z<A8so%j'A'a@`'JZqLT.`MM%06.O<8i&Ik)b#XQMu<d]Cu:;]O1kHfdZml<=#b0Skp
%]IS>V8m1Mi+V-.kj=QG*UKGP_(`[P$"P!"MA$3TECjUA/iFXMuEhIY?2W6tk$"UNG^6djn<FQM2R>>tC9UJ0&d4DX)q(Y,0'[P#Y
%fmsTr&K>RO,<SKQD2Jl9-l*;NnTG>V/[!r,]OR/X=fPuL1<b)<dDQ%hD!nYF&m8I9<u+;%*>`qq.XpH<"Bo'GiBeYm9q8i6DK3ig
%'M9%.K8K10jtrgs3]Yh8n:aE+BGqYC%<bE%VPpLR'_!hrgRQ6a`S)=BXlF""gt^6-SUhu4FmR%d<6*=`R\mUQhpJ^l*jJG[(!17s
%I3siHEoE*WZ&'#[h(hDSJooLuXk]:DZ$Fne:l?a!DKupao"\0Nl?5]4'V)@>$4^HoU=kPs0t`IBE1]BP1`U-n5QI]25U#Q!9Ml6L
%,d9.e+Jp)$LAIa6\;N7&W.d1=qd>f*8'04o4EAHhH"!tsdX&19/=,/15ED`<,%hnO(Tr0;m70t4l+]2u)@HSa&a_OpJ=J>k5\,k.
%"6).`/0mL3Qrnm?n^%9!*tJnEpJ`eQ!/-UOKo@@.1USS-:pFEGB6/1`7$PteDG8oX9DZM,@Onm"6=;)BpHnD8UH6tEE;7Ic+4(]L
%G]</q1AU&U>eOkI1Sn^R=q+rINcu)"j+nY`D7H-n/[3%!JAq&'&94$>.+jR""B?6a$%j9AiHX)hYU"!lF1^`Y;rB:fEa"rnES@.F
%\qnR>/"F)T!*rQUE%Mjn%.EQhGjgPmM8V!W##hahWemdJLreb+Lh>>%/Z^'C]Q;a;>Q_s\qDSQ#$`efT+nQ,1cjHM'_\&b*SG#gU
%;DlWBi\k",Yshe":1.O$Jt]&Y',%LsTOION&A<c]OmB10m1:EEGB\>E77*GeQ5$1][d/5uopQrk7ZlWKp*0us*4U"Y5Y#'3&dNTu
%'HIR+&n>HLNKH1s,^L@:N4c=5JKn]b"\9itA4R?t,X;YBA&/d5`WN(US`R7A=<[^%G=l.t4^t;+Y7'mG*+NWi@DKiJPaAR%Z>o%Q
%QI!s&H7n?'NcnV.*akd1eLVNJMi5dgn(>11IH7togM4CE1]2manA98qObFh3\,`'^.,I^:g6NQr^_gDe^t+F(h&d''L?jXI/>O^Q
%?hDXQ.hD@C#.GKZAZ+2<&rWIC9#!>:'iFp39LX<gZ#qCkGmCO)rr!RARPX^B"(FIS;09(RO>"<@BWd8oNbiX^dn%eN&N=>&8NaEK
%,J&7IU'noK0SU_81]rA>g3c007&\[GMMhAu!JNN"nm,\4&P:!?_-'#78L5@S8Y7772?gkn:S9HV9i]F5)Z%Gfb8-ca"/+C9n_Yf6
%&hSQ`KUm-X)n0F8pL`r,)(qZ%QEGuWb335SSV#[)51.1^/TDN0=&__Ie//aB?F5PL5uADi.<333I0(=eRGrg^0Ted^$6n4I^c)IO
%4D&RSR<ZMG>q]&r`:u=EbW1hSesK6S*60]c"gR%6$(Beo;5BV5b#n.c9CEHa_Gq(R=h#=ZbDRNt3mPe<3MT)t=)R7Z,%4?B9_QWr
%9nhthkQcq61^#gokQo6a[=kj*eIuJQW@;0)34e\=,dt-Xep.$Xc&J\Wa>p1T63-khVN9s*NM'%I3=ekolOL5?d[p8@.E3l=4O4!\
%EPMa-=1qRd!*r"DYhdZJ,4)_Vc.bF5JP[#,j.iQnq[ooc,cQ$:NtW3Jrp;QC"ng>f,;aH0GRI&E19L_!W$u0R5/j!T772L_0)*`]
%O&(aWg94ojGB-&r2Y9H#6Wr/:T8'o'R6gNZ2%G8$D32^KlBFsX#X#n7mVQc0&*;bEY9,j7s/&/,V,a+U6DB=':m'AtfWI3'M@J`r
%!7ep)2E'If:+!P)?FgE:_cq,#T,,]jOC"eAQes]YF*Xq6'K.GGO4_jugT);X0n;\?)u_cVW@hFaMg+tX3:d1;2/rG.5_05OBOXJ+
%R#KasfmH9-`o.:l8t;IF[k1hN2S59)r71B+q/L9?"tSJKY9JWAU%#+Z(u7NQJP?,$!P9*h6kh.Q]S,D+AQkB=Tcg,0MtTT&l$,^L
%n1=p>W$kT^)o"cZIS1KGC)Hq!934Nb>eC^X02LVL%_138eY*:WQB!cAMD.CT*"1_91d26n;J[&rq:/R-V')#\,!Nr3aD#=HE6(=E
%?(CU6U5j;R(^cc$Gf-$%EQAb,c.9P3(/A:W7b`9XS&VYW:4Zg,Wn?(k+9Vq,VCQ*dXJ7105"/KLS['#oOc.0*0FaVBX"hT3JI&,t
%S(q6pGaB4A(t"^Zq1[^AU#AZqV/l+ODVZgI2oXTg9[ri;UE39/FJ"0\'bo2@4c1[>?Ni)`'<Pn]V:gVbk(j@ERSJ\@%>[niTKA0Y
%4bc`?'o^b-B^c9"n>8n,Tc,"!:T<rM26PL<.kZS5'E6##I**:-pF0l_mAI%*ocH>VM#`o/@q#FLNJdkZ)@m'@c<*VfXRWLp3Feca
%ZGscaW(]<AR+jK/YhRYM*L=eo'd>oQI"GWu;B--H3=-Bk'e\aWE<o?OJe0EdUbBS%[f#/J.ZVIZpW4)RE3gm5?);1%+j![Yk"'%3
%%=bD=gB@9U5eKDpOPo>gGLJ"d81)?liYhpK%o4!9(OcAs1trY3B0)D'?sRhi!>JHKrfZ8cDsILdFBA+]if3IH[0<bM!_'aH:r?Te
%gD(TCmj1lC/M;b]*7.XS_Aa!r<,XLGO8"O>(D+Qj?lTcd3K\Pb.FoeN`\']mbEH9?"5fTS.;>9Tb;CDp[`uof*#c'#VADEa.Ys+0
%XcmHTk9C\T'DXd"D?oK8.\dAYH1-hbA)e<)Gb[:eRY_RaEK(2..0H:p0(D3sI#Ar\k;].q!!P<hLcc)ei7#Y2*TW-84(=)-JNScD
%ZEV>>4=ihEQtRc!)[h^g2&7AZUD,&3KG(3dLEIWj+_N?:R`R%b$WZ=n.TEZ.%Vs0CrKi9!PVhpa`OhgD6ek>-@Pn-);Y]q@e8rkK
%(H7FI9AdQV'FNk6RO0XN`doJl<R653(*Z'g=8-M4Dj)JDOZ3H^-1oV/PIM*U)h8%@N]8`[><O<>OTMAeF`Dm96M?_*AHBsin(o,L
%h@6V1%q?oanX)m.A$T%OpgYulNK)!,=ks6%kIt8=8O?Mn0030.d`&78Oms&SMA.U-:cDAZ1BR7Q@9Ye$nHP45DNZ3N[4$Hjbgs]o
%:;`e-MI.S`#"6pIamk;;Cg\@$7o3\\5t8Ut!ASE'?drI*bJPr<*QEpaGtME$EgrHO^tl[Yq16GT0fee8h;@P0\7:PFBSsucY!SS7
%h0%A:BCQ[2$EN/13pbb^2j_C!#Uj8(-I+;f23LYRlN_)a$]FR)6&!As&@"k92`:k/BfPj&fo[0T8m.Z8kCs/YTKdls"!&@29LH<$
%;Q&W/35$)c'0',5P8E66E"$X>`#ZS%HQQ(f@7MBSs!gVt&R+aC3oo&!+R*]`n\n&/)b@k./R7bXYcc9@.5bOqkUCMhP+jbO[1nrV
%(2h[>X6Ot+;GQ$2k@!g_K6pulU#E4`/Udan)6,CN_doVs^7Zk^>OF'/jYW'RC/f?G?9\fZU@;?4'3egXJ1Q.hMLch3FbZAh+r"jg
%'s#"k&\BJL7HY&g/=[X1%.@JNI+&j;(*$-f_%lLGPV<t]/;SYh5iK2^=M1>*@tLEF&fL,1Z#Q$@BJqK1Z*5n6<07O=Tk:QWZDct>
%#6J&E`ITBG\(.fqWo=T'VX*6_&t+MafJMErKGE1Eit4l`,+3S>\C(f`+b'N:l\gn1@)moZGjd!\;&9rs_D_RN06@8L?i5GDD>4\k
%lt)Kr.thkU#SR6_TGY*].-sTWU>_=r;bY6TLohQ+W6qgXa1G/<&N0,+hr$s(VI9EkcG*8p.pob>&>5-MoMZ1MU\GXPi'%6EAE43L
%GR(U2p,'9ARD>@\F>KSS"\NQj&Kul9VW/S64%f&9n>95RL2)+#4Jg>]ld4X)]sq#pQJRO(l=+HkAW<\da;IqR@C*o#IrPir$j=Aq
%((14`69HS%+DXXjn1MG4K*:2rO'#NB?Q'OZ%E+NcZ1($2/$TXomdBaZ7anT)MQ,6[-LRVDSe>7Y[N"'t/ZO"hUkUD9rC](gM4oY?
%RUO9fYh4/T=41g\>$TCJ;K)U;>-?R=c2`m`4qH6As3KO@.nPaG9=qA_b*ZJrN"I04!ck=nYLuGkPhb9urYM2ROI9+:45GbLg?fn"
%4*GG@I0_/+!ffMg_IG+h>U:,e%(Jm%Tm5Y8"_ll6hc@O"e-ah[kp(0)?#b<<-V-cl4FIH'fn=1mjQ=;Dc4W"l;$g!D8$qjNS;&@:
%Lgi7)GX#3D_)*q3pY;S2a,WmO\^JYgP?uC\)+Sf`?j+[V_)#W?-6O8AC(S&]MR!<f;\4A.0.s\Ri5u2(M-lK/<28FA8,1o,.9/p3
%,-$=_J[!&jL\G4t$>"80nGtRlbU@SqMJU^i&*u^^HRR^ca:_Ca&n5?RjEi(Xk^a+*lQ"t7lWA=MKm-WL(R`>0o*Y6iD28#mm>sap
%ncQ)bO]sFm''Ap4-b8ls&$V3MquL-0:Lo0IBXu2Y5I\M5;M-\W#tA^eV_rc%HSOhSP>7j(?03*Os"s+8-=OCX?G3^97=cJ?qa`%H
%A0nOE;;FZ!F#iLhd,EA\^N1IdHXm\\,.^i[chTiC(&bk0Jj-,5>Jl+ji[V[I7OkH,[.n2(s!4#6npV\<mh=#@SouIM@Wu#@I%`nZ
%A[g*a<dA!8eGg83?PNkc^SF0.A>n4QfN_YH?G3j@5<[t/@+*MPFnYP=O^6V8jEJ4n;J9c^h/7GJORr3Wjoh'.TLdf7q+c3a2D6$4
%mp1b9qKT*rAb"ij)h!+IBC>/"I;jtUfF'5?C]+74Y4Vp]C8ijM=5Og.CkODS2:2`eph$aHq$q4ukTKI%K`+!O#POmAk<>W[arNC6
%YD0J[03#h(0Q!S.bXG84H8m%q"1Soi1-5C4r\F&KoUnRn*O8%T<'\)D4S6VU2p0"[$EC&=C7dWsYj]VWO2t06k<9)!:F(!l$O3SD
%7SlG0BFZ&oO>k@Cbg2OA/t6[TfV.V+2rsB30//OFdB*YH43_nd)A'%.Idf[;8(KCp]AHn;eB-'(3)WW<@8&!m+jK`kUuBr#cq$q3
%F)[.l'5V5qEDJVdOr/BREZ7Vpc\ocDP+fA.pu>bL[/#/]o\U5Fd`6XeKi-C4Cpq$*Vq[mB3-IO02>hQ^(g`RWemA;/;[b;''q-c"
%(8(0"ba3"R0Oq2EYr$)iW*>`K.%W!8)iLOTbaeJ'+6Up>3+e61Q2-&PZSmG@l=O`?rS3g1e8FK+WluLZDhQtqH\Z#s("_qhGQR=0
%2nnR2L_b1DV#-4/ejDOeLCd&jFee2Hq`D_,n\l+^n$'"a0M[@WPpCbO@rD#[2-/"83.Y1)rNI[EeVC_bV\?^in$r<`msKE/@o&qM
%T60B\oX0]jhE5s5dMcnlCH7H:h>7\1WIrI)%pePnZ^":7dY"0ppcIle:11u85c[Y.HNtVcc;ZAHLYYCqcpc0)3J!(6LD[]mpL9B@
%M)'F;\6eg815cWk.1i%_iiq-s90S>K:C^kI"=Jo%]bf)n7SGI/S(Z"jaBO<qTEfFe.Vr*gq!Qk?,>-X$4@,f%ee`\A8!-TKGh7_G
%8+%MbXnKAV,P.F#s#WbH&;a%P(ZP$AT!WUL\/CF,(D(p7mlt_lD6DqCK`@k%*]Y.),F$)9pdtSWiuqkfd&+k1[fS'?pZQU.SY;Uo
%?&a:!2L-3XXZ#OKc*M>qks2IbIPFm`\Y2IJp!$JY$E)!rOqn-sKsFD#&`6+,2on[DkTK]GJqCU8fjt+:!&>5g<FS%2:*-/7P!TA>
%Zg(8G'j6&0`K<F-%Q0?\G<`om`.QY"ph<!]3)rK/`OAI0IokXkMsQFFq1Jq>nR)EXe.Xh]&n5RN8&HQ6#(0g$%C-U+Qh%Sq&f_6j
%WdT%6ZKs#C-\LZrm$_%d&QQF.@K([YCr3NHrXOBkY1%E&[YI'"b']78MNo&ts7*.2h@AJqB>&Na9Cq"?lrI`4Q&o)0^8k<dc$l_h
%/^/_1pb+?%qM^=P5gr.;T]mX20]X%<i2=iHUr2q)*E/ZL%.&_Gf1\4XOinQi8r&.kQI%;7-^PAjV^8&V=hWX**]So1Zdd$1%$"NP
%c)O9H"EskrFr?5!Y)oXBP=X>VU`mf%2jBj4?N0t6b<Mo;j;\IWg!Zssn%KMX&V,o,]7B:)8h::F;e@/;f=G`&L#7L2k\OrtM.4c,
%C,XlDfl5!6@0\;_1puXWIAGRe%K4^,aXbR1k;]<=jaPJMieH_D/-_4L!2VL+3*\gmE'LL[RH-NH=pYX;q?^Fp$6d]bhgJX"S<6Xb
%O=W^AH1N.Y;8[mn8kb_)=J^$<Jh4(;#<=TINd"$)]tIRSgE>\)](rN#gh,6k7frIeJ:sh"_tpW-2RH_aS#C6)3oU!RIJfqCO$sEH
%dk6bZ]]]D+=j22KLtqV-W5oeS!#`>SdLmR'cMM0>qQJsi&p^Sb'dif\+.\hb6(Z-P\s2Qufp0Hi&scO&qp]oARhMY"&bjPU+ef/N
%XI3dL=%KL4oF;8N;J[OU9mk^/<$(,Q-j$5+=p]1eV)PaPP)9Qck[_Nl&uiolX)t6Ik+W*&nsBOhM*4c(\VE-AbkQd&h$LaHTqo^\
%G,[Y#/"I$RY''&[0e[T86n'EB(?5qm%.`Y$59bb@1,cg#a='@J?P:Wce-NdBZ,.qWb#'9US=bIr<4IS-I2m0%6Z@*+?9O1H\YM7M
%'o/S@(W*f5mU/E5m`?B(Cibd<hn5T6HEr$Gds@$AGBBI-88]FDeBg`'!Nap/H4p&7o,3EX#^+>4PJ!J(#))V3^>Sb+I[O!?QPDsT
%B>#11]@*;[i0>@kdBqE$4RHU]rqXojX]'.*J%s_<f7KW"KDLP+R=FXU?6T/X0UW.?ZneO"1s)=C^,#%0Dc+t,ELQ)9$0ms0N+?u`
%P?._2%O#Jj%BJ&<FG@8-^-YSKBh554'GLluj"_cq&=rp<^$.7*6*&R$WT0k]#H;-(*6j;0,&c>5X.VdWp,It[M\3i3k?.KK%DOj=
%rst6N['aa^Ld14O:gRMn;/[;;qU@^#Q!X-,A>NZ5ClH-aXg^UQ*YMT0R14T9ogJR#,Mj=4^E#iB0uWQ"n&Ojm1[S%[r*+\NInTZQ
%[BYE`gsM.n=d,So/8P<CPN]))]5#pP%fA6KU^7apS,ll`@Np/77[1$MG&u1oLe]'PR0'_Kg[,,=:f#BK]m9QOpZ>nQM>;j?LPW6u
%q`Beuq0Q7g;FN7(J:T`.miQmm_U2h^?\jL,h5MFD(^N6;Nr#Kj5'FW4]T@':h\J"XQYP!%X1IQ$_i`S6_YaI(aMB2Rk4?UL5iAkp
%5Au_FWbQ(BE/G3CO"^51!dG:O^t,@qR'mYQ\U0o]$NMAfLc8C`OKoJ*?Wp.-3D-kb=[A=AK_$33JkiZd]/>Q?JH1PVejuF&<?^X+
%:/i\B-_Q0!3Pi.jh;FCPT+--]66ph%"DJeuHYR32T(Q>.8CUq33C]m!&ZAS`F6tc(SAhW@>D@Zc#M5mtH<pjh)'F4M"!]+^2Zijt
%i-El:(\#$iMA`$+8^\mYX+*';WW?3gN9%3VA2^u6%N%_mVt]3DGJerYQu`3j!a^)g4QD!C(RT`=CKs-J75jYhYeUM#\LoU'CjK/B
%_<]JU/)2e00Cj]fQRjjY/ER>qi0I%&i200F5gr/VE7=8rKJ.\C,s926GiIUj:ont5b+3P.jrSk/)Ct?E@u57eLepJi,Q>1\bb?b*
%/jj\0D)^K9287n</XTVogjC3<Qtp@XU.!3Fq+TI7@q/Hp4LLHH`&O(&QYGH`960AJ#>O:>>Z4X:<Zn#8@X22*SWrF1JL*d8@PsC6
%,LB&6,PY4[3+@AL26\MC6T"C#lar(:,7j,9>d$l;G3o%E)V'2>i"68"^^iTs_%6G9L5L3g7a]V\mraEnS2Ca9:c2&0E(%B3W.@>]
%;$64u;$0Q%;8]is%A1fZ*)L+:"#4c;.Sr2jL]IN^9mBRr`!j2&l<X(Gi<>+\#s@!\:@00g;8Vd/ne"9024JrGR.&Pq'.<-4$"`kW
%oqVEIB'3OIH/f2a/OVe"\-u0C&.3iQ91lf?pKI0"hW46ZI<3`aIZ/Nf4G7N6c?jfag>1*GQSSr.Xnbmsqnj$:g\b(#(,g/b`mZ)-
%@mp[BkCasP-Nrls")IOV2,q8UFHo,pkuo!o6[O<DbAQ6=hHr0&\*AVQ.7u85blp7L$uD?)d2a+d4V/qVLiem=*$\#i&C#mVPOG\>
%Qn9m9F5qU2ps(>;J&DtG7T*QI<bRAVMaZZ<IYFdC%%87cWs=:>LZp;TR2*RGK4]\?_OamRXfuG=BIaL[f87Z[=/a:oQcL[d?ruPB
%Sp,n(lr75a0K8q2&rR.4:Lh+XM9$[!]L6?2?":!#K[d4#6V.^KOHB2djGeXF34F!0*R\I=<t['jpPEr`%3N)tEqrbT/"_A@&slTc
%'EPS',M,W`n$0:T4j?Qun!@T0TjBISmIB7*3"b-;'>de]WUXA;&gijOX_-XY]H\uAH#DI^^43ufm`)*9<0+EInUJuXL6jsNa6QB(
%C?Adc<"o3s\,PW>GdUTp]V5@s'/!6:S.gNa10Zf"G7fKTBHTlG\lmI5*_Vp'NfosdV!V0K$uSjo(iEo20-<r>-:tc\Qbh::Wu>u6
%+Q>u;H%]:1F'7b<ZO0D/<^EMi;WX3KZ=IFlf"5'hm*/=uLm5\N4hj9]m\pnl`H#+d.3II:'9BYpFskC?CE6"W`EJUkcEZ$$IZ(%?
%r@-(&g4&0L(UV<]iKW3PH\b432UYTSO@TfVQ1-8F@HW"1Y"lbAFNPS.DNW<3U^M7pd8'4C8i<DSk0L#AqHN0^(4hs=kI?^t=thdV
%bTA,_inKX\O[:-uO0U3+$$4S@ilS$n/5laAZH!dZbTj9gh._,-6`p3jd\S,/]$dRDA6nKOTDjM%FKM^0Ec`[JgO:rWLcqkUjEN,S
%M[@`%4Ur_]fG#b4.sHbLI<!.mAHG,6Va*/_VLm;E&YRBP4!6TgID.[*>5mZ;+?8QKL]GL-L#=MU_%UDhk)<HrY8Kfg**Ao_:s6iN
%5uTDeLm0NR9\t&3/^6=^`,ME'`)G#q\kET@4fS(!ZXR(;pQl#!]t'h8M"dQ<fXgNXh6m4A&Z.:rHdgXm,G3"*28EWU7FoQsm2iYb
%g+FY@ft?4^@B@73:XuQRXh?7`_+[^#-'3!r5WW[6]423?dMg"ahOQfV:_'l^*]&Mt+"lYu)G1(a2/0(62'c6W)TJFa5%ob,$C2C)
%JuY2IKoZShV1BVkEZj'RW*puMeJL<roA:E+-irDM#\b_?WVL;;pXfVVI^if\EEO\]0q,b'dOE-O[r[</B&L0"^\]4[P/)6c_=^%t
%)<r#u[!,lP&ZV`IZ'Uc4Pr2X'U,*R\8s(<GQuYF-$.i)s0YG=,DS!aicLtRR""t08HpGkD7W?fk:8$\]/,28/GejGK9?c<_H\i]s
%FGV#O]#5+s\AAepq-B$MAP4R?dl!`lT0D5.^W*-fN+Zj,eoJ_U(&]OT,=iGG+<-*rNC396)*8)en0oVj;]He]IO'f/"Y#e'80XNK
%j>T4^,$%Z]F9(i"0a[AMAqhCJE$C*$#bl58AhY4@%S6*(B8=2+47kbF(Go!q4dp?-d7dE+fq-BlJAVfml+-61,UqT;h+d]\gkUXD
%Be_<D9c3@Pb]"9.4>_+i>EA9'pK[<$1*daJBEjc=@b?IFE>%:C1"=*>8m_JFA?Zs-*5it'W7=gGSLn$DbnI4R0m8uoHhc#h_FUJ1
%mgSa(f]XG@g-J<.`NTS1\_90eEL\;:/0^@IWBuD(NeTKe+MLdqfE:?7-2D5u,rOa/+LT)tRZlW`l8.^m*.q:K#U#O%:17m.?W&$e
%\p6Ac8o/Z%85ia`=5JrW^BXWO0+&>K&^p=9kBbpamrYA]_b+\/d4bc&Z=p)i"C![;8.kfE?ZlNskRYbqS:=X.,H#DaR'K(EPV/``
%'9mi/7/Mia3Q98D2+Zj`gJdY@jcsG\'K>qT"[BiVeh_XCb-aW61gQlTco-<CUeWH&FddV1@Xa]C_MD?gW\@p`a=?PD'tO`6AqdJ+
%N`i$V0On-Sb=u&O/%dO='3@<`ldTK1iY$OIkmu.-0DkhPZUW1PKt6FTM>[TQ[@"W;/QWQgZU/ItSYqi4$J'OC^/)B;/LG6,R4Xct
%E4N#J]0d14$b7ViSa5]%Ra]B_O^8XN8?T3&m#:;.3ufUQVXWK*fpUpT)jg$CkP"i$[APMJmcj`A:HuMNB-(hOm8(V-4_hO=V*6bN
%0(l7#Vb@!b^Mp>E,+E(:On6lt7(#D3E$/?7/mX[Yl**l7B_1,:9$nu-YYiDhEsAEU_:b4hJ0@_"'.bj[`VWjl;1L'qqj@l/]lXse
%V2tgqZK?JX?:?rTbZ2X-UW;,F4L%'fRS'p_JumF3.9GnD'1_b,!^F?T-_>'9m7cH'mW8s"8r&RQ\CdX\,.Q.%5NS;67@gZ*42DQd
%]5IoF1^<T0:6$C-"+f\ECWhgb\KrK"Sc`lShB"hiKg=g]i]9@Yo2`8r/nE[aVkKS(SX74)MH%W,+>BT9Rj@IXG((V1os0W>CBu[(
%/AL!`h@cEn<;dqZo>`MFDto`U>#5%En5><&hA6!QVMi.Q$<mo:qX^=o+e9`k3)s1OObN5=Gj6<JFq`")aSdIm$ZL,7blYU%[2FiP
%RKM8F2o2&6D^t(3B9gUJZG.!H5QN'+LS=06[W&a`5t](N:r'.mjWR2C@X$oiI:N\+pW[\CK:oP]:bc)OnfTArl68rB*&-7I^"oN[
%^pF+C;__ttDtS?MjXu(ZAu(0C4.s'3$0;5U%8-it95K[qhOHF%XY,G#[+-cab7+qgk4;Lp,c4AU*1UI[ou.=pE^.D*]^\+D#pE?S
%7#_<-[/&Llm?,1E]1[j`^kUq'7\PLEf)kYL%+r*'AC5MO4`n;[R:$F9&4^&%6tI]1Z9J2j=$52.KL'"(&%EjF-%s_*6:N()Vi6AZ
%DY$4P.9;DsQjZd.nA&Pj!nmHj2UlnWTPD:Q1-lC7_]8N%;?\!G)0Ql7*-!q"kp,c209_D4TYk">1j&Li[06b3N>!IJPl;NNmKB'G
%9@nuDP"+_3k]r\@5Jt=g1F`ZTKacaYM%3d_D1N6LrjP3#X:C/ai2/$35g)T*n3XWO%:76oaFT(]o\c$."Q?4N']Go^,iPUb5SLkN
%M'tL-Q`/nnqJ;)8:rN7$Ap$LEp,UomE1)k0P5r"*1;Xk4m%$QP0qZmCGQG52fppYZh:%>m^ZD;HBYn3VU59T$Gm#erWe<Qu9ZTOo
%e\%#flK/@=;8j,i>]t`)?FJY4#E%_0AiGMV@WmYQTM.(.+8n*i:W#I;^QUS"%rkH'/'(<h6$`Je)uL97S<bT,m,8/ECS6DV^i;f&
%M&D2BlEJ$#b^]d4@W3,bb%Ck_E$Bec%=.OjOOm=IYas74g_1iZo4YlI,C#p?I0#RQ_U(#V>_]^eM!8Y6a5Aco[M6Y9L4?JtaQA?8
%%EUF\9jA3T,78V#6?`%kE%%TF3a*Z$SS#d8?9^hiPHFR.flOR%]E!ac@OH3<<q>m<T&PRB#!^1KT6SoKm<gM^o[%LL?isBlG)FXC
%&1?*S]B3IrhO]%%+uN947L5Rn`:5J`&RLS*gR$gXZ4$$Qqn,:2<p%u#_c#2(8AJr4:*b#nl;NZgFs=PgjV1RMC2<qZF)as._mJ';
%r*+2R%nuI+*,RiK-gt+QpaJ,4$OgT6Aqd"sOBH"k#=IXoGq(A5f9n,TQj'W"4(a&G_N7pZX0?,8(b7/*f/_"`QWPaZGD3N]FG[Oj
%MjClr9n.],ikk0UQSm<Z(sG]]kHM_:aVJDCl5&-[q:WL8(.gMG6YE5hh7@lIBR.f6-fQ70,CQmlEH(#g%L,fupCqh,AgUF0@6P\O
%jFfCbZWeicC:B<rpLljDLIu[/Q3#ZrmBW/BNqEZ-:A,5?BO0okE]8Gp^X#$nHIeK2ba%V'r9@18RPG\je5*^)WW0LbXiL%8`?VNB
%5JreUj]$PM,"<I_aJ$Li5cN%h80Q]hj#WNK-U/lK&C(d,XC3>onm";#1@a"^J4i@0#(_;)b:,GtQ\IIR'J@c[&`R*<$,Jb&Hd5c\
%;GmotWnjAPD`g1NYQ?29,tP0P'VT'ul:6>O_bWDUHJ4o'?L?*Hs&e^;flX>pH&KXZr@*f<W-2c1a%G2n(*ru2-?r^hLt=Lu1:pF(
%<=Mo@HCLCMWctGBP%0dkbO-F:a;VU2WpqBb+HjQRiAuZ_P;K2I)E"Ts^IEf./'N^$3@U4"^Y%1+5.Oj]D]c-I^iMqV*p$O)>9SY&
%V#&]l09:&HRE&Q.qpY%,O"rd4qimt9]uorLp$5D'b[pTjbiM1bF4DujTXQh+CqN#Rd4on?3Aj.WFur?2^n,C.RI?#4QYJE/2DXk6
%d<E498&X,!Y;T'q8V+FlpNG3-9rabUXnaOtE0/X[RWK80X"[P!VeW8b*YB!H>BNJ2C+)&9>E:Eo`#i5OR346(0IS./?<\<KgL7pW
%q/'V.o/''nSHaqpKb9`!<kpaY*4IM\d%dW(I*PqE93?9<7*er[S.S5gFp9'4E8],M9#t;;XQ=CFJhe"-67T;cmFR39\Lf#HhE&IL
%b.<^or%ZF<M1cM$=Gq@H?Kb/E"cS1W-`@ZhN-&i[2CJ%cFZ)ZHPih=S2*>,f7:=sM&a,Iq,,$XfN$u<81ms]XWIQ:=?^>d,AOSUB
%+@TOS3-cC7*rTp,<+ch_W-Z_IU,C*fbhZ&5C82Fk/n8Bf?._9mNV#<nG:l6UUIO"3%Z?9@-(&;X:ljZPOQ(4[K`1Ws0!ef0;QQ_D
%RoKg\@G:Y_k?Lfn_!hsUcub*TBXl%fOSg:Mcub6^BXu+j?B^\BiEQ[*\:NaXOWD)T0C]-=(E((a=#e&KQWV+!It/oVE02Rdk\FGn
%5CLmI?gMJgZNZDZOhE2F%CJm[1MO!&-4qA4Jk@DOc%;fBE$m[oZ*$+L4"Nn_[N\%B)^bi;/YrSO**uj]V5f2_jPYX8OfhOGSkc-g
%U2]Yd%lA8/9*D*Y4oLK05^RK=BQdGT\oqc=Hk+=CNR7])kb(RIT3$.O\un2mTSKXTL-o]'B/!\J:3rDOTkl@]jtSpM+R6:h)0Dkc
%1O,XZ:b./93%ELGdckS)i\m^jOA9,$Sa0+<&lM`+Kco9j]WeXnS9BOn!cW\)qa#<lYQ@-5@YGec8*gp!kK8p>.Y7\YI+f^B]*cc]
%#U-%"BQs!"$8;PRo;\g?>OY&\mens\UqFZ>.t9@q%bL@eokG+-0<UKPD(MtMHap*J>n9q@l+8;0iuR33P5c+poQDnVn"1L1Xao=J
%%VHqW#*u'd8#Ep#j`&,k[aS$VKuO7p428gI(RX4]GK:cQs6sSpE^oBs-Tf<@P4O<]%pD5=QJP_fQEokLc'?itrn95L/(5Z"4DH^6
%'^ubUEBWE[fW;50'2@)ga`bl84$Arc5KZb4<m2(0P\ld&NX?G3JYg58=lH?a?riXE/=70TEmkc3Em*)1.N\:P`err,S[7ZJ>[f9D
%r;kc4$bt"m^2Sq@YfIU5lS!4e`<8DO1K?u-j-rc)8?b2r#KF,F-H$r?CPYSFOqEC$C8%JaHOf^kKF-;:H#LV!1Sk7(jbEJk`5TgS
%$mXi;ZJE50f8!@4Kp[q*4P6q"i`*ciX^p*WZ)o\bo>*EZ[K:#sJ:ND6r64c7Vu:>H>j>/jp0sY_1)G8%a'J&`s+Rh^I-aTBFadur
%?K=)I]okaBDJhW#en[7g6+%--[ctqG.kWD5?[1K%:qnB'N?l&_P?5YRXCOZDc/']sD>:/aBc6EHp[%1Bg`gD/RF?5uF95Y/k!!nh
%3bHLZq0V_NcVFPcFYAccNAtW?*JEY$`u"Zl,H[lW$,"i]^](LlU[pD\qp[:(e>kgsM:MqM+Nc#O*8>ltBOe#Z4p7BKhOKZW"uY$2
%q;3Mc1-0lTRXNi0M!NP@klqlpSbqOVPuO38fF1;8A<3[>XP;.Qh-td>2r[SEN"T-!qdK/8=WSa`P<!`_cj1`p3'@#XS*R,36m#e*
%;\-7,Ff42p%\6<1]9JUsS]]uqFmDhQT!bmgSqZYZM>b]WOcE@#9:UQB\@-1p\ICWuNH+02V@nEYAu\VcM<Y.VQ<W7Z5lad'T#Ai>
%[f`Lq$ZD3@LN[9t30YsCZXUn49\`2-Tgr//Bu3f@RN8olO,.7D$D32[*\Eo6Ln_0Jnq.0_s(6QR]rGL&O5)[Xgb]Ih)_Uu>d]/Uo
%LbFsh2Dtb-D4e+E,cXA+aq\]U)=m-EF,c6OVb/727,%.ECq(W7GHA"7W^R?BD%E$g(!<*@pK<cX>$d_%Ep@0m11Km&Saq`6Hr$SY
%k-+4ZOJJ]2>.akX%fLY\RS18hl[@"$W8;"hZLOJO\ng_-UrC3nFD0k:Jc-Z4:g69u2?R+0WS)KYH),U]*3hc-"Drk63PKd&$o#Gk
%L#MWHSB\-0#?JEk9*p<#"XemMQ4N%-Ci$?5JOW-+J66nW8+cqL7]XjSO[]_mKc8\oa./+J?qG^99>'-:pRH.H_)4q47JC8PH@>cP
%"+PotXf&O6G_HuJ\O[0KmijbWphTMP9s[.tZs0=3*d3Mg]HXN*">/5]+r9Y_Wc6E%ZCp:l?+Ai#@CYD#A_<S\+q9tnd`2=\.G*pF
%Zl`=T8Rj9KiGIi';dCma1+0*0_)PpMcX)l@F-qkplnj&C=ZIc;=aHHiP("k*3ljoX#R--8`]>5/@DUH!56GDo<kU=l84tXH=Hc8q
%GhNf[<+C)6!N(d$dKL.6]%DDYY,_/U-3_H^n3nCl%Y\5upnI0=oPW\E.I?L/&eS?4dc7XlL<!FJER3Bgfb?Hs!'/>Y/6XbMF^b_H
%(>EHi6jps:qFa9#72G*+5o/-RG:$J6%gcAQ:@DVFCDG&E%0>$h:9c=GChANoK+:Mfm"l\q?1tcV6N,#"-`9l_Z,Hj0F#be(\Td_Z
%2ZLW*(I^1,f(gq<Vt1>ZSi/]=5^]jIO_fK"U)F%TI)%CadXG0iJYJ[RK;R@rEs,d37VJCBK40Y]_.*3ra/BJ^qq+Is`fYqu??.KS
%;PRO*P.E>n=NCapOR=_l31u.6d*YUhO"eS?4U>(QeJnN0<uoB`YmtPoLEN/]%psK^jL2U[3T%r%KFMB\KX_(ZG&XKC\O@J]8mnFI
%MkM?g;Hl1Rni[BY$jU(aW6#G#!]eYIOe05:0+_)b1b0:5@+>*68VL$J6;q=CX:UZARO,!)2gpgi_P12,/)(jjK]SLmPi_(6+g$"E
%"ko^4)KE=LpSf[Gq`]<$_?Ke1i?EjO"jX^;)=+.u:54tKDmhtZWHe:f)9lkgcf*fB_^itIm&8Y5V5o+U?8`g)Wu3!M)`YE)GOJAP
%7-slqG=Q1;Ck[B#jqDkS5lXjVVc.#OH;4=XIgQEL:Xgg56,\t5[1uXI*U_6>m,K%6k#p<br\S%9oI(.bq_[MWV-!%^?0^&AM6eha
%HDS_Z[eAi'mL1=2&o<I-$(7&F,mq*I5I(=uP!o#H\?45^9cg`ba`9P`pCh*O@DkdfMmU:n>MM-a(ca'-q'<89W>m%<mH%Rbm<]S$
%+FBE/86I/9.cj79Dal!Hig-L$hr?59k%WGRrg`IeO3X&lI6*k#p+!8NfWRO&GurZ>"G>eb&)K6t1&m`.B/4Ts;B.5'HCD/-<o2jI
%CIDfm2AB"`<8buV)65!&#krihb&irKl^W.6/qZ.:(s@^WWu`3t"-!V]::;C-5gASY2T9&,;q*c;5)ml82*Jq#5JH$Q*d9d59uAL[
%alHRj;4=Z[.1a&CX$?Ps(L.Ml$G0sN2hU[PVX,lOJ5(&q4K&"[86SqQEcT)^)sW=\>*;^O7B/Z+0M#o:1I@*[S]/65D4"Ac%"7#h
%8"j]k*$c./M>]sWT?Qj'(4+r.*gC'U_Ba]K[r$`tJ&9VD2Ff=qg>?bbW<rJBG,eKH'8%^6C*m)9jCBe)%g;];hJM,eAsOVkoknj+
%Os'irVaK_[`G1^#UUDm"UII5Mm.TD]<;HhfAVPTcSqPbd%hcj>np].M:/RU<Z0AhPWOdO5X2=d#F8H`<ig<5+fe"]ueZ:d:,A9iH
%A96d#+7"7:R?H6<=.BOI9Kc6F'J<,9dg9Pd`CH"QggGZdW<4?\"]AOuXeZ^5i^3m61!$n^L7Yl)9(".+q\MYLH][*4F&eciL-;rS
%)d>$+)QS:ZZA+@X0m&CV*'&C8!nE!T)K""k\f[#[LI=K7QN0q:)5M.-FPX=q+aQO(3f*BFVl`9SUhY;iLNh;`>:)q`0d7YciD4FN
%oop=&05q"&=4dQA?/c+1IZ5La\\o(t\AT":?/u<\/i!U$]>bSm>\"4$?/c5N?"+4$?/c8s`_3DlVG"S\J\T,Cs4_0m--E)/lBPTU
%&C\e)?inBj^BZ3Ydm"K.R)(Q!3[97c4"G`1D:W`garF63[j?!KaGP%.Bnk0=p)4UEbCL'M?S3+k'VL95QbuPIJ[6'UkbVS)73+7a
%K,FFYeBrce]$Nns7lb((6^`Sr7Ljl,o7TONdb5$\&SVs(o8<uKA5Ig;dgDf`9a`/]o*o2SpnG9lha>oY#fbNFAQkmI!EDWX65RU%
%<k:;>4q>moj^Z5L/\VrJs!$fLFO)@(cAOj2M'DuBBj&sE\T3oWRCOb?_&\:M<e[cSaH&G8$c5;++5%>QiDUo0EJ;KA.cs9'_`RE[
%Ar/lp%mkk,FQ+hSO7/E[e/Z\CB.e*:_J3DSb,IRO3!g^re_I7UV347+LOAka.kX+,o5XPpjulVTP\@Au1AeZ)(6Rc%K_bd;b4'^#
%Q[:QrLhuSt(SEl6<=lD0WkmM,b*LQ'muX:/2LmD4L"9NGqk@iQ/OR0*AV;HkI$tHn#GQ[UI8I<!SOp.]&fiZR,_;TH`9R^aGoO@^
%9l@L.:1!CUkUA'P"bM%SD17kH:<R7#Ur'E_SYj9,H(CmM,qMnnQo-C)'kY\t?+K24@Dr>`:0I+s/#5V_7G;e2mh8c-pO2>tKhLJq
%doYf"YAi>eJ\fbd\B;2VAd]keYWfTG4mojERWjRF&8*6=^%]U6KTt^V(o?Xi+2q'EH0c<n/":]'`2rF$6\!U7g)tGX"Il!pSS>1o
%_1"'e)C!n@OQb=`QU]Nd[MC]Y\W<(2pJ?W^FrS/B_bWG`HIA?rbG>]Fl!g!J0:+`Mmb!52rK!On&VABWE4cX'3gnIqmC)uG&;p43
%lunsM+$atL2^\^n`;J@138`'X'g(RuK-]1rkm6Ym@M[#(RJ_oSq92rTX1-:+mc"Z,XY/]272fJT"js]>4DuPGLLPPT?bDKRn9V;H
%]Y2^<X2fFs#6'#VoWt.!K4"!RTD1&3`b`6?+7k%bHUMB;*,B&6GF0;UMYB8"TQ<95Bm';?DYK#Pio;-+4-=K"<bcS`q,?,V_UQLD
%T-/qh(56/*.%Lh=;L-hQ-,.aq*B4r7.q#I#!mtZcBcHV9)hg!.If`JLb_<\iC>WIA-`B9`CHSm@D\;2UY^GWp6@<,[F_Y7kKjBld
%TT]b_Jk/Q'*?p'3[qI1o'&?"S:f@k'^U"D[A4DT&"5]RCgP@_t^q$&1p69H=\fl8^G_'NF3#q4r<GKLl2pWSYJCoIs1r$Z&\jqE-
%69.1l37nj_3(i`^8@u))gkW6:r[EYW(SJ2B^1Sbi3PNnkp)6g&cb"7MPrW$^0&,K2V-f)nDf81E&8bGQh*CV;VIfbMFfW-jq/Hgm
%B*%rIdP7?;(?!1-6IR;<#'b.53,!_Sei4XiC#28,Kpgunm\RJclQ<16a7dg$r3>5N0S;Ij*p1g>3+e<3V0OneY0J;Ybf.-b-W\^M
%emS-*SUi>AXJ,"i"?I-K!Y(CB32o-rS3$+d[l]iaf\@P$VX(]QXNbW7F+rN)2B`HKf=qU.ot(_`IUqAtrpDRS@Kh.gF0O_aC<gh2
%rs^u\K"F0r?f-Ei2j1ZIp\A8'qs`o+:*^TV5O\uraObd0i2o*#p(.,nj[l(mI:dafl.A)i`NEe;4R$+fGS[oXVGB8J*W0(WRu\XP
%R?q7FjsPTPoqOf3Sf2]bZqW8qm#:8d+,p0N6Tk9TX`H=MZL-&VJ`jLd?us2me?<H[Efd;R60bOKY>_-!\QXtEPa0&NOANkXLR=?i
%i'_&g>(7*RJcPB(Ea/%;48pA"S8cDg6ql:]?%!\&(-,[ARtF!&VXVRrZ?B>&P?ScR^D-=sM%m"G6ZMn?"94T$TL(d?E'SkP/6]J5
%d1%PBdY+ka1:Rk`Gk:i6%a;uF81Al/rhd$@'@GYbF-^q'?^>!m9M"=V/ObEI6r[T#&M$g@;%I21<Q]0dm<4,^T@k.//nQR#G%=$\
%QJsgU0PlAq>g].EX_14hN5(Gp2L=Ts?RlR!V-Nd8e9o*)`934Y.EHC\dj*l@;J976i>K=aT<fQW[jCm-3Zpsc!b<=L;Vn1XX.<LB
%@/Kc7RjD/_mD9r^lb:c/_TS\=*Q-K1-'YEM_X?__a-XT0UP8fj)7BTKmk=hq"YrguKIZ03$jGh9'I4c&]s:j*IW2A?7!_pk8W_@0
%H*^8>]Qb6;Rq(NLi&6%SMP"IH5+V?7i0U>>SYXu?'ArN=daWK*a3s$]:VSmfm1*5B!8IU5'Yq=5P(6h_9/M/ifHLq*qSt'#\E*c0
%r;+Gh*RJnf&:XRfR1_%Y\3p](FosgCgV"P(I`Q_ARdgWk""qaej:BH#`t;1O_j2.rpRG^Q3G4%+JWT<T4^CWU"7W7(h$*+U%Wcrn
%%:FFMFm;J1$.IMsaFm?/BVGf]VTRKGWG5+U>As+g\g.P"'fjb#2SibS-;][TrE!]MEsg)VKTY=uDI3K:PY0up;qKK[,['.2PuO)/
%fBrgIpGS4?=J?^%o4`o5B@b#I^+Djm_$S$tkn"i&aV51C:ME'7I9O=HKoUcpn^TP[+7L"8aDA_)/lQIb:59G=!q"![1sJ2]b9;Bd
%2,]!k$6:aZ/;-q4$/gR!4;;9G0Jq1<k$qs/i8#Q38#+k,-]$+_Je<=_NF?'r7+XRU_KV_"rWQI)-euW%DN0'X\]@!AX]HA'Do:Wh
%CR?Ym&ks0FacF'P9>CJ2bY5eNnUoWX$\*\tIf3cET76`KR@ug\_FbnuR*K7?-0bG?4Z*R.E=t7ord80Z:Q9l<?E?5AL^-.SGqGS>
%E*^@JjkVBB)NbD"S/4[l5_@ZiMSa?NpCZKROjp\[$q:66B[(lQ=&L8hN:>YN,c<)j2[f5"&uL8EA]nm%"4WcNT_Ln%=T#(upnig*
%r*J^kg;QSH@jQ6U=a'p#Ff6N$QFbSD!)&m*j">N@T4]aieuQ8WSH$7iiq"(IkBKM%ae9);f%#3N%m<G0a$/_sO!R_5nCCg$@V=b-
%I!Z).$X6<uZ^O1Kl^I+"N4MMf?WK5=M`I9aK*80'"jE)Tq@StW(Ee&\&B0ME3=K`3?GN&"eai,@'bu1AQU4j#lc3[=,00<W`u\.=
%2^E<BH,"79qn*$W8#MNTjRRHTr2lY(5:OFgEtL,cqR\,I]3=mrFUaMnB.%cj*>"ipAiF[M.*h3LF4+S%fre[DJTkJ\"M]BgfnKks
%5OAS"97HX2PNCgG8',Chbasj8GOTAmE]/>(-@qeJb(*h@QYuTpaIMWua6%47CiiEsBme?HBnXcdMduDYgY@e:O)U%Vi5LiTD`9Ft
%^Iu,n#a0>Am<K-:Nc*1a1=9qJ2=o>'1R>bCe7:dbcmFmC_$fOY]obcHs'>#'j\%RZ>EJF;";RJ8"7DFNgcA[Tj9/K:!cTcd!%KBo
%aX!=5V#]!G5ZEX"c-<O^K)mFm+[dbb[G--P.deUJipLW"2;CqY_-uAIOJApSE!h.-;T]hX.?T&-bNPR]MUW:aNB'<L7PToGU#t/O
%+>EA*!>K6@29Q;eHphWkM;Coe'K&d2`H\NaK=qi(,7%bM6Uo>o;h>Y&-4a@e_n?d=c?kj*0:Fg9!<(nW;F0p&=iNT!)IP`[!Nn[Z
%J]Xm(WB+]q=%VA6iC`Cdj1tG]_+(!PBcuf8QfIRWYaXf_*j-(1P6#Io@E8ZNqOhuKV.!$GQNuqpoR?!B=;ng`qU4lp2cg3fQdpj7
%*:V!7%(nKWs3*b-UeuN1inlYH@rJ'/1?OUi3_#(r`9/2\W*/0MS=C<B,bmO7oP"o^'T'oJP^]<9\nk"h[n$Ti,^.q'$Ztd2c/j+<
%5"dts-m9h2`M&nR"c1>KW1q0S1t.,RBIKic&-[ec&:;o?Q_JehK]EVDj6!;FFDTfb%mn,jY3%+&&#uFAK?##-eY!6`n;1-RH'#84
%.Y`"r*L'S+;+Qj_U/Pl`ifl:,W^J_S8l6j9#omUg.Wo4_bl(tmc@!W0.Jk0O*cYVI]Nb8,ZLM`UH"kI?E\,=^qVjq6=[rekHhKR/
%!u-Rl[eLsNf,'.2*)7g3AOi!J'HK;rQ(NSdT8d49[1Ni%4;l%k+%C7c/*!"oCEo75MdmW?p;pu+]JQ37F&tgf5IibN]coUul@;*Z
%CZ*0orGrPBCOQX+==5nT9Zp.]'jrpn_!$TX+$h`j"bt27cmAd.'AB!35WE``nJ[t(*Q$cb-sMROPtd\c9$C/q*uR_J7I<+Ph7/+4
%WC7#`^n@V!Rf`SCNKd48Wh7@P8[j#EQ>NqSWRO@lZK]_!kCdEIl*T'S<J_P,LG'$LUcI:pDH5#<h<h))nXZDM8+&9U_?>'>#p9G4
%[\[0]F'!+T$ltVr_lVNe$bSKs)$NPO750MYWgBioCTs"Iis1jupruR!h(#PK(!s=I`W(qb,:RZeg#>Y[/+.*thL/KniiJ"dIPk6(
%gp!IU2(&qKXB&ogDGHOP-<l(\L1Mahg_Iuf)^.<uaB#EJ,),T]Jo+1dl^2)TmT'(sh%o$PK2*[;7U2G2M+FosD<H=3%c?^pf):*u
%7lK4o\*XhFQmYhTkej4m#fj:R?CY-S<\-rsIe@]$)1@lYL6j6SpD-D#N+Mk-,`CKr_DLk1]J@n$+'P+Jr90?dAp@mu\Q`C.E.!9c
%;pOmTV#/WZ_bZ_B:V96e_h$5N<ZcUrpJF3Rmsb(raFIo!:$qf+SYQT.eqR/7;Kf;pFU"Qh2O&fmSqpQ_?b@1qa`]q0s$0>E8_GUL
%2H@a2,Ym<R7W`[_61j*V,ub"<L!`"kAkA3NG3$Mb/Q.ts[']G4k=!j:oB(3h\l2BCr7c/Mgj@Rm!iPk3q[o-m[aU)nT.Z&r.%7s)
%p7d"tJY,%HW/E^4=eMlX17Co7rN$]"!fg>/1qco1K<93:_YH_0@K=KIDP1`R7;pIi(V0KUkURqAn/nQ8JElRp05'T6Q.$O,2C7VI
%0*rjU,Wgo_NURfEq(GXE%)sHG-M\t0+P605#Gdsr)<EQXV>(PLCtt3EiNkr*"WY\-%ok9EPa-un0=:h3ObeBmeX#OeAY3NAOl%$%
%j`*35GMddC=Pqo>%MVfT^/6n:Uc=Der1+qGpBX::s6sUY0d3&rq"?1R.7H"<)+7(&+;10n@hm2\1.5,4=e.F-oemHEF<5&KpNM=$
%R]jaZlB"+Q!:LY(.)=TZ'bXmd=JGocnlCR^43Jp"T]le$\:YR\^^X?N_;;jO9(;)n&h/&a\O$[A\NgR@\3LL@p]KU8$^^(.VJ?>)
%kF:d5iJ22iSaV2jYLKE"38OHZf#=Wf@I%A1I@;b1$%MPe0*rfu@7.:/\+Qo`fTM/c$PcZIX9-ee6cWH^7$1j[?^Id&4m5-pr_1uK
%`Y/AF'TN$"1Vm);(pI#;,YV0RS?a[?gIV)i)@8G5\h+424o6uTAV_p[EXq(_8Y3W`c*s$]P$DCA4I)r#X/kr-VfS7Z@7[<C\OsFA
%:ROf^X'@_2#lU`2.50NSMiDRGG\E;7UE,1jR3bfm6m#5h3-HXhl#UQ97S_(`>C:(rX[6,/J+mM8o\.09.%o038<S-.K;NG*P1@ba
%Bt7<;9!/>iVFlgfQ5==;RaO1H8_)D!l(VM$-AIGioT'.E4[6o8_W#i-8iAn7BISmr"_+drniAZ,D79?Gc'B*Mnp<":<>b]CK]UIp
%!bJq$&!3)1r'"t;h&::PWRpIcoj>)FqKS6*#Yk;&13pK)-F_FW`bCEm4n,LQa"P=>Y!$ob&;FIkO57&BWXVQ:85rA[]NmmXA$eCp
%qY&C*Qp9A]kFd^I68G^@3QIF*HZ5sk-*?04XoiF0p2ODn;%;:IH`34oPR/VXI*=fu(Mt!=fVT8:k0VCZoI!]k09ce+Isf6(mBqdM
%Qt3iB_#1Q(@n4/ZUL'`sqD8[T=*iD7fVO&qZYArE[pFEBmCDrECZ0:JJeaJGIq+P$NVP=&DJAKj3_gf]i%=dS72YQp.]4FZ3b#`o
%MD]ZVJH4fnpDsqH[G:SA.hq<;@Rp/.-\u4\dT9PP\4dLo)Al'92YH_&F"H^A`C!Pfe>6YPk@C1);T1i\EkI,(n:KO:jo:)k?cj[u
%%.bj[a\Z:0:N!\nUN([gd\krW0D+OR*<!'`lEet*-22h^lCn=ecI%%aa_=mGdb:dn4f5/a,&)J&Ij1W:HkqN%013@3/F(ulDFcp;
%jUN4WAXmsZg%+^C+$>ZELU6lgDO8>+T/V)rDJr=(C`Zs`%XY;[@)'*%0]ap0Jn(Zbm=t?j1H-*Z"1ua8Y,&(_m[/_:,U]Yh&8V(&
%2.%>;Xob#B]K+8>%cHZQ[TUK@]$ChA?[HkdC4L;aHejK77A>BO5Be;;Oa<tlWnV$U2gT_\V^(2(+2!55klljH0(ac`+BNk5NmS[>
%ih$\g.L]4o8fF)aE2^qhgmqZ+I6euUU6m'9\anK*>5gq,EC:5eFV.W^Zm3<QF$nsMhRj=;*1Kk/i]\'"="N"s@j_nl1d090eb.GT
%D'%R$l(E:P"7P07qS52AKjO6UqKbANf=oTF:PZm';9Uq83GRt+V'19$DtdpCrFQAXcV7@^]c(TL)6K\.\ML-6:.5$-@piZ1eNEs?
%c?ij<op]mF9JX+r0"#`U$B:QJM"L@u(\5S`SkjO'GAhW\m)b/L)edRpiuW]\7pqM!5&hXf;QoT2li$CR_R=NL4WfI?:<C%:)"n63
%oa:nBdO8<>7HobWMRX@IGjqKB#HM@d<7RAC;3YT>f0.,!>[2j2Q8o'^'f$8L1"_QEAe0jT76Qc/SX^tO$\6H,H$90L5K>P[[a:2B
%!=a&t%KEXVpH(b]qJXbXTMcNWlB/H,HUK`-.JYPs,k:jM1)kC*F4M;]dI`[KrctC\Eqb2&8??dLATloZ+dR'qK_N\D3"ZaJM&>:-
%AL1SI+?46o#mLaG"ZVQ\mQoQTo`25prm*jkDZuLf^%OU/kmi-9]B;.De,A=PYs7UD]$Rf1eBkg/Ji:]T\3Y4'8^[6"o+jd#Dn!=t
%SKA+,GP5n>hX5%*"aG%(d.GGE0t]2SB#DT%6d*H*'2;Q*cED`!:7g-ZEVcp=Y>$.KI$d5A((ZVm"+3ig_^cBlbK06RU@n(fqRNG>
%k?AWN_l$us^RI)_mnjR-E+Wq@k#utQ4l*4;EZno71MQ3I'[mqRHF;i?!:0%KJNG+uKY'Bt?gkh&/Y-jm5B=]Sibm&^30>k#SGg5N
%pf6d/^=\;!^&Ig8:\s>!e)#EuF8NV6hr?A5o<3X+m:c4`Md9'+-_5Yr^Y%?hpP071HS9U=e)("=akJugh@R4[GAS^,UZ-;YNfY?O
%]Bb>0;4jY)E--iu#5'V3e+^".NKfP>ndD*)I+1B&#2+?\1-hd6nS;KJ-cn03q,r`CL3./gZbIKA0XclTSOeE*Cn(O_0&uaMZ6P6H
%NHTsf8L%>OGT&N`Rid+SCjuPBCe1)G_\u3m89%g4Cn(n`*>X-<9<P^`ns*^b.u2KQ8gj2lKTm`FPj9e/8u!qrP`6!EDc*c.4o6PB
%,WR\LALO)]JuL+j(-21J,7RXo<([UhPuHfi[NlSnG)!CNXl`M-ad'\f].+oIM\D_>L)d@+Fl9[XR35E*erWYX,N[rbbR4L*pG7f5
%K`Dr[j]$@@)jt0W@ec+J"S'f,0Y,of&@X$2@(;VK3WM3Dgkmte5gJ@JJ@it-l0t2r\F%iZbGVkd">lK2,l^;g!ck;\JOV>lK]&.#
%d7<>"RtWH7VA#7Bd*_Vm;KaWWCIFG)>KEP0#e#,A7'6n[k8((+*-6V"I\12G5+1Oln?n*:gFZ0CgN?/Qh8f"8e(pMjV$ZUf92j]H
%1(0:0_B2jV^"r!I';*4bV5[8.[E24f[HUK12$0H4+pH>8N<GV%$T.A%b1b9,*?i*s/:JTe@bu5_@?`<)9rkisYq\c8&g9LY:mBZn
%-'2)Rd.L$MiBF%t=VIn*B:O5TcKO@*$:mRh7bt_Y.&%(18<q4XU9r,$X8cOMosaW>+G\r!QKQI8bRS)P!sC?[+3B-b\c[df8W/*I
%$R.)9NcQ<eR%tLdB<PC;7foQF(>^+dREYRPc-aVXlXLFZUa`r<iEiBu-o\`_H60XkJk)gs$;Z5sTbulY]7hI1[hPK!`?_><HBk:9
%Fg]]U\I>\]9_1+MMu\_m,<PmZ5po:?Dm%>0_ul+he*GnQ)UbO(?s_dM9QhK#DX<\V'RJ\h0;%?8HU9bWLL-\qR][6`fB4IFq:cPX
%CK_oTAE:d:U*DU&+X@Kc77qUL+!;j^r"3,l\i!rkjVg#T=+kDQ&9ma\Y%n1dJ+HfX;8)IFSi3VjF%)XD4!T+jpW[0GP!OJR#Z<._
%MB5T3Au_gm'AG83'g!h)UIdi$ArS45-nRb*=NZXV0.8_SlZ;cs6cc@"Hr0Si6LsF(0O?/-q2%I]9e`;G[3##$4+:feql`QD54)/g
%`%H1H"Hfj/WWO6,\s3M,m+D>qR-g:Ahr`Z=\JjK=m25EYSNj8,e.RPAMfCP&,Jg-H/19JJSruPkTsHPE`ITt1JLjnD,pX_SklG]\
%BB$4aqs:m6ND"C7@`5drBbIO-C.o'q.k]aa4lEe5Z6Mq+ZllXblZnPc\"Vh9aaC6$.OH"Qoc,aK/tolu&-)-Zhk'nFQ$k:n'B!S[
%!\\_rWHbC@BtDs!SCK37m%7((fD>.u!VX.mnNsANhN(2PC<bii^DUiNWq!'C:%*/*gsm41osO:Samf@O=N@5<1J-:c6AqdKqCiC(
%,:jX!;2sf,+3i'!'hT$_9Up+^_$dN_A/gOp+TX,d(nf;-8*+:(\Uk4=i@b^*m6?Nj')hP!HJ]\#s$uoUg=l;-24b6HB:Wa]V)t(b
%9-%apkt7<5Y\Tg+VbtgEp?=r8ot+.tG/j=7HpEh]_H=:WQNH%9`t6.(UegT?\B*L?hJ[u/A=C19g#*u:>!kl;!5=Ke>sbrl6qEqn
%\oXRg`amd*W/(H["ttMTb6rpn[c:a4a.\j^,$2HRWkk9^q`:`6]gm3I&@Q&:*gC/rptK[LKmjRZ5h+[?8_W?:>`W]P\?iIG@.nYb
%LDYY[QjhCd*E]Kfm"D/kf4$oj$]bpTb!m,+QKE5LT^V@ugibI1C6:G:B!GH9(csW!P%N9Fe#!,mhFpIu1H5j7m+X$<%*uTX=/\rN
%8h+=.BaRiuA<)J:O6/,/fNu0L#-T,U>Af:kHME,9(G^7DcKj#Il.hL6Z0Ac"JJuEsarpeD9SD+sZ",YhPXghG=_\P5h%(a!a)tYc
%ft.pBJ@`I8\&u'(BN$g0OL5)*0h&HJd9_B_B+:4D>.'70l$Ytta$euoeu@eNU8l%Mr:80qeo+)9b_d,=,h`snPh&h\*<<Vu'QY7J
%r;)d*F5M?_EoB]f4mRNbP!VCW^4.44Y9,A[n3LG4N'Pi,:8$D]/&:\5]Kjq'At\5m2oM]O$9Oc9huZ-IR&r)2/EI6Z6-D-OE6Auf
%E6BQ)T]mY%\EO?)0^)m,Mgpe=Z0F%mG@l#fZXPn[/+Js9PB/bJ1thd*j"@EkISdbJdREqKVjXZ'EE(5]or#VcB<qbI4X^(DG?=8I
%p1g%fUDZ[45;X#%[o[X.3F`tK%/lRh]85^0/I?n\0Fc:e</3nI&C6g`@lkR'V^IeK&TlDncpds84/.ttMX1XUWb8uf0q;2>1aGJn
%5p-6A^FG9D'N8hrd4Gho5OF8):ARd/Yk+2jHZc3oGbU@5$W$-b1*`Ul#>'#W6B,)?=99Cp,k;PQmQ$:GTSRVd"PG`>P[!Z?;$t!-
%UW6Wn,1BB$+XJ\=!#)U;B:+@,II1JL^8$dqh[G?@K/Jf0aOMt0NaS0A]*UgPajKOr)@-k(=RIq4n-,%aUl5iK90DEEg^eG@l@!VL
%X(Td^n/LrS&*GK43sG'#bI*.dL-J7-H)%/e]s\K^^%TpVhHVH<;#[4B7HeW>;hH^aBNDXSHRM9Dl%jmNGSXje2q&uD].^`Lb,;lW
%dc"-&c2M@1XMclMr<P=-T#!a.FWt6U^C7N5c#]B9$FlA"E)$u?llR\743(+r&L6KW0?&roKp`o=Yej,CB9q37_4LHgIema&r%LL/
%5tJ2#<*1pa//?1K!`+M)Zbf\M/=*dqbaAXCEm#33MT9"1/@SmB/@uNr=N`;2b?M^I]?KB[QFP*=DCb)Hh_iO@6eM?ps)V)^goXSi
%Bjui/Z,C^fR4M>:MHLm@90u^:=h>2=mki)8l&j226>lMo*]DYDLadCpdXjb9U4b-"VmKlb*![,X12WJRao>ArL\OVGEEGCY@aS-[
%OKinPY@&-c)h"4XakVBLjd4#3r9j8?,De7Ti0'`48WT;pQhlrG\_*tFbb]dMJJW\,:M7YI*W+b$rV)h":%"(jF-=AB;4J4Am1b`B
%\:+[TM!e!c'gn7`F,19jj]JWFCn9<@XYpK^0.!?U(SpUk`1;u)Zq#_3@Q$.-I^=F$)MS_3OXBCfeg,1BPdM$r-[)ihEW0;!:TE/:
%/>m?I-:EMP<K,)@2uLV#Xf(">n<]s],u\<Q9?COFlr5$MZ!2_#PHBCuWU+.jc$>.a"t^*c6^_FlI7\g/p4`Eej#A$ZPj36/N(g9$
%oSs3HU2UO3=AsIY<4iP`Cm$?iOP2#$Ge*A]0tmm9+$USC,lCu`M@Y#BUsms[U^Y(L95U)89b?YEO)Oc\#?t"$ddU.QcDHNu8]uf/
%NP*Pj55j`l[H8u5RuMmOL[-@:$ZMam88K7i`#ps:kJUAgn1dhFdltNQpBCfJ_NX3F&R>X9D?`s=0*mU'7&AsZ7lFfWg@\<dJUQ58
%&N'WnD1sq]JegdsBEj4(bJCZ"+]g?*\\Z<heROZ/H%[KdFU](WG5!h4?1i8&_k(OcelDtmPR%si<#H5'>0'62?%SUY_1>]*E4!U'
%;*uUHN$iQZOV28Qb[YL!*0bDe]Xm6X0'aR^YrUXQ)<=)?DiefF8G;GdBV9_XLa(%[YO5k/DR-<Cdp:Z?_>!WF=B9_"'#r5\;(Vq3
%XE"h"V/#D5d1k!Dp:3GF$u?-_B1$f&F>U@424ue7]#)jL&_4VZX@kVQW:k+!6eCX%ll:#EQt%T_"em-:M53OV&<Q*T6<'r4Xn.G;
%cpdO,r-Q_rl-/P[B"<X!ZbU_h)EAk#rn&ob<iTHr/=0E("H`t<YMNOcZlC_YSCe+G6<Ho/78R\U<X"nHH2&$mE]k_(J61rcVJ?;8
%"#!N)f8:l;^nb,-#rc*5$854K<'eu%ZCpG+?$I5o+q-D9U'rtd+UqVXd=tjX&VljY:^8Qgal@mI`/FVXJAk9'K3h==>=slh%i<c(
%C[X$gf"1pdnDfP7?ITLVTL."nmKtA/Sa"!p:^<W[%,3R^pimJ7R#bQZiJJ3B@uD``A5j:r%WP%JFH<,C=Vo_XiXHMU`#JTq)d&$X
%NILFf<2b7A)rtKo)iCPF2K76)2Tg2%a\Ve#gU<;=6lJ'-E>cXud]a5?G0;>PA$'M;@M5t<TT#%n./6Us\9sbl.U&G;KkW%6#pG7`
%!@ZO4(1E:Q+MsN;s0=:M%rt4[]MabQOD7G"D0F]AQGjV\h4cAAqPibM'CePQq6b5'E#KLgq(f91*2-;UZ,RBWER&8=l%`hi,7]d%
%Ecs--2b1@\W5tfj*D=6Gh0ksX:L'j/)O6N^pPA;I7DD9tYp#uBE2=a&%QdK]RMe8a;,6<Uar_`P'JLl2U<-f;$m>jGj*McpK=K"e
%cJcL,[5c?"@TCB:5buI1_@-AbQ\eN><IX?VZ:AK$hLYk(*ocET`G%b+BjK7daTf.;iilAWbmfpP_\@oNCnV_2Vb&g?Ic,dLi7.'1
%2gI\m@4,52nrmp['o"bDRg"gu0Q)?0V8B`Fi@,^)92$)?bmIO+EUt)QKitat=(0X\0U>5j&nh#A(K`1/GCd6iB3\gs)ZC:l`J*2^
%0426-?Z*Hl@"3`k0.+1a6@#b(?J[Vn5q4J7qi9J>olM0"5FJn$S`Gr76iD/Q>90O.&`u$t$ru,S`$,bZf-Jm[45HoicA?Vq&BQle
%,,ms--Vg$53<r'$Ed\G*bFT8[Q\.4i&[FnYm"ZDTb[[iSh._,16YX*^V.Ro9:8R&]\,J%NGps(eJod*DGBk:$RO\q9"\FN6*+rfu
%7d((V^Tj:UfBCU@A->ePR)Eg+JKq[VS8FgcTFJ(q?BojbCm'[eXE/:q!bdHfQt3$18b->7<JB1aO5M^5lqq,7=s>0'#WGC$$MnN!
%iQP6\5ZNb7EdE,P:H\8qg7Jt4YgT;B\$,J(1RaYVeZZ7-Y<V3L(FdlDB1kGNm&[AE4$i\&YX[_G;arWYhO<Yt")q`nS;+fk#nQ&Q
%:3R[[*-e5/XH&rWP[_2m>U2p&bTE)2puYNla1d`qh[+$>\,s!P=$-/%>'_FY>F3^t+=Zc\5W(5^\*V1NN_>XQp\930HLCI-2[ut_
%-^/&F8"D'tHCsc4MnSuYT7!Ie6;"3<8k#Tgohcmb'Epi.ZCn5%2A)9ogP4O+W.Kc!BH'f-%B3Lr4CGI,!QX]EQ(kG`,X%b4/#0,c
%(:CQOh_a3pm^#AKQ`TH4Pn[B3UY>%8MHJ#+d+;=[0*2fF"8.FsJ^aa:oh+Ig$k27AW3)oc1^3"4KT<a,\tlSQI#GN+Y%H.?5R80P
%p:b*]Re3.qK'rVolL&T9kh/@iJ;T!_Bi3d.q%&ABB<qf*D;b#?ad#kQjKm(0TWeN[E[\N#Hd>/M(+#0Z=[&]rbEBpaW5[H&%!7c(
%e!\.?,L6Bf%6F=03d4l4ImD+jO[)Sfk;XsR]55$f0R_8B+9o3&*0;bH&-Y.I*6AXImT]c>S4h@>oor2-4UJ*m@Z7BK[RVa0"@5eb
%U>6G(Y/T"@R<&42Ei/[LSao@K&C)6/\=lBD5RAP4';XG-dEkX3eK$s'A1LCp&]0hHTat:N!+QNiKgQ%rMR]Zr4q'k;+upn:aM[ZI
%)%O<NEJ!0$=TS(ui<="f]Z(B*+C!h0LN+uO6c=JXn:Pe,Q5IJW]#533F'2rY9B!#BKQWfNR)2Ra\ACt,fYU@Lpqfa,(rHtW9:YOe
%IEo6cOEs0tCIBH0Q7X\g@c0]GN7e6+PhK%CSZFMH5"fqDIBfJpFD(c&;RQ%3MnR1I=a:VhOpb+QOfh^9&bD7DjM[NjRuo+Q4*E`U
%if;eimMPW&.pPM[\!u=YF6"Dt/3$QdEJPqOTD+4&p(F^Eml.j&hmgV#U$'(u@#l4A+JJ$Qb/d(X-(\j+HrFPj8.K0TYj(*A1b*V@
%S3e4P&g8S0`@CAV<)4*/Xq?@<@?;OaD@[@o733.i(W-',4ZlT)D]L@@9>U`[KG(.Y6lZIuBjusAEQ;XKpgbGI99F#aB/=NA0-NE+
%D'A.UMHnZ)3\K/.$Jn+(mo6Y;cV`dY$j/"V+>TgOX1SrEqaihJo,hKcYjYVQ_3[50@_,felpV@EXI.o#KkukegH5beHt-Tb8jhiP
%*HIfGQLrQ8l^/#n:g6!I'on$K73PJK09E3V\VFZ$IZMZ)E'+"+-_cfmItVp=$E[/C:hLae3SVH(=<C+*e+g"Gbo8o",>8*fBEh>@
%K8OV[l_hF/JY1nglPVR**F'a8msCDba\2UG6%s<b5Z&W*Ria#We$s[oVS]ceSZ'E2H(Cu54dX74Mu<ugKd?0i@>..W6<Wig09XnW
%HLd!$'fq1%`9!j\5[ABgpW4rH*`qRK9ihVe06#(QoPSer^K0al&%th$6fOp:d@=I?Eq82&X586RX)JJ/&e@nZRSAOS'NLuqh'!%J
%P,bJ+a9`eR+pR&T?.'k91c;\]K).kJ27>'G[qiNj,r$g@2(0.c2GDr3?$l<pT6\<HfTjIB3n&\M/)=p:>j>/WqWhG`T0(kTG1*c-
%$DjsQ8JGuB);r%F$k<2b*eX-ljA:%$4V\Vsr/On3dUou\/8*$5bl,#P1'ngNT;t4C/=o\j9MJ[.`@b]p_H`KV.F7DP"n$c9IXeC;
%ErP'7GQUI3=^SY<.H4+*?b?r!nU.PK]KQ1<X2fF3HWK\"=\mhj0D<AgIk:?6YCA+ta8FK<*dM+QkC1ah7G2@KHKUmoY%X)jm3fAL
%"W+B6e4etJG@#?^o='(.<GG&?pi+N(_6%;5k7CD"&AE:0c0a7c/NJpiG,G^.Iungi8Ds?<3ZrDi@U\-nhMGo^SW@o!G!5\EVh[3Y
%2R]4N_`dp,:X#\oI5+qYp')aWYs7*+XN/e\m<"e53g8`f7R^+60,UhJ=-FBP=bA\,=dkuKqe^l>_!^F_4F:e7UotZ/N5l@iB-GM)
%@UBt?agDH`M3N7"61A(o>`G6Y"3dgHO:`oPk^;"(n8l`h[`]3th`09f%XT5L2n<4K9N.Jm=B"9GB8lh3kQb)tE;ne0TasA24akK%
%YapOE,_%4u._g&D]18$bJ]"f1fWu;Q1<\KY%XoisFcIE@nF""(&[N:o7,;.Wqd"nH[$iaX**@fgd+?R#,+1S!W-j=n<$Dp;jWLjF
%h_e:pBTBX6m!HtMiXirSd(H)Oak]<iTsRC2Cbcm,R50Zh=<//NVsi`c"Y<)Wih8P5>/VMW#;>HsOO2(3N''Q8QppFeSZ^7"e_r:b
%FNOD:!JL+(?pMLsJ;ca:&,FFs"d.<("O/[5L$XiVT5<dF!L0)\aP8!V+aTNdK4$"h6DX!6V[D3PJ4Ek!;u?_QpOl!e@Y'o[b0pGB
%k)iOnKj@63/f5[rj(PQ,-c2WVJt=RImBUMn*Q3TUXi'10r/Rnim'_."mGGa`9mimaD<f#rMj&WK?(CoC5$0*2RP%J<#0e=un>_C'
%^f%X4"LI>:(!pu`$u!4C#;f^3"I^r@!_jJ&JSDG]$ig2=X7b@ZYjN+&>nmu.P3e#<Yria3L^L&EO?o7t2QFDeA>7=u&%VD,g<u@$
%9]b9/60p.nel@#*I=1[AkT]0(*.+qu2M+0(9)3QH+([W`GO7s$[L)r]2M%TR"eoN0dZI$2.?M:N,,nH`*;Y0TUWQ))W1QF4+g78'
%oSiqBKcl[]d%eoW4W>.<i9>UW*6q.eKo?_Yj&n+P+FX,=>^o_g;)!Js.;_[G&3<Lp0?ER54fCel!Gr2pH]R5i5imQK.&.ABa4S0(
%13qUlQ9)K51'5:ko+,[+DD,d&aonoMR(1"Ej=./+c%QQ2ElROm+JV*#da-\Wj/9j#E*\e83r%!gc+6@8N-H\^6p7n],9JSg/+iGB
%:%B+/8X9Y(&%k;%DRr/,Zs9@P\,689nqB:n:$`<)aiVho-$oF^>?:.O.Eb(-W8+-X9&U2F\7*T.b!b_qAOLc_V@G8)DM<UeebNt9
%0m7m=@`Q6@aDp8fP#2+f=r\a*X(R$PfMSUd=lgb^!p$YOTuE#8.!hg,SbYr;@iePTM2LR\$uDdP,ZunU)/YIMVSj)d0bm<]:_P98
%O72kWPE^Qj'\(SA"^^OngjY0P$J@"S.hB;FZ2_(,;#g!XjLc!nR*S9j]QF&2h3R$;+3]>&>b570TGEO_dFpK`C[M6ie;HZ?D$/Jh
%=duhV^:<,B3,/CC@!A9?5dH/2)OZXQn/-[h?+H%U)AXEbh-C6,iV(6]0tI?#'g@(09I@ah@Ftq`2b>hE+bX^H6U[&Td7dpTFk/$N
%f@^Uud_M(KXpFT=k'eJ[@BF'h::@oC<jM<EDR[3=]3i39GkHT-Y?S8`84r[R`=&Bu":ITmh.?3X"!L5G7-UgCPhu3WUYT"$1PJp.
%F-'di!*,*F]HmQgHrnMGBY&QEVC30QJEns*Ht4fj\olP@#StnOF3PZFoHtLOG,oCd5)eCFo%uU$.2-$Y.rP2;>C[OQ$Vct"$k8Qc
%9Jg"B28B-q4E"i\eX84_0$YKHI$d(rM@]=A,9/M\nA6/SpasdcflV?XrVOjFrXf"5SHo(j\*HBAj;N,"$ID9na86G07N;O/HT9%2
%gDs8\.VpP'kH338lIe1&Lj5'Cb?EeO_Fc,[q[727bjLU3\%b;i)7\?%q"5]pS)njtgLGX*Bi<_-i^@6Ap#DVd4FFim$(gU6hY^m8
%I!P(\Y>:1+TCh=fpfa:F?_6oTKGXNNQ;;i#*e(504W,>fQT&77hoFUNqXG,B]F06Ma8apYD)sl#_cuU/@'mBQ.mO$LpofCHD2:)i
%,ZBqrIg9$Cp1mNonrRo\-(ZWpSCk.!'[@;FD:.84qJ7&C=uSMl!!W`@+Ob?68b8+=?E@i9DhN"%#+\dNEZA5H0$@QP9G_%Ap'\Lf
%rS;%LimG&r&$Ip5!Tc7tISAK#IV_R/V!?'uXAYtpX`.Jb8)\-k6]S41oc6#a-RJ1&;XnQ7UfpgPNAPO%,'qaN:#W_-)G7rc#l0u5
%gOAouqsMkN4":UCYZB=U$%k#r[g;<"PUP/K7C?s4_UO3We8F_X.l!J?,BrN=<)^0LXc2NlZ%nodN#Ns^Hj$B%:lrR(8c0FYhe,U=
%HW0;Ug*sI4+T;A&<:FBp\!loVg9QufKFkYnL)H>80bS."Nma@-X;lc!mr#!*UM.+)XU'%#2H"R92R5+YM"a0)7*'P==2=t&^81Ms
%!N7A"c8PL>DWNK@qRHg)AJlcVP])@oHB+?gh,W(>U1cQ>jC.b1QJqX]T"fnbS*;b8S*S^CYKupqC3@8:VQ2MEVMfMe#@<qnIb0j1
%c[*,]o2u.Hk.Y%Pc$l*6c$qZW@/sKFc2hgj_ubnl,p)i7g@j;";=QQ"aa7TMp]Cn4rhi_er#qP\NZNmgXkJlE9p5rkW4@-\MD[7=
%p[$)If[R[6`LZ[?-"i*:)9FrsE.5!)@?KPPpZ*?.Pn/9:mS;`gkG$%+5*m_*"X;Sr7>D-og@4jRrtf#:kH_B4,es_^`'s$Lp$Zbh
%[$36<M]]8>cMY+FLOa]_9rEd"0*BYV#.!QV0:Luik6u>3"V%9GcO`f(hf.=Tr!A^o9!ua5j]DlI6OKFka%sY8"!%)g5pG<&IMb0`
%dB8UD$`Jm`U).G..3Ieu?`%Qg!f%QK4%,fCs5:1X:,Hb^*_S;%T8E;<;6oKt5sW`5p4i6J/06]`6>t/3H:J%/FZB;]Bg@uoL5'J[
%'8uAfhu%>9r)F2e"U=P8/oZmk0!Ptb`u5K!jUX&-0Dki'ikdQ2Em%P[kS(%qo\JP8gt&e>G0Tc=5Qp3]#qVq@HDgT+OBC%`91ji,
%o4`)P%XjN&A6(;CAUY]skfeinJfTQ+Y7+0\c.j`7!sV-+.YQ1mZ)ri[Pa>4-,@Y\7Nt]X\Ah9@`c>&)66DiaBPZIQO7-)ML:7Nt7
%*05%4M$Ljm]+T@^1L[3#m\K)FL[qC%?2>X)!rd-Yr%B&kpDd$q-k$XP7c-I3:<oFLo#JiK(?Y!top8^kZP"pE6T\:AJ;^VS,ikK`
%Dfm5d0@K=kTaXnMDmpoQJBMiFGTnuW*pgK)HMHf,&+B;ebl@XC-goq0qdMHhm>]e@[6J9PeK0#)YO;FnK[!\W,h`tc--`3'GM'Xa
%1KD'2KDEk546j@/1tEe8o*`t@RYJnn]*M?^+"(rJ6dD=Q+?@7m4+R00E?gE>l$QjQFs5krGc2"_T)61H_ok1^=jMEP%XkSm(fsAD
%^sH3K#:OSk-U&\>'-l)AQ<g-DgDuTd`L89!9fA#TONt*+hL=eb^fuJh@*Dqb_b@m$H/7_>SA1thL(c,kU@5Qqea:6bSq+i0q,l6K
%kEDMsH?d-$j69,WgnCqE6A->[oE2!tCH]Li>3_$l9?b=VpM&Qq%BL3^`LB5<Z"Y*h)YPX6`:d/=TBl`g$OdQ6i[tp1@5FPJC!7MF
%Pf`?iB(g[uh_e#r71X:*A-GOH7QXHWoDa2q2FLb.3VC_A.*TT;DVdrHNE55FYO$^k0p8X*7KGjjkHrhcJeUVbXYQsuGR$(oL#:\2
%+@Wb4Ai8:YflKo7p^-(7`AT(f#+td/e2m"MgDnKhKXc]D;kuIbTiNP4<1:-'F]D5G*!*SR%<6-+1E&1bgGjo#\0(O=XqU-\g7lO-
%88+X9@!&9*kF&uj8$N3jn.KpL[&Ji_:+m+R<SAH8k+Fn`R:ASS4)aglmY(WOb*!f^E#C^k<e]0t0qth%OH>J&<37E2TB?V.C?#5m
%CGrZN`05BiA_@$<e1RU%TIQ&^DWlF*ir-S`@J`f6%OV'PP:Jg79QAV6*fulofq[Ng9eE#6EB4,bptZ7^PZNR#8VY(gS/\6YdbRpd
%m%Rqn?g(o*IbLLLPIZ-t^,Xm7UKX,TYkI(8-aIB%cHhf7Zed:#julbgiloF]?CUhPk'2%BgP<6ps6VgO@K;iLEWAhc=Fc]q4@%@Q
%-AYt+lWiqCVI7h8,Pb/4_HU+PPR$ES._>Os@-ATjnrZNnV%a)5g<`-95K_S76623VOlmUiets;X'(-36KajX\CkF7/d(`[(*Bo0r
%3k781N%.5I#SB&q?N:&:lbDh(5Xlp.!?FZk!0M9O,5]:=5U!-e;jD<N;'dh1%:1cG$&1nE60:LY.$[J`FO>&2e4&17qhu,IHE'Z%
%eqCAJA-M'PCH-gK44Pc]Ued*@+eR[)K1MHC+M!V=eRMiR__'iWT79gT.WGaB.Er<rq!6gcAugOb9#FR`b5dP6&0-#rYeO/+LCf@n
%aB-ot;QrGN:L,RUkG50*hgrZo/NUkuZAb_:!l,=?n7h'$:FHHiO`]4XY0i9]josc?gBdUJ)BgV1jQBem,<&o&,9KK.&X&X_!%%G3
%p\UcI1P[8[Z6s4;R/S%=Q`Yqn4**SaZC96sOtD)Q3h<iMhJ_N-AKQ4nj-&\/8[%"**iVS`9>63&a>7D%.76l;,CE%j:5&b+3Z!j`
%+_%k6Lr1Sh\$o:IQCZJi=eq1l$Cg:1WnN]iOjVQVf`sn3/2#20]!@PBhs_<*g7EI8n61Ua</Y&I!;MgSKif/'ofnjb\P\UGEHh4@
%A'7a0LIs`Nm8j3G2[Y>$7m-'6NSa%th9Rmc$Ug(8(EWfP6?/V:/+)K?eBoI`+gUm;:?2T$QRX`1\C1VO^NV`2_$\Ib]Gp$^$>Hp.
%\GNfEM3Bq-4'n7Z:O_0cnHGO+YW_<,HhbR?JGbbF,.u50S`,43V=&Ts\NZTsKDZ+6]S+@Js5J0Y4$fj]?6Js`TZDfunGlH*BSPVN
%]>+,cj+^8Yii=f1'ETb_*3-6?!XPe<+LN3LL59VdaHTts&I^JqGrW`qIk&bV2h+9o6G$Vj6>n6M=C!)`qZ()5F5.qNo>BI[Ttk@e
%FpXNbboHB`;KM%*L&&f;4;"Fqaq*-W\''jH_5+a3F96[$G@=\]s'GHQ;03`hNhi;ZO>hq^:0VdhJ!m=JJe[IG&3dHq9>X63!ZOp/
%mCrEa=3CF<;\3G"Y\?5_^_l..#Y^\u>$`H<rb:mZc55nmQgGq)^.ULu9/iZ>f3M/B3'h)<&$fWi>MTb2O(7pjgqHQsM;a_Fio@5'
%1WAS+>bUE)Cgm4L3+&EEb)D`>\i+25_o5d=+MO+d'>\o8B9#4U_qb%fa6YOl14SYk?^a9^3/_kA-VrZk(9!s/Ft?I5?f0^kahg@r
%8%Gk9*pue.]FaV-*4Y%bB-](A[!RmnN]CKb\%_t6&7:t,oa^kFO*S`P[k:n+$sl_K+gI9s=YC=%5%!OUmp=bXJ*`[Yc[+ql)Xk"]
%I0[O<ZcnpeIHq=@L#-rUc,]gs7pkOie*TLEo>5:Vr2^,f4dgNn@au7.d$7a6LMpR[?nI'fAe&&qL#%M.)(jK@af%;f0$RZZqlG8.
%Ml'c?/DnE)N(A9*6R3CIg^<j,BuM,b_;V0rAqJDRG?)1N!4A&<:?9[)2fnS6#:_Q.ERoofm+B-#lK&<d#qnO6&P?%\'JD`2Ke^:&
%"hKfd>AHDm^9DXfKU\JN/>XZ'b!"%7e6&kK,kaINlFFO.fEVR(W=D@n(*%H13D64\2juf()^Uo<#smAPmo,;riXM#Y)m%2'l/r6-
%S:9/s]"QN1_]N&2hqXEis7V2FL=Aj?a\,)200+r#p3a'U,kk<r#,"N6N,$Y&9*(I8Pq;!p,8=]MY,*;G@3gA&kt?OL)[<V2FpP(W
%"JT>)nV`*11WjM!_j>'T#3dRSIdJSHODEC5A_+\$Ak230%>Y)!$aO3cM"9`n;h=fX?uBsec@P>5jJ1TD28l7%>p1jg`E,<)9'U$[
%O/22cO%cULPOG4FG0MBM<(b@s::j:03-[?tn);lq3%\2Y\P9MtC$tJrV2<JUI;Q!rjiV-.%Y&3(o;6::hRTLV;r1[1/!HQjMppNW
%QR9E[d$LUn9c#0A9ja=f%/8?[i9*hlV1TM#OZ=@P%]#\G+3g]CV36`om3nl"2(4(;Uro[#cC2DfqI8Cn8Z3iOU=-PDr]+H>VspI9
%Y,W1j%TfNc`DB!]aq6"A;LDs;+J5dRTYHij^[Q7sAQ+..Q@]Ze-@i+@!4LTIFr0)un[ChmHQK<oX]I'`>F!)t$sTF,@<+@*V5D0]
%DO6u]4>S2:(lKXlBG@-m>QcnH2Q5H%"*EJ>*"BmW_593Rk.1^=F"]8$kbY"Z`o.9'!e;E=P;j7dTRSk\`bj?($)19c%ageP"<#FW
%F&W?jkrs$d"b/+fBb#\hTnb^?pQ;h/p]BUa6[47\9**UA]-V^qSd%A1aP[B^YYSJ5*6X,=E/n#\-._nHp@t]B*\0A62dKmeGgusM
%U?*:4\`KISOY?M27cM9R:86tk/,bf4H!>4pl#H@K2b/;HY,WRjjE;.g;V9:E3B<m$F<E*UWAuUREp_)Y>_r6-)@jI]b2B&)RYcF,
%njtX\M.S?+9L`QG_gsjHT@7<\T]uLmaj/K?m5fsZ$o="S(OeN(9NB.NGPmsYLD7h#/-#*rT,;)-Zp,S8ZIGY8ls&aR47SY`Pm:X]
%fDeH@mrQ2*Ij#,>5cHb#O,d9&J@L.8;<*k7ju3SAGD*A(TD@D4kc4nCqd`ND9%=GIE6c[>!K-2LGL6/TZfqp!ecI-5Y.LreRgX,F
%rTJt)UZ\u>/j#^*G,pDMHkqP-Znq./(V=08?13k^s&e`Qq898(nd2:`6d$SnpO`aE/</^0Ltp0C=mAQh&LL%oJ8%r@[RJ-kM=A'T
%`g!4_KJ14iPUUh4l9`d'<5TBF<WXur[p'GcGKg)/qo'5BiUpU1A_4h,[sE;>VZZ9g:Y`i@p;LjZg)DkSm#ThA[7<D69lj.RUJqUf
%W1<^nHgk#)),q?5aZF.O?7-,@Be;8M\uJNEThPjO[$d+C<CJ"Z5cO=P.OK[q:NO"eT;m$dB%+%`oN\4.#W$4ofGP:3J'MK$pK1#T
%]Sp<JK=qgRpk[e&5Y).c@6u?2OV;:N,7TOmS/FU,UW/:Yp<!8WaR5h_[qI4PX>"`O-Bb@U2C(YbC1m_"U5\bl,,4mBOb13gMNu4^
%3fjW\1%tG&l&a\ZlIaQM7*Tm(cD4jrSjEH*D3im`==T2u0Z(3/fF4>59VSXM`-!cFWSpV1T@BAJX,^#B0$pIq)A"ok9=]fgE_r+C
%@XrNh$DLgfKE0\nB[.,),Z4&I<l5ssh#sFt0a6JTB1d89JJpd6$j@9t!MUVL_F=SpeU0XEQOAtEH^?>VMc/HBru&EL66Q!#/OIlU
%Ln`7oJ4I?VNRSS34-=be+_jP.*2:FbJNrd7of!U.!`17?6`b*L^EIN-DM@W<0"\"6(-CNrg%\\t-r9%)4oF<`Vs2XbLW1-Cs(o8/
%s"P0f)'IWcE<*Gl+q*nOM`eeT[E&KWkopqJhQ=$`/Jn55VMgBudm[$)ko)))MHSqmT/:t[hTePgAlq#1MZT/I^+PS#"7O`)m#F$Q
%X3IV%)Ep;P#K\$l>sKma^=fogWaZ&@W1>N))_)\3KH@%+Dc(BE>VLA5DO3ngJeq[`L`1%'FoJfWrp"[C31jN"Va.!!eF3GA;,KY'
%akh$/1rB?m'.PgO7(s=42FpXUTET;(>JfIn+2+BGKbPgVHj^!8C:2?Z]^.>&[ZG%jPoM\<69hWr(r`uHO.Oajg`Zu;&d:m-l>C?k
%&>\aN]]+Jj/Ik/e6GNE'?"X7=.H0L>84X-NaI!lg%Yu+aRg0Eop+#d;';S2n`!si1Nt\"q!#aIK<$$4L-n$IrFo:gO#bQ7Xns"K'
%_,f3DG)Q:YV0\,PrjGN"b*L-^-i&$h==N*KKpQJa`(W#c+`?k)5JU$!\B%Hh\h#ScIj:Y.N95_$`3#0:MX@4XAWj=(V#KQ;p>OGn
%BQe,_NLo2.NH]:VN1FRZ:\dBjUs0CfM&U)E</M7UktHZPgc`87W>b3-:^\6)51k?R5Wmf$JifL)QbW('B!aC2am>/i[9""HSl_K-
%c0(pl^`;;T?h"d?>Fosbk[K<6<f:6Ue&>)DJ_.L+IjLdED=C<nd8;rJ3?rELfj+u286@qKLmqeqd5Mj"Hi^NLPBl3"W6DH9W1&(h
%k<dIdPC)EpkEdiLq:hH8T>L!i:./UkI&[jm4o'B(`ts-ck'l"np[Cfr_=G+e($nL.4+jfLfH$TQcoEK\Na+?SGd&e"B!?+AncG6P
%b2*>:S[AN1=2`@;i1S]9lQ3uRqJ&i(])j_L0S'qV;,l9TC7tP_dMs&I[]PSb]Np8pk`L8&\o4mF[Raquk%:cV^G(K&0u5'+_f8_N
%VMI<:B^_%febqT<nd-mG+W(1^O$Ia4g4?]Rm-(uTkAiq%]0=A?fdOXr<jYh#i_C;/s*H\dO;)/-Y<1"SEu=WDK,;CW;D/@RpYBBt
%])m5lS>-_+JEWAE+O.X?f1*(-T7a)J"PEDmI['maO9<Y>4i]FQmN5Lk+fX?a);iK.+PGb+%<moPK(h7F]hnVrX:Ek,DPQg`+T=4d
%n?_@gG\P%AoZ<=P]JO>):D]pg:]H_-:,H7D3kt[!3dG>\e`jshr6b_BiKG]),N.T-q?Y+u1;#H+]GFkD9%jEO9r=OE`=jc093Y6G
%^Wq/9JL%0:;DhG7KH9?[O(W\'p$SkHP,]\1V>#A)9#P4ED5j;8.4P/,s+Qu(Tt>^U^V0f,8*tAT?M>iDP$Qc.0hru0=?l9]Ie@-Q
%hs5$(l]C`;%pehh=hd*moR,B)p[F+>4.AG"@Go*gVWj:NIL!X=cR.S*T(^"S;I;ZSa3RNTm-'=LeX;j(:_XpjLK/9)\sActeS$AK
%e"M;&=f2r@ZFuT$LRMVkcNDTnZ!ZVF-LH<l_Kf.iNZ%sU*+;b*\Br/8M!aQO3=@JFgoCP&$[Hft`DGBMlS='E<T"-)8/h1jD=IlV
%ff]Auh'5NYW%6fkTtXiu9&8,Qi6p?h:V<sW.jEg]M$=[HR_u"#*I8Y(Nm3]VR.o2X=7r-NRIIq0N0PXq`]gm/)>>A]iHfL`db+A;
%c/jI[URUBsOGFkHE;C.aI[dab#[D<%B2]^=iXc>VF%5567,@FE-Hdc._[61>c$hkW($P`r;'ir7@j)Sr'B)em$emrTr#?FoE\=fZ
%Kjl1u2'NNn>H:nd_aZnG)+_mA9T/*g&5DF?Hs[=3`$4TZ&V^g63uokEU(*/)6]dI1+;2ei9*Nm.d)[7n%tIYU#X_JVZHjft*V"gF
%Ef,V"0H>m7j\]q%`]O$8A'[+'2Re^?IHA?Lr%,JPfh?mN^,4GU\N&=uk8*6mK.L&8]Ud@VF5C6]QY4#1!%[Z4G?g[6R%B4WIl:T&
%rNogus"mtk!1GN\!);'IJ<l*U^hd._JtFq%Phsug!*Qt'Zb>a1]HlZ@WQc$+F`jWnf%aodZ,juG4\"rVBig_;qeqd6V,QPn(m6L?
%N>2U7SP<[=\2\JL'^LY\;T$eFYRXSt,F+&uQ'N,:o(V/D='PUgga.^oX41VsMPEg=IY8eS,/$H\7RN['M]];IUnEj@611B%d&mci
%i,l"hG#;,0]JL\)iLZj#M@Z#6a;-d9LF?e-$o7-'\YY^oa&Bn#K,i79(7[Wfrt6TUBCi(e_nM=JB7DY3J^4TI-)kQ-W2M+,6/W=t
%k8-U6+S1*_JSj6+S</\AZ;PZa7r2C!Z/!nN_Ej"VN[L\rPB8-q=8!`"8]c%7,k,Na$.%f>G_L+hoW:uNfB*grq:koDX4\SQ1uu\_
%,,0>2'e5sB)B$*I&($Flr&u94ri]03/Jh"C^QSRfE42O-k!tRGNfoK-biZf?*CP&mTmj']\jLLqb`DSbE][u@B/VQ3&.BcrQDq<:
%^#pGf=ZEL`G%C3fP>:o8o:28=FcM`"4le"!/S&<opA%+g2Gf*0e1b-N(G:G5-235%hT+cY+FMDIIsA`S$qGQnRD;JO#u`F!W;ZT$
%?-:&;G3XRXR]A=Qm7cZtiXbDdo'(^,el7)7`lp86OB02-J4Se20NZo)n,-8+QG`K3^*2KZ8"8>X\u]FDY#1](6W&auHS!ail;JN-
%.sF+J<NGlA@FVYGP5NSZMXAc18[T\I*4nRL$*3A[^n)Sdkn^2J)(,Qb(VCFN*CiS";;I<TaShIG2uN[%05V2UZ7tpCG%]1h8r$mU
%/9Rp$Vkm/M/JbtkcNjJc]m:XqqqX0?7U41k>,:lWYabRueA"KJm&+U53Hh8M;\@obnN@I!VD%/t;Y1aj<5m)GLfC`b[4!X^&KS$/
%4&`s:"nbDMQFmQ(g#,n+\sS:R8*8-7p'lPoGV(B"'&6&iW99?LVem"K$W9!3IIf@FRNr)AN?])a:/[Pbiqi.nh](DO\+?J$gK'^?
%Tdu*SFf)VT/)=q6c;KFD,P$/Irn5AA\OUR*q_?.!753DcT4`=<pQ4:OgRBs>oZ%NLH^#28HWUJ3c!?>7q?2ks_Y,b9[!T(sl9>*1
%<@j\t7''ifEp+%k;UT<%oG3cb0rOsLh478U-H?jTpBLX&DmZn9lDj9T?7(:,!CO-uJQ[gQ*_[\dLN,l+^J@#Uglb-QQ&ORXa-"%P
%(`db,\uVl,h<ujURM<#:1/k^kf,sUlP"8OY&k3V"<_([sBT5RQPPu([#8!O='cTdd&-5jcA7T2h2-%%3.RXAte[/CZCn7,M]!@/&
%@IOppMb\QA"jpV3["<iWEqh;]C<Q.fZD$7c'J1tL6Qlcp>ZFDs8r`>NGuoRP5V&/XqQa]n?UQLLRH)h.NbsBd#b]SD?8e:*0PXbA
%-21>C]8#4%..RIgDGaCQDm,_g)Opfj/iW"HJr0Zg=4*7&CRChS!_Gc/3_+#hkcr@@9b0*,YnD46[KY=a!o(;@U0^Om:3ct>q](^c
%fFPc(:B/-tn\u^C&_%NrjE,\'dlHD+3%!16NJ^&UV6Xdgi>7ZN'guhDaQXJ/#.FoY^i^kHI3PkC=``P@,#M4#bN]rVU;0!<7--Wu
%U?*Mufhq$GZ0bZJVf0sOHe3m5hKM1)!U";R:Q[rY)*2/=NY!%qUBDYL.8mD,R\5@2GSA$R,:Q%jo,LGc"%/:E&;PO_+?VDJ&K[Ab
%$&0d@_F'q]'YZ7i'jg&PZM8-%Ml^dV_\t-h.BniZ.f@U)a6Th<dH?!C%+ZmVfNMKc4!@ps?/KR?9>'d%@kgr(5\N7>cOgd!U=_m(
%3GO!8p/ZbTMg7Ini=?_26ub9`Q+<X?H+K.J#,\IJp1VuFOm_k'-c/LMO<qoa5GSSo&<CM!4s`?CP9briKHpg>2bU5`mcf)_@B'"F
%+c9C2\>Z$3LguT@M'<H!6SEG_,(nfco7Zn4M5GH?%1th+pTfESjD^AFOb7Di5n9856k3=8=j:/mf+Kr?n$JWB4>?rE/nF_M<eEO9
%1J8?WQ<#oQEfaZ9fq-.s/ZeqgR7smSF5VVI<?Tk"Z%C0jT90F[*'L;2]A/IZB*t7_`>pCe`1>2K`5"6BPUH.u3^[+"d?%6^UH/m2
%`PmXjM8_a5WgJ%=b[:YqS."[t)6D5u<VHNI4V=8a-%lTRN7K]50(_!U%#>b0Y@ccM-@r%<hSNhU,6=eZ#Te`PES3MMkb<(`r7T]#
%V'AW6BffE!(@PM0YS3-VJF;IVqu`^]"m[6Gk=4hu^#>6gF$TgKnLXW$!mi5Fq=$rf'17u5jO67X:61*rkL7n6'_?-mRSqB&'GWr.
%Jtt_faj=#.0\6t<`0+`2b!RsqjcM"'MW`4q<]k;PZ>;k?R^>3D)71+pIY>4Y<JJ()Jt*ses0"\r?%gX=Cn=:VMYH1:nEJdI*$TCM
%,UmVmi2KHHiCaV%0OK,4ZYnTsFU!VtQ,Fuu[7.BB;(rc9W"<:+iA?q";$,]R7;]C,)`@B7Hd2Q)Z)0HcUZE:YP%).!^o.n8?^562
%fVs8oH66.uQ,'^H-"HUqC,-6rVUH%ICF@UoR@7%&H>6@Xk?bZA:+tt*5E-23U)(eb2%(lNX&;'8lZCNTl;6SmA,?Th"A\WD\;4H2
%5;E`1Z'uL^>Ip#?%dP]eQ-\tknr)Pk+Be>9]B=&]ej66S,oV06j$]We17:(95lm\s&<a'K0i4``f1G,`;67#lT/<8h"Z;P1Ao#ZQ
%qgCdAeru:(S=34D,]XR@aQ/T^,r1\\1At9E7(i"I9$2Knn=ZXNRqFR#7iL@piDVQd;99SKiBk$J,Ed"#HY@#[9lC1$.)c[aJG(Kc
%09e.hGhh.g.W&t\0kq[Q:f=;got6CN.UcFL)#>Lj7!%Qj4WZP?O6='uEWCb\NE`C)`oRSW;BOIgdqLcrTf9I6.<UebC/Stfe'n0a
%rE)3tei*aX'sI>F>K#Xu;YHtC\(&fHCgX9Q!"/^gYo'2+Q,f0W[-gp$FmUTR8@_n"B;/Y%I<-qV!;0>u3AVQsZCZ3[ig@jbi[Wo+
%Rl!YcA/o,6^k]5$`pTS$OuO)VOuc4#$38jQS[p6G1Nn!Z+80B6#Y:6tO.Zn`!0n)qknr.U-qko:1('KQWih+.lZ=,"V%jG1?l@L6
%<631eF0XV/is<%s")Oj^\>"8VY.LLlE`\K4jbpPRnfe;bEJe\/o&jg"X/f`j#cc@4m#dC@7#+XA>]lIT#I0p(NHH`L=l$Q6$/WH#
%]j&FAh-1iJC)=.$0sFm*+tY]^^Y&jLIoJsOf=+tQs.7c:5""<pAk<fS^%q*==ohddkHh\nKN&bP'.%_?0Vu2`7%@/gLo&.'MQ@c<
%^91M*j<8d0JbrX>0a$eaGjUDg%oMIuWRTs%%/"uj%KAD%j%JT0MQ>9;[Ab`rOWm!?IH[tZju#?ZBJ72Ap!iCgSD!o`R:$"BF_<\L
%#==.K&6i$pi.2am@-$uci)`UV5nk*Wn:;,6'I.j9JeM5h.9>rR'JF^p8"%2[V7;)M8Tsl?H`Hr%OD+?N$JC+Mh+0k?,H`LMFjMg`
%D[O^($:mCmQNTin&UH,rp[k=r<P,<,+8V$6%?"L-d5uf5K=(<R"fQj[0'7m:6,^t`F2PPu`KQ]u$YJ>G5%KCs"uSsCs0!W`@:!'J
%Q$cTF'/AG@pKh`]&jfmuHa43'QM#kNJ%+p*(W_gR=uug3-3.LOL-EP['1[rpII7S!:qbj;-PWi7hus8h_[ASPP?f'KLDNp-&74#,
%`<@dEG!'Y(?HB2Z4'="d,)*-'E?'2^KtC*;.,^fe*'8(UN&*e"8cYYU_,V>ghY$(T.7C"%`"B%C7]?H]&2`#V)"Z8tV(![-FIJDn
%\gE5)_JOCb;pK<aG:$jW=`C?P]cZ4\R%H'aL4$7rLReZr;pg5lne@23Q_8N`-6)_>g1UTcb(^=Y6NC:=!SLOYMH$8R6s1r]CC#`(
%?:JbL2%0OZ22/!=_J<M%%k=+/+]=PM5eRAeKp5q6qDr=)LJC$R0\LDnFU&9XK?X1(JD4ZX$mp==0,&k2G=ju)'#@4[=?XVu5.OSh
%`6]bsq09ZGUSds04\K&d0[Jj[OC&Vo'f&I;X$V]cYZ44KfCN"`0H%k;.42r8*dTtbKom\!>Q0g8k-Dr[_d+>Z%/07Gceu!rgGFP.
%BSOER%=Tf7!h=;;>8;Hs9Q=K7a4P4?MNKB]RsBpO>4)"e=k=Rh!*X('f)9'INk>#6$md,Ta;r)H9-U/D4Kfr.G!.s\>1R<$BrN<a
%&*,^r4"I:Hiu2$P3?^Cc^MSdUoR`^bEV77d)GSK>c#%brc'at[[@&j+X1nqdeTtDqX4.S@]\I:Bqj?o[bm#Hhg<RM+/*"1Bj8r>P
%3g"PUHPqDI.Z>p"2>p[54>;lQ)%TuI[[WfQ?Kl<dL:A50cB4^3cT)c+PW)@VFk>."3N_MeHA4l+"[&a($R8`C3Vk(`hsF?'Xe(nM
%P+tr3klf#lkE9haft=l?cKECC=#I;#[B[b4`]Lmj.)-^jfJ+PW7p+:'m!UWD<HK-ImVQ!.*LG5<fkc8m;cd&#Q=WgR0QiW`A[0fP
%[:$Zt3\)HYm\HBQWaom/:>P<0Yn+1\_!](RJ?_KXB6SAHLF6B?i?rbM4Z/jd1Gd1faNZ.YPI#RVS"A5un$/V114H[cRq(e/G?jRI
%g8f"-JImoD<=e$O!nL9`<?)bJb2[<XSrtTpd5ZB*T9Lg%<A$3+$9!+R*WMk84)McU.]^!FNG`A)_FGk'CTVM-D]jX21A%THW>45d
%flqSY7q./<DN>:;OV,Dc.-_/8N@uZt`=>-]Vu\Y(5hD+6R1n2IKqTdpoVi:"4t.j>8.UL+!#7D1Ykt_kliJEV`+nm+a:VQV20-8;
%mTQ,qHs6F0s/:O(Qg=@qYsqu<V'3>alg@"X20ECV;7f,>1+hd-J10hOa(_eR.?GAP&BS)UoGe*<.C^]MRZe+Y0LA!o>B6aYqru:'
%GX7/VK0^^9*3cR8'W4TZn--6cjLAkKc,;su=[!&X=PG@r)<t'lVf2F\$)r\%<RHalg0C;i]p9,qk80K+CL<s1-3>nVE&ak=4%LO4
%#XhD<Kp:u-J"Vsh!EW;]94!Gi3dX"MO*BAPE*YUq!s'd*^a$%ZJt(LO);O!ol%"=F6L`&1,qq/I$9eGG[,=k66O\@/*&VtOMB"`8
%71UH.+p\^-#"A=('M3P;VeG(VmDBj+YnT$`^:7?ELt5=b`2^jI#Eeca#H0_LA1b))5pS>%$CP.7r91<_^gaGSPTm-#AjhX2HrEJp
%V$s)[='-T]ob&CD\rU&9X1Fs-=:2'aL4ph/I1c],I1M1/5>-#..24QShc?6rRcmpbhUGJCOM3ZQ6O;Gr<ujR=9@1a$ks72LJb^eh
%-4D%:3"3'L*"SP9`"44=JD^\1gYrI'DLru(fY*Fg71]f<kgAI*8e0se^*gh-&-Q_klG*R3*#"aG&aY%a;VRN>$/u#D_$Zlg]+D="
%iBJ=b/)ANF)>LMr#(I$5U3`J7fk_6T4V%j/#mugn8-nhoZH[s,2D:+p<Y*tsX65IWBXt1T$KrLS:S@?6(asaWQtc4=(JPmM^U;4,
%JU#9IA?6.l2o'm2kLEWBA68'$9&`k^1gAEKXNt;[(1/aEm/S`(6_U@)laZ3iPgA>413NbkXB+.e[47i&1nfK%]iZI4H.U\kFCSLK
%=<h2]:pn-L^!_UVhCEC%Jdu+=-gN4AZFZK6WR,`C4CsX%`Dfd7\XoiSKUQP[<QI!'^']uL_cS)2A2l)mRLEtc<0Q8m%o"dFLShR3
%*]V&Dn\>J1nn(KJQj8)1_rA7gZe3N>QH)*C`FQ^fIo_O1U:dK!nN0Ai7:PM]/3!:jVOq,GEbnu\C90RuF%NSqk5#pIP]V]o7r]j4
%>)haX]4NjUlO9ScgH;LQEI)hKHf][E!7:cN8QpC!c7(W-=\Q_!RVF\>41!6d?L3k:ZC[LSe)dtNH#oIH8lOi:PNeu=:$9jc_><[$
%hu%X+ps&9:gTSBlp7"#@If',f0*cIfa#DnhrR:X&J,S-VpRcs/h2cLRq=]_*hg`tEHMdI,X"V26s7XK_r:'^QfNCH:$\Ufi")`"j
%rkn1gs6MsKY/bV~>
%AI9_PrivateDataEnd
